<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on 苏苏的博客</title>
    <link>http://blog.suconghou.cn/project/index.xml</link>
    <description>Recent content in Projects on 苏苏的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Feb 2016 20:49:27 +0800</lastBuildDate>
    <atom:link href="http://blog.suconghou.cn/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>air</title>
      <link>http://blog.suconghou.cn/project/air/</link>
      <pubDate>Thu, 18 Feb 2016 20:49:27 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/project/air/</guid>
      <description>

&lt;h1 id=&#34;serve-static-files-in-the-air&#34;&gt;serve static files in the air&lt;/h1&gt;

&lt;p&gt;在线解析压缩合并Less,打包压缩Javascript.&lt;/p&gt;

&lt;p&gt;手动压缩打包,执行Lint,静态服务器,缓存版本控制,完美结合CDN&lt;/p&gt;

&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;npm install airs -g&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;基本参数&#34;&gt;基本参数&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;纯静态项目,在项目根目录直接执行&lt;code&gt;air&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;即可开启http服务,直接输出编译后的结果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;PHP项目,项目根目录执行&lt;code&gt;air develop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;会开启静态服务器,同时开启一个PHP Server&lt;/p&gt;

&lt;p&gt;PHP Server 端口号为静态服务器端口号+1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;服务器模式 &lt;code&gt;air server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;编译将做优化和代码压缩&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;指令&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;air lint&lt;/code&gt; 执行Jslint,而不开启http服务,文件修改实时触发&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air lint jsfile1.js jsfile2.js jsfile3.js&lt;/code&gt; 可对指定文件进行Jslint,可对一个或多个文件&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air compress&lt;/code&gt; 在static目录下执行,将会根据static.json文件描述,压缩合并输出到指定文件&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air compress lessfile1.less lessfile2.less&lt;/code&gt; 将对less文件解析压缩,多个less文件将会压缩合并为一个css文件&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air compress jsfile1.js jsfile2.js&lt;/code&gt; 将对js文件压缩,多个js文件将合并为一个js文件&lt;/p&gt;

&lt;p&gt;可以参数中同时存在less文件和js文件,&lt;code&gt;air compress less1.less file1.js file2.less file3.js&lt;/code&gt;
工具自动按类型分组,less文件和js文件,各自压缩合并,其他文件类型忽略.&lt;/p&gt;

&lt;p&gt;支持jpg,png图片压缩&lt;code&gt;air compress file1.jpg file2.png&lt;/code&gt; 采用&lt;code&gt;tinypng&lt;/code&gt;API接口压缩,效果出众
使用参数&lt;code&gt;--key=your-tinypng-api-key&lt;/code&gt;设定apikey,例如&lt;code&gt;air compress file1.png file2.png --key=abcedf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress&lt;/code&gt; 除了&lt;code&gt;--less&lt;/code&gt;参数,可接受&lt;code&gt;--debug&lt;/code&gt;参数,生成未压缩的代码方便调试&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress --debug&lt;/code&gt; 以debug模式压缩,less文件只解析合并,并不压缩代码,JS文件压缩合并,并不混淆优化&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress --watch&lt;/code&gt; 还可以监视文件变化,自动执行压缩合并&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress --o&lt;/code&gt; 开启极限优化压缩,去除console,debugger,优化常量表达式,循环,条件表达式优化等,同样适用于server模式&lt;code&gt;air server --o&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参数-w,使用Jslint,文件修改实时触发,本地开发建议加上&lt;/p&gt;

&lt;p&gt;参数-g,每分钟定时拉取git更新,可用于测试服务器上&lt;/p&gt;

&lt;p&gt;参数-k,设定webhook的密码,服务器模式建议加上&lt;/p&gt;

&lt;p&gt;参数-p,指定服务监听的端口,PHP Server 端口号也会依此变化.&lt;/p&gt;

&lt;p&gt;参数-v,打印出版本并退出&lt;/p&gt;

&lt;p&gt;参数-d,以daemon模式运行&lt;/p&gt;

&lt;p&gt;同时可添加参数 &lt;code&gt;--less=/data/pathto/lesslib&lt;/code&gt; 指定lessLib路径,可接受相对路径和绝对路径&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;目录结构&#34;&gt;目录结构&lt;/h1&gt;

&lt;p&gt;目录结构采用类似 &lt;code&gt;项目名/static/css/style.less&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;项目名可选,Javascript路径类似 &lt;code&gt;项目名/static/js/main.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Http访问 &lt;code&gt;/项目名/static/css/style.css&lt;/code&gt; 即可得出style.less编译后的css.&lt;/p&gt;

&lt;p&gt;注意:如果文件夹内确实存在此文件,则此文件则会如实输出&lt;/p&gt;

&lt;p&gt;因此Http直接访问 &lt;code&gt;/项目名/static/js/main.js&lt;/code&gt; 则会如实输出main.js文件&lt;/p&gt;

&lt;p&gt;工具支持&lt;code&gt;-连接符&lt;/code&gt;配置,因此可以Http访问 &lt;code&gt;/项目名/static/js/main-page.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;则会按顺序合并main.js和page.js两个文件&lt;/p&gt;

&lt;p&gt;less文件同样可以按照此种模式,此外less文件还可以使用索引模式&lt;/p&gt;

&lt;p&gt;使用less自身语法,style.less作为入口,import其他less文件&lt;/p&gt;

&lt;p&gt;此外,如果文件过多,使用连字符麻烦,工具还支持配置文件模式&lt;/p&gt;

&lt;p&gt;在static目录内建立static.json文件,配置Less和Javascript映射&lt;/p&gt;

&lt;p&gt;static.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;static&amp;quot;:
	{
		&amp;quot;js&amp;quot;:
		{
			&amp;quot;all&amp;quot;:[&amp;quot;jquery.min.js&amp;quot;,&amp;quot;etpl.js&amp;quot;,&amp;quot;tpl.js&amp;quot;,&amp;quot;iscroll.js&amp;quot;,&amp;quot;chat.js&amp;quot;,&amp;quot;aside.js&amp;quot;]
		}
		&amp;quot;css&amp;quot;:
		{
			&amp;quot;style&amp;quot;:[&amp;quot;page.less&amp;quot;,&amp;quot;less/admin.less&amp;quot;]
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时,在static目录下执行&lt;code&gt;air compress&lt;/code&gt; 将会将上述js文件压缩为all.min.js&lt;/p&gt;

&lt;p&gt;less文件解析合并压缩为style.min.css&lt;/p&gt;

&lt;p&gt;在static目录下执行&lt;code&gt;air server&lt;/code&gt;,http访问&lt;code&gt;/static/js/all.js&lt;/code&gt; &lt;code&gt;/static/css/style.css&lt;/code&gt; 同样得出上述压缩合并的结果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|____blog
| |____static
| | |____css
| | | |____less
| | | |____style.less
| | |____img
| | |____js
| | | |____lib
|____less
| |____base.less
| |____mixins.less
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;webhook&#34;&gt;Webhook&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/webhook/gitpull&lt;/code&gt; 执行 &lt;code&gt;git pull origin master&lt;/code&gt; 立刻拉取代码更新.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/webhook/viewlog&lt;/code&gt; 查看运行日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/webhook/clear&lt;/code&gt; 执行清理内存操作,立即清除所有日志和编译缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;添加-k参数后,webhook需要密码才能查看.&lt;/p&gt;

&lt;p&gt;在网址后面添加?key=密码即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;性能&#34;&gt;性能&lt;/h1&gt;

&lt;p&gt;所有的Less编译和压缩,Javascript合并与压缩均在第一次访问的时候执行&lt;/p&gt;

&lt;p&gt;并且结果被缓存到内存,下次直接内存读取并输出,直到有文件发生修改才会再次执行编译.&lt;/p&gt;

&lt;p&gt;编译缓存储存到一定数量将会执行GC,存储了2000个编译后的文件后,再次存储将会清除旧的缓存以释放内存&lt;/p&gt;

&lt;p&gt;运行日志积累到一定数量也会清除旧的日志,以节省内存.&lt;/p&gt;

&lt;p&gt;本地开发和线上服务都完全无需担心.&lt;/p&gt;

&lt;h1 id=&#34;缓存&#34;&gt;缓存&lt;/h1&gt;

&lt;p&gt;内存缓存保存最近一次编译的版本号.&lt;/p&gt;

&lt;p&gt;资源版本号以类似&lt;code&gt;style.css?ver=v1&lt;/code&gt;的形式.&lt;/p&gt;

&lt;p&gt;修改版本号后,less内部所有引用资源如&lt;code&gt;background-image&lt;/code&gt;等,都会立即更新引用地址,防止旧的缓存.&lt;/p&gt;

&lt;p&gt;可以放心开启强缓存.&lt;/p&gt;

&lt;h1 id=&#34;共享&#34;&gt;共享&lt;/h1&gt;

&lt;p&gt;根目录下&lt;code&gt;less&lt;/code&gt;文件夹作为共享文件夹.&lt;/p&gt;

&lt;p&gt;其他任何项目里的less文件都可以任意 &lt;code&gt;@import&lt;/code&gt; 此文件夹下的文件,无需指明具体路径.&lt;/p&gt;

&lt;p&gt;可放置mixins等.&lt;/p&gt;

&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;本地开发 &lt;code&gt;air develop -w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;服务器模式 &lt;code&gt;air server -k 123456 -d&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>