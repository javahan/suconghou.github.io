<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 我的博客</title>
    <link>http://blog.suconghou.cn/post/</link>
    <description>Recent content in Posts on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jan 2016 13:40:53 +0800</lastBuildDate>
    <atom:link href="http://blog.suconghou.cn/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>linux相关操作</title>
      <link>http://blog.suconghou.cn/post/linux/</link>
      <pubDate>Thu, 21 Jan 2016 13:40:53 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux/</guid>
      <description>

&lt;h2 id=&#34;linux实用命令:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;Linux实用命令&lt;/h2&gt;

&lt;h2 id=&#34;w:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;w&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;w&lt;/code&gt;命令能容清晰的显示,服务器在线时间,负载以及当前登陆的用户&lt;/p&gt;

&lt;h2 id=&#34;vmstat:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;vmstat&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;vmstat&lt;/code&gt; 显示开机以来的平均值，而不是前一秒的值
&lt;code&gt;vmstat 1&lt;/code&gt;命令指定一个参数 1 运行，来打印每一秒的统计摘要.
这些列代表的信息:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;r：CPU 中正在运行和等待运行的进程的数量。其提供了一个比平均负载更好的信号来确定 CPU 是否饱和，因为其不包含 I/O。解释：&amp;rdquo;r&amp;rdquo;的值大于了 CPU 的数量就表示已经饱和了。
free：以 kb 为单位显式的空闲内存。如果数字位数很多，说明你有足够的空闲内存。&amp;rdquo;free -m&amp;rdquo; 命令，是下面的第七个命令，其可以更好的说明空闲内存的状态。
si, so：Swap-ins 和 swap-outs。如果它们不是零，则代表你的内存不足了。
us, sy, id, wa, st：这些都是平均了所有 CPU 的 CPU 分解时间。它们分别是用户时间（user）、系统时间（内核）（system）、空闲（idle）、等待 I/O（wait）、以及占用时间（stolen）（被其他访客，或使用 Xen，访客自己独立的驱动域）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CPU 分解时间将会通过用户时间加系统时间确认 CPU 是否为忙碌状态。等待 I/O 的时间一直不变则表明了一个磁盘瓶颈；这就是 CPU 的闲置，因为任务都阻塞在等待挂起磁盘 I/O 上了。你可以把等待 I/O 当成是 CPU 闲置的另一种形式，其给出了为什么 CPU 闲置的一个线索。
对于 I/O 处理来说，系统时间是很重要的。一个高于 20% 的平均系统时间，可以值得进一步的探讨：也许内核在处理 I/O 时效率太低了。&lt;/p&gt;

&lt;p&gt;SIZE(VIRT): 进程使用的地址空间, 如果进程映射了100M的内存, 进程的地址空间将报告为100M内存. 事实上, 这个大小不是一个程序实际使用的内存数.&lt;/p&gt;

&lt;p&gt;RSS(RES): &amp;ldquo;Resident Set Size&amp;rdquo;, 实际驻留&amp;rdquo;在内存中&amp;rdquo;的内存数. 不包括已经交换出去的代码. 举一个例子: 如果你有一个程序使用了100K内存, 操作系统交换出40K内存, 那么RSS为60K. RSS还包括了与其它进程共享的内存区域. 这些区域通常用于libc库等.&lt;/p&gt;

&lt;p&gt;SHARE(SHR): RSS中与其它进程共享的内存部分大小.&lt;/p&gt;

&lt;p&gt;VMSIZE: 一个进程占用的总的地址空间大小. 它包括了没有映射到内存中的页面。&lt;/p&gt;

&lt;p&gt;SZ（DATA）: 映射到内存中的页面, 这些页面仅由进程单独使用. 这也是我们最关心地方: 进程实际占用的内存数。&lt;/p&gt;

&lt;h2 id=&#34;top:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;top&lt;/h2&gt;

&lt;h2 id=&#34;free:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;free&lt;/h2&gt;

&lt;h2 id=&#34;磁盘相关:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;磁盘相关&lt;/h2&gt;

&lt;h3 id=&#34;dd:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;dd&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;把指定的输入文件拷贝到指定的输出文件中,并且在拷贝的过程中可以进行格式转换。&lt;/p&gt;

&lt;p&gt;if =输入文件(或设备名称)
of =输出文件(或设备名称)
bs = bytes 同时设置读/写缓冲区的字节数(等于设置obs和obs)
count = blocks 只拷贝输入的blocks块&lt;/p&gt;

&lt;p&gt;创建一个100M的空文件
&lt;code&gt;dd if=/dev/zero of=hello.txt bs=100M count=1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;#查看当前目录下所有一级子目录文件夹大小
du -h &amp;ndash;max-depth=1
#查看当前目录下所有一级子目录文件夹大小 并排序
du -h &amp;ndash;max-depth=1 |sort&lt;/p&gt;

&lt;h2 id=&#34;一份linux别名和函数库:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;一份Linux别名和函数库&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;alias tree=&amp;quot;find . -print | sed -e &#39;s;[^/]*/;|____;g;s;____|; |;g&#39; &amp;quot;;
alias cls=&amp;quot;cd $1;ls -lh;&amp;quot;;
# 获得你的公网IP地址和主机名。
alias ipinfo=&amp;quot;curl ifconfig.me &amp;amp;&amp;amp; curl ifconfig.me/host&amp;quot;;
# 显示出哪个应用程序连接到网络。
alias listen=&amp;quot;lsof -P -i -n&amp;quot;;
# 显示出活动的端口。
alias port=&#39;netstat -tulanp&#39;
# 统计TCP连接个数
alias tcpstatus=&amp;quot;netstat -n|awk &#39;/^tcp/{++S[\$NF]} END {for(a in S) print a,S[a]}&#39;&amp;quot;
# 回到上层目录
alias ..=&#39;cd ..&#39;
# 去到上两层目录
alias ...=&#39;cd ../..&#39;
# 按列格式化输出mount信息。
alias cmount=&amp;quot;mount | column -t&amp;quot;
# 查看你还有剩下多少内存
alias meminfo=&#39;free -m -l -t&#39;
# 按照文件在磁盘存储的大小排序，显示当前目录的文件列表。
sbs() { du -b --max-depth 1 | sort -nr | perl -pe &#39;s{([0-9]+)}{sprintf &amp;quot;%.1f%s&amp;quot;, $1&amp;gt;=2**30? ($1/2**30, &amp;quot;G&amp;quot;): $1&amp;gt;=2**20? ($1/2**20, &amp;quot;M&amp;quot;): $1&amp;gt;=2**10? ($1/2**10, &amp;quot;K&amp;quot;): ($1, &amp;quot;&amp;quot;)}e&#39;;}
# 找出指定目录中最大的10个文件
largefile() { find . -type f -exec du -k {} \; | sort  -nrk 1 | head; }
# 查看当前目录大于[多少]kb的文件
bigfile() { size=${1:-100}; find . -type f -size +&amp;quot;$size&amp;quot;k |xargs  ls  -lh ; }
# 返回你的当前IP地址的地理位置。
getlocation() { lynx -dump http://www.ip-adress.com/ip_tracer/?QRY=$1|grep address|egrep &#39;city|state|country&#39;|awk &#39;{print $3,$4,$5,$6,$7,$8}&#39;|sed &#39;s\ip address flag \\&#39;|sed &#39;s\My\\&#39;;}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 这几个Mac不兼容
# 查看最占用内存的前五个进程
topmem()
{
	ps aux | sort -k4nr | head -n5;
}
# 查看某一程序占用的内存
mem()
{
    top -n1 -b | head -n7 | sed &#39;1,6d&#39; &amp;amp;&amp;amp; top -n1 -b | sed &#39;1,7d&#39; | grep --color=auto $1;
    ps aux | grep --color=auto $1 | grep --color=auto -v grep | awk -F &amp;quot; &amp;quot; &#39;{ sum += $6 } END { printf &amp;quot;Total Memory Usage: %.1f MB\n&amp;quot;, sum/1024 }&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 查看你机器的CPU个数,超线程信息
sysinfo() {
physicalNumber=0
coreNumber=0
logicalNumber=0
HTNumber=0
logicalNumber=$(grep &amp;quot;processor&amp;quot; /proc/cpuinfo|sort -u|wc -l)
physicalNumber=$(grep &amp;quot;physical id&amp;quot; /proc/cpuinfo|sort -u|wc -l)
coreNumber=$(grep &amp;quot;cpu cores&amp;quot; /proc/cpuinfo|uniq|awk -F&#39;:&#39; &#39;{print $2}&#39;|xargs)
HTNumber=$((logicalNumber / (physicalNumber * coreNumber)))
echo &amp;quot;****** CPU Information ******&amp;quot;
echo &amp;quot;Logical CPU Number  : ${logicalNumber}&amp;quot;
echo &amp;quot;Physical CPU Number : ${physicalNumber}&amp;quot;
echo &amp;quot;CPU Core Number     : ${coreNumber}&amp;quot;
echo &amp;quot;HT Number           : ${HTNumber}&amp;quot;
echo &amp;quot;*****************************&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解决can-t-set-the-locale-make-sure-lc-and-lang-are-correct:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;解决can&amp;rsquo;t set the locale; make sure $LC_* and $LANG are correct&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thomas-krenn.com/en/wiki/Perl_warning_Setting_locale_failed_in_Debian&#34;&gt;https://www.thomas-krenn.com/en/wiki/Perl_warning_Setting_locale_failed_in_Debian&lt;/a&gt;
&lt;code&gt;照着全部做下来&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>玩转树莓派</title>
      <link>http://blog.suconghou.cn/post/play-with-raspberrypi/</link>
      <pubDate>Sun, 17 Jan 2016 22:21:49 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/play-with-raspberrypi/</guid>
      <description>

&lt;h2 id=&#34;安装其他操作系统:639f3845c6db751dcd1753d9faad824e&#34;&gt;安装其他操作系统&lt;/h2&gt;

&lt;h3 id=&#34;centos:639f3845c6db751dcd1753d9faad824e&#34;&gt;CentOS&lt;/h3&gt;

&lt;p&gt;CentOS7官方支持了AMRV7发布了树莓派2、香蕉派、以及CubitTruck单片机的版本&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mirror.centos.org/altarch/7/isos/armhfp/&#34;&gt;CentOS7官方下载&lt;/a&gt;
root 密码 centos&lt;/p&gt;

&lt;h3 id=&#34;archlinux:639f3845c6db751dcd1753d9faad824e&#34;&gt;ArchLinux&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://archlinuxarm.org/platforms/armv7/broadcom/raspberry-pi-2&#34;&gt;armv7 raspberry-pi-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://archlinuxarm.org/platforms/armv6/raspberry-pi&#34;&gt;armv6 raspberry-pi&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装osmc:639f3845c6db751dcd1753d9faad824e&#34;&gt;安装OSMC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://software.opensuse.org/download.html?project=home:osmc&amp;amp;package=osmc-installer&amp;amp;hcolor=17394a&amp;amp;fcolor=17394a&amp;amp;acolor=17394a&#34;&gt;osmc-installer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或者安装OSMC转为树莓派制作的系统&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://osmc.tv/download/&#34;&gt;下载一览&lt;/a&gt;,选择&lt;code&gt;Disk images&lt;/code&gt;,此系统较省资源,默认开机进入OSMC,img.gz 大小约160M&lt;/p&gt;

&lt;h2 id=&#34;安装openelec:639f3845c6db751dcd1753d9faad824e&#34;&gt;安装openelec&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://openelec.tv/get-openelec&#34;&gt;openelec&lt;/a&gt; 镜像下载,此系统相比osmc更加精简,是专为跑kodi精简的系统,osmc基于debain系统更加完善, img.gz 大小约102M&lt;/p&gt;

&lt;h2 id=&#34;播放器皮肤推荐:639f3845c6db751dcd1753d9faad824e&#34;&gt;播放器皮肤推荐&lt;/h2&gt;

&lt;p&gt;除了OSMC默认皮肤,还有一些好看的皮肤推荐&lt;/p&gt;

&lt;p&gt;1.&lt;a href=&#34;http://forum.kodi.tv/showthread.php?tid=187071&#34;&gt;Eminence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&#34;http://forum.kodi.tv/showthread.php?tid=214146&#34;&gt;Bello&lt;/a&gt; 看github,支持中文&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://forum.kodi.tv/forumdisplay.php?fid=26&#34;&gt;官方论坛&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用镜像加速homebrew</title>
      <link>http://blog.suconghou.cn/post/homebrew-speedup/</link>
      <pubDate>Fri, 15 Jan 2016 12:56:53 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/homebrew-speedup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mirrors.ustc.edu.cn/&#34;&gt;中国科大镜像站&lt;/a&gt; 提供 Debian, Ubuntu, Fedora, Archlinux, CentOS 等多个发行版的官方源.
还有brew 的二进制源,brew使用此配置能大大提升速度.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local
git remote set-url origin git://mirrors.ustc.edu.cn/homebrew.git
git remote -v
brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;brew list&lt;/code&gt; 列出所有安装的模块&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; brew install vim git git-lfs subversion node go python3 nginx hugo openssl htop lftp ffmpeg xz aria2 wget axel memcached redis mcrypt md5sha1sum fswatch
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chrome浏览器安装</title>
      <link>http://blog.suconghou.cn/post/broswer-chrome/</link>
      <pubDate>Thu, 14 Jan 2016 17:11:34 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/broswer-chrome/</guid>
      <description>

&lt;h2 id=&#34;配置chrome跨域:e0e57fba433e8be9bf422a453002b0ab&#34;&gt;配置Chrome跨域&lt;/h2&gt;

&lt;p&gt;Chrome 浏览器配置可以跨域&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --disable-web-security&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open -a &amp;quot;Google Chrome&amp;quot; --args --disable-web-security&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;必须完全退出Chrome,再使用上述方法.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crontab与自动备份</title>
      <link>http://blog.suconghou.cn/post/use-crontab-in-your-server/</link>
      <pubDate>Tue, 12 Jan 2016 13:10:21 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-crontab-in-your-server/</guid>
      <description>

&lt;h2 id=&#34;crontab使用:821b39f3c5e329d9ee0933de8bb69bfb&#34;&gt;Crontab使用&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;crontab -l&lt;/code&gt; 查看当前用户的crontab列表
使用&lt;code&gt;crontab -e&lt;/code&gt;开始编辑规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;基本格式 :
*　　*　　*　　*　　*　　command
分　 时 　日 　月　 周　 命令

* 第1列表示分钟1～59 每分钟用*或者*/1表示
* 第2列表示小时1～23（0表示0点）
* 第3列表示日期1～31
* 第4列表示月份1～12
* 第5列标识号星期0～6（0表示星期天）
* 第6列要运行的命令
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;禁止Crontab产生邮件:
在crontab末尾加上&lt;code&gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt; 或者 &lt;code&gt;&amp;gt; &amp;amp;&amp;gt; /dev/null&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 1 5 10 * /path/to/script.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
0 1 5 10 * /path/to/script.sh &amp;gt; &amp;amp;&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;定时备份数据库:821b39f3c5e329d9ee0933de8bb69bfb&#34;&gt;定时备份数据库&lt;/h2&gt;

&lt;p&gt;先写好shell脚本存入&lt;code&gt;/home/cron1.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;quot;root&amp;quot;
pass=&amp;quot;root&amp;quot;
host=&amp;quot;127.0.0.1&amp;quot;
port=&amp;quot;3306&amp;quot;
dbs=&amp;quot;db1 db2 db3&amp;quot;
dir=&amp;quot;/data/backup/&amp;quot;

nowDate=`date &#39;+%Y%m%d&#39;`
nowTime=`date &#39;+%H%M&#39;`
backupdir=$dir$nowDate
timeold=`date -d &amp;quot;-1 week&amp;quot; +%Y%m%d`
delold=$dir$timeold
if [ ! -d $backupdir ]; then
  mkdir -p $backupdir
fi
if [ -d $delold ]; then
  rm -rf $delold
fi
for i in $dbs
	do
		backupFile=$backupdir/$i-$nowTime.sql
		mysqldump -u$user -p$pass -h$host -P$port --databases $i &amp;gt; $backupFile
		xz $backupFile
	done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后定时任务&lt;code&gt;crontab -e&lt;/code&gt; 每5个小时备份一次数据库.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 */5 * * * sh /home/cron1.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用此脚本建议每20个小时以内备份一次数据库,此脚本保留最近7天备份,删除过期备份&lt;/p&gt;

&lt;h2 id=&#34;增量备份数据库:821b39f3c5e329d9ee0933de8bb69bfb&#34;&gt;增量备份数据库&lt;/h2&gt;

&lt;p&gt;先写好shell脚本存入&lt;code&gt;/home/cron2.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;quot;root&amp;quot;
pass=&amp;quot;root&amp;quot;
host=&amp;quot;127.0.0.1&amp;quot;
port=&amp;quot;3306&amp;quot;
storedb=&amp;quot;backup&amp;quot;
backup=&amp;quot;db1.table1 db1.table2&amp;quot;

mysql -u$user -p$pass -h$host -P$port -e &amp;quot;create database if not exists $storedb&amp;quot;
for i in $backup
	do
		table=${i##*.}
		sql=&amp;quot;create table if not exists $storedb.$table like $i;replace into $storedb.$table  select * from $i ;&amp;quot;
		mysql -u$user -p$pass -h$host -P$port -e &amp;quot;$sql&amp;quot;
	done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据表从源数据库中增量备份至备份数据库中的同名数据表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 */20 * * * sh /home/cron2.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每20个小时增量备份一次&lt;/p&gt;

&lt;h2 id=&#34;更高级的文件实时同步:821b39f3c5e329d9ee0933de8bb69bfb&#34;&gt;更高级的文件实时同步&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Mac&lt;/code&gt;上可以使用&lt;code&gt;fswatch + rsync&lt;/code&gt;进行实时同步&lt;/p&gt;

&lt;p&gt;首先安装&lt;code&gt;fswatch&lt;/code&gt;,&lt;code&gt;rsync&lt;/code&gt;应该是自带了&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install fswatch&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- fswatch -o ./ | xargs -n1 -I{} md5 --&amp;gt;

fswatch -0 /tmp | xargs -0 -n 1 echo $1

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shell基本语法:821b39f3c5e329d9ee0933de8bb69bfb&#34;&gt;Shell基本语法&lt;/h2&gt;

&lt;p&gt;声明数组&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arr=(item1 item2 item3)&lt;/code&gt; 使用空格分开&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;echo ${arr[*]}&lt;/code&gt; 或者 &lt;code&gt;echo ${arr[@]}&lt;/code&gt; 可以查看数组内的元素,&lt;code&gt;echo $arr&lt;/code&gt;只能取得第一个元素&lt;/p&gt;

&lt;p&gt;要取得数组长度,只需在名字前面加一个#,如&lt;code&gt;echo ${#arr[*]}&lt;/code&gt; 或者 &lt;code&gt;echo ${#arr[@]}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;数组下标以0开始,取得第二个元素为&lt;code&gt;echo ${arr[1]}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;赋值使用&lt;code&gt;arr[5]=5555&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL性能优化</title>
      <link>http://blog.suconghou.cn/post/improve-mysqldb/</link>
      <pubDate>Mon, 11 Jan 2016 12:02:40 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/improve-mysqldb/</guid>
      <description>

&lt;h2 id=&#34;配置文件:3f024a9bc4eccdf3db769802efc70049&#34;&gt;配置文件&lt;/h2&gt;

&lt;p&gt;配置文件一般放在&lt;code&gt;/etc/my.cnf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;默认的配置文件示例存放于&lt;code&gt;/usr/share/mysql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;各个文件适配不同内存的配置&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;内存大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;my-small.cnf&lt;/td&gt;
&lt;td&gt;&amp;lt;= 64M 不经常开启mysql&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-medium.cnf&lt;/td&gt;
&lt;td&gt;32M–64M 经常其他程序搭配mysql&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-large.cnf&lt;/td&gt;
&lt;td&gt;512M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-huge.cnf&lt;/td&gt;
&lt;td&gt;1G-2G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-innodb-heavy-4G.cnf&lt;/td&gt;
&lt;td&gt;4GB 使用InnoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;使用&lt;code&gt;SHOW VARIABLES&lt;/code&gt;来查看系统参数,通过&lt;code&gt;SHOW STATUS&lt;/code&gt;来判断系统状态&lt;/p&gt;

&lt;p&gt;show 命令还有很多用途&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;show databases 或show tables from database_name&lt;/td&gt;
&lt;td&gt;显示mysql中所有数据库的名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show tables&lt;/td&gt;
&lt;td&gt;显示当前数据库中所有表的名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show columns from table_name from database_name&lt;/td&gt;
&lt;td&gt;显示表中列名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show grants for user_name&lt;/td&gt;
&lt;td&gt;显示一个用户的权限，显示结果类似于grant命令&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show table status&lt;/td&gt;
&lt;td&gt;显示当前使用或者指定的database中的每个表的信息。&lt;br&gt;信息包括表类型和表的最新更新时间。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show index from table_name&lt;/td&gt;
&lt;td&gt;显示表的索引&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show status&lt;/td&gt;
&lt;td&gt;显示一些系统特定资源的信息,例如,正在运行的线程数量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show variables&lt;/td&gt;
&lt;td&gt;显示系统变量的名称和值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show processlist&lt;/td&gt;
&lt;td&gt;显示系统中正在运行的所有进程，也就是当前正在执行的查询。&lt;br&gt;大多数用户可以查看他们自己的进程，但是如果他们拥有process权限，&lt;br&gt;就可以查看所有人的进程，包括密码&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show engies&lt;/td&gt;
&lt;td&gt;显示安装以后可用的存储引擎和默认引擎&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show innodb status&lt;/td&gt;
&lt;td&gt;显示innoDB存储引擎的状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show logs&lt;/td&gt;
&lt;td&gt;显示BDB存储引擎的日志&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show warnings&lt;/td&gt;
&lt;td&gt;显示最后一个执行的语句所产生的错误、警告和通知&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show errors&lt;/td&gt;
&lt;td&gt;只显示最后一个执行语句所产生的错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;小内存优化:3f024a9bc4eccdf3db769802efc70049&#34;&gt;小内存优化&lt;/h2&gt;

&lt;p&gt;依据&lt;code&gt;my-small.cnf&lt;/code&gt;为模板&lt;/p&gt;

&lt;p&gt;主要指标:存储引擎,key_buffer,table_cache,max_connections,thread_concurrency,query_cache,thread_stack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;存储引擎&lt;/strong&gt;:
如果不使用 BDB table 和 InnoDB table 的话，加入下面2行关闭不需要的表类型很有必要，关闭 innodb 可以省下大量内存，虽然 InnoDB 好处多多但是在一个64MB的 VPS 上并不能体现出来，并且很占内存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;key_buffer&lt;/strong&gt;:
用来缓存 tables keys 和 indexes，增加这个值可以更好的处理索引，读和写都需要索引,这里设置成16K足够了.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;table_cache&lt;/strong&gt;:
所有线程打开的表的数量，增加值可以增大 MySQL 的文件描述符数量，避免频繁的打开表，原始 my-small.cnf 中 table_cache 设置成4有点小，一个 wordpress 的页面通常会涉及到10个左右的表，其他的程序比如 Drupal，MediaWiki 会涉及到更多，将table_cache改为8。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;max_connections&lt;/strong&gt;:
数据库最大的连接数量，可以根据自己博客/网站的访问量来定这个值,如果博客/网站经常出现：Too many connections 错误的信息说明需要增大 max_connections 的值.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;thread_concurrency&lt;/strong&gt;:
最大并发线程数，通常设置为 CPU核数量×2，在 VPS 宿主机上如果服务器有2颗物理 CPU，而每颗物理 CPU 又支持 H.T 超线程（一个处理器上整合了两个逻辑处理器单元），所以实际取值为4 × 2 ＝ 8。
如果我们在优化 php.ini 的时候设置了同时只有2个 php-cgi 运行的话，那么我们也应该只设置2个 MySQL 线程同时运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;query_cache&lt;/strong&gt;:
对于博客/新闻网站来说，用得最多的就是查询，所以需要加入 query cache 的设置。query_cache_size 是执行查询所使用的缓冲大小。
query_cache_limit指定单个查询能够使用的缓冲区大小，缺省为1M,结果集超过这个大小将不会被缓存。&lt;/p&gt;

&lt;p&gt;与查询缓冲有关的参数还有query_cache_type、query_cache_limit、query_cache_min_res_unit。&lt;/p&gt;

&lt;p&gt;query_cache_type指定是否使用查询缓冲，可以设置为0、1、2,分别代表了off、on、demand,如果是0，那么query cache 是关闭的。如果是1，那么查询总是先到查询缓存中查找，除非使用了sql_no_cache。如果是2，那么，只有使用 sql_cache的查询，才会去查询缓存中查找.&lt;/p&gt;

&lt;p&gt;query_cache_limit指定单个查询能够使用的缓冲区大小，缺省为1M。
query_cache_min_res_unit是在4.1版本以后引入的，它指定分配缓冲区空间的最小单位，缺省为4K。
检查状态值Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多，这就表明查询结果都比较小，此时需要减小 query_cache_min_res_unit。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;thread_stack&lt;/strong&gt;:
用来存放每个线程的标识信息，如线程 id，线程运行时环境等，可以通过设置 thread_stack 来决定给每个线程分配多大的内存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sort_buffer_size&lt;/strong&gt;:
每个需要排序的线程分配的缓冲区大小，增加该值可以加速 order by 和 group by 的操作。注意：该参数是以每个连接分配内存，也就是说，如果有16个连接，sort_buffer_size 为 64K，那么实际分配的内存为：16 × 64K = 1MB。如果设置的缓存大小无法满足需要，MySQL 会将数据写入磁盘来完成排序。因为磁盘操作和内存操作不在一个数量级，所以 sort_buffer_size 对排序的性能影响很大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read_buffer_size&lt;/strong&gt;:
顺序读取数据时的缓冲区大小，与 sort_buffer_size 一样，该参数分配的内存也是以每连接为单位的。
当需要顺序读取数据的时候，如无法使用索引的情况下的全表扫描，全索引扫描等。在这种时候，MySQL 按照数据的存储顺序依次读取数据块，每次读取的数据快首先会暂存在 read_buffer_size 中，当 buffer 空间被写满或者全部数据读取结束后，再将 buffer 中的数据返回给上层调用者，以提高效率。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read_rnd_buffer_size&lt;/strong&gt;:
随机读取数据时的缓冲区大小，与顺序读相对应。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;net_buffer_size&lt;/strong&gt;:
用来存放客户端连接线程的连接信息和返回客户端的结果集的缓存大小。当 MySQL 接到请求后，产生返回结果集时，会在返回给请求线程之前暂存在在这个缓存中，等积累到一定大小的时候才开始向客户端发送，以提高网络效率。不 过，net_buffer_size 所设置的仅仅只是初始大小，MySQL 会根据实际需要自行申请更多的内存，但最大不会超过 max_allowed_packet。&lt;/p&gt;

&lt;p&gt;skip-locking用来避免 MySQL 外部锁定，减少出错几率，增强稳定性。&lt;/p&gt;

&lt;p&gt;以上: 64M VPS数据库配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;skip-bdb
skip-innodb

key_buffer = 16K
table_cache = 8

max_connections = 16
thread_concurrency = 2

query_cache_limit = 256K
query_cache_size = 4M
query_cache_type = 1

sort_buffer_size = 64K
read_buffer_size = 256K
read_rnd_buffer_size = 256K
net_buffer_length = 2K
thread_stack = 64K
skip-locking

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;thread_cache_size 优化配置&lt;/p&gt;

&lt;p&gt;当update或者insert的内容过大时,&lt;code&gt;max_allowed_packet&lt;/code&gt;的值过小,会引起sql异常,需要改大
修改&lt;code&gt;my.cnf&lt;/code&gt;  &lt;code&gt;max_allowed_packet = 20M&lt;/code&gt;
或者零时动态设置 &lt;code&gt;set global max_allowed_packet = 20*1024*1024&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看是否生效
&lt;code&gt;show VARIABLES like &#39;%max_allowed_packet%&#39;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1G  ---&amp;gt; 8
2G  ---&amp;gt; 16
3G  ---&amp;gt; 32
4G  ---&amp;gt; 64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数据库优化:3f024a9bc4eccdf3db769802efc70049&#34;&gt;数据库优化&lt;/h2&gt;

&lt;p&gt;查看query_cache相关配置, 默认这个开关是关闭的,就是禁止使用query_cache
query_cache_type 为0,是关闭的&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show variables where variable_name like &#39;%query_cache%&#39;&lt;/code&gt; 单独查询一个使用 &lt;code&gt;select @@query_cache_type&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+------------------------------+----------+
| Variable_name                | Value    |
+------------------------------+----------+
| have_query_cache             | YES      |
| query_cache_limit            | 262144   |
| query_cache_min_res_unit     | 4096     |
| query_cache_size             | 33554432 |
| query_cache_strip_comments   | OFF      |
| query_cache_type             | ON       |
| query_cache_wlock_invalidate | OFF      |
+------------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;query_cache_size&lt;/code&gt;为0,没有分配缓存空间,如果配置了&lt;code&gt;query_cache_size = 4M&lt;/code&gt;,这里会显示具体的字节&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show status like &#39;%Qcache%&#39;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+-------------------------+----------+
| Variable_name           | Value    |
+-------------------------+----------+
| Qcache_free_blocks      | 1        |
| Qcache_free_memory      | 26444248 |
| Qcache_hits             | 159619   |
| Qcache_inserts          | 27496    |
| Qcache_lowmem_prunes    | 0        |
| Qcache_not_cached       | 180      |
| Qcache_queries_in_cache | 6922     |
| Qcache_total_blocks     | 13850    |
+-------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果&lt;code&gt;Qcache_lowmem_prunes&lt;/code&gt;的值非常大，则表明经常出现缓冲不够的情况，如果&lt;code&gt;Qcache_hits&lt;/code&gt;的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；
如果&lt;code&gt;Qcache_hits&lt;/code&gt;的值不大，则表明你的查询重复率很低，这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入&lt;code&gt;SQL_NO_CACHE&lt;/code&gt;可以明确表示不使用查询缓冲。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;查询缓存利用率在80%以上而且Qcache_lowmem_prunes &amp;gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查询缓存命中率 = Qcache_hits / ( Qcache_hits + Qcache_inserts ) * 100%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;命中率越高,效果越好&lt;/p&gt;

&lt;h2 id=&#34;各个数据库引擎对比:3f024a9bc4eccdf3db769802efc70049&#34;&gt;各个数据库引擎对比&lt;/h2&gt;

&lt;p&gt;主要讨论引擎: MyISAM存储引擎 InnoDB存储引擎 Memory存储引擎&lt;/p&gt;

&lt;h3 id=&#34;myisam存储引擎:3f024a9bc4eccdf3db769802efc70049&#34;&gt;MyISAM存储引擎&lt;/h3&gt;

&lt;p&gt;支持B-tree/FullText/R-tree索引类型
锁级别是表锁,表锁的开销小，加锁快;锁粒度大，发生锁冲突的概率较高，并发度低；表锁适合查询
不支持事务性，也不支持外键。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;并发不高，不需要支持事务,需要进行全文搜索,读次数大于写次数,适合数据量不是特别大并发不太高的大部分场合&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;innodb存储引擎:3f024a9bc4eccdf3db769802efc70049&#34;&gt;InnoDB存储引擎&lt;/h3&gt;

&lt;p&gt;支持事务性，支持回滚,支持Hash/B-tree索引类型
锁级别是行锁，行锁在锁定上带来的消耗大于表锁，但是在系统并发访问量较高时，InnoDB整体性能远高于MyISAM。
InnoDB的索引不仅缓存索引本身，也缓存数据，所以InnoDB需要更大的内存。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;表数据量超过千万，高并发,频繁更新大字段,安全性和可用性要求高,更适合与大并发大数据量的场合，除了支持事务，在高并发时行级锁的优势就会发挥出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;memory存储引擎:3f024a9bc4eccdf3db769802efc70049&#34;&gt;Memory存储引擎&lt;/h3&gt;

&lt;p&gt;内存级的存储引擎，它将所有数据都存储在内存中，所以它能够存储的数据量是比较小的
Memory的锁级别和MyISAM一样，是表锁；并且不支持事务性。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;适合与性能要求高数据量小的地方，和缓存的效果类似。&lt;/p&gt;

&lt;p&gt;innodb查询表的行数需要全表扫描，速度会非常慢，查询1千万行数据的表最多时要6、7s,而myisam因为保存了总行数是极快的。
在一个进程操作的情况下，myisam的更新和查询速度都会稍快于innodb。memory引擎插入和查询修改的速度都极快，但支持的数据量有限,不支持BLOB/TEXT数据类型,适用于单表几万行数据.&lt;/p&gt;

&lt;p&gt;MEMORY表最大值受系统变量 max_heap_table_size 限制，默认为16MB，要改变MEMORY表大小限制，需要改变max_heap_table_size 的值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;锁:3f024a9bc4eccdf3db769802efc70049&#34;&gt;锁&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;读锁：读操作时增加锁，叫共享锁，S-lock特征是阻塞其他客户端的写操作，不阻塞读操作&lt;/p&gt;

&lt;p&gt;写锁：写操作时增加锁，叫独占锁或排他锁，X-lock特征是阻塞其他客户端的读、写操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;锁定粒度-范围:3f024a9bc4eccdf3db769802efc70049&#34;&gt;锁定粒度（范围）&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;行级：提升并发性，锁定开销大&lt;/p&gt;

&lt;p&gt;表级：不利于并发性，锁定开销小&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>ffmpeg安装使用</title>
      <link>http://blog.suconghou.cn/post/ffmpeg-usage/</link>
      <pubDate>Mon, 11 Jan 2016 10:19:20 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/ffmpeg-usage/</guid>
      <description>

&lt;h2 id=&#34;安装:fdd7baccd40696c5c3f24a074d3d3604&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;yum install autoconf automake cmake freetype-devel gcc gcc-c++ git libtool make mercurial nasm pkgconfig zlib-devel
mkdir ~/ffmpeg_sources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yasm is an assembler used by x264 and FFmpeg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 git://github.com/yasm/yasm.git
cd yasm
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot;
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;H.264 video encoder.
Requires ffmpeg to be configured with &lt;code&gt;--enable-gpl --enable-libx264&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 git://git.videolan.org/x264
cd x264
PKG_CONFIG_PATH=&amp;quot;$HOME/ffmpeg_build/lib/pkgconfig&amp;quot; ./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot; --enable-static
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;H.265/HEVC video encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-gpl --enable-libx265&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
hg clone https://bitbucket.org/multicoreware/x265
cd ~/ffmpeg_sources/x265/build/linux
cmake -G &amp;quot;Unix Makefiles&amp;quot; -DCMAKE_INSTALL_PREFIX=&amp;quot;$HOME/ffmpeg_build&amp;quot; -DENABLE_SHARED:bool=off ../../source
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AAC audio encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libfdk-aac&lt;/code&gt; (and &lt;code&gt;--enable-nonfree&lt;/code&gt; if you also included &lt;code&gt;--enable-gpl&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 git://git.code.sf.net/p/opencore-amr/fdk-aac
cd fdk-aac
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MP3 audio encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libmp3lame&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
curl -L -O http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
tar xzvf lame-3.99.5.tar.gz
cd lame-3.99.5
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot; --disable-shared --enable-nasm
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opus audio decoder and encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libopus&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone git://git.opus-codec.org/opus.git
cd opus
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ogg bitstream library. Required by libtheora and libvorbis.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
curl -O http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gz
tar xzvf libogg-1.3.2.tar.gz
cd libogg-1.3.2
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vorbis audio encoder. Requires libogg. Requires ffmpeg to be configured with &lt;code&gt;--enable-libvorbis&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
curl -O http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.4.tar.gz
tar xzvf libvorbis-1.3.4.tar.gz
cd libvorbis-1.3.4
LDFLAGS=&amp;quot;-L$HOME/ffmeg_build/lib&amp;quot; CPPFLAGS=&amp;quot;-I$HOME/ffmpeg_build/include&amp;quot; ./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --with-ogg=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VP8/VP9 video encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libvpx&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
cd libvpx
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-examples
make
make install
make clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compilation is now complete and ffmpeg (also ffprobe, ffserver, lame, and x264) should now be ready to use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone https://github.com/FFmpeg/FFmpeg ffmpeg
cd ffmpeg
PKG_CONFIG_PATH=&amp;quot;$HOME/ffmpeg_build/lib/pkgconfig&amp;quot; ./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --extra-cflags=&amp;quot;-I$HOME/ffmpeg_build/include&amp;quot; --extra-ldflags=&amp;quot;-L$HOME/ffmpeg_build/lib&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot; --pkg-config-flags=&amp;quot;--static&amp;quot; --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265
make -j4
make install
make distclean
hash -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的可执行文件存放在&lt;code&gt;~/bin&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;下载官方的静态编译的linux通用二进制包:fdd7baccd40696c5c3f24a074d3d3604&#34;&gt;下载官方的静态编译的Linux通用二进制包&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://johnvansickle.com/ffmpeg/&#34;&gt;ffmeg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.0正式版已发布,&lt;a href=&#34;http://www.oschina.net/news/70742/ffmpeg-3-0-final&#34;&gt;查看详情&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git基本使用</title>
      <link>http://blog.suconghou.cn/post/git-usage/</link>
      <pubDate>Fri, 08 Jan 2016 23:43:00 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/git-usage/</guid>
      <description>

&lt;h1 id=&#34;git配置:4b413fdebfe42d43590394b35a48620b&#34;&gt;git配置&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.email &amp;quot;1126045770@qq.com&amp;quot;
git config --global user.name &amp;quot;sucongohu&amp;quot;

git config --global core.autocrlf false
git config --global color.ui true
git config --global credential.helper store

git config --global alias.lg &amp;quot;log --graph --all --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;以上分别是设置用户信息,禁止转换换行符,颜色高亮,记住密码,设置别名列出分支图. 设置别名后,可以使用 &lt;code&gt;git lg&lt;/code&gt; 查看各个分支关系&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个命令推送到多个服务端&lt;code&gt;vim .git/config&lt;/code&gt; ,添加一个区段,例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[remote &amp;quot;all&amp;quot;]
        url = https://git.oschina.net/suconghou/mvc.git
        url = https://suconghou@git.coding.net/suconghou/mvc.git
        url = https://github.com/suconghou/mvc.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以后可以使用&lt;code&gt;git push all master&lt;/code&gt;一次推送到多个后端&lt;/p&gt;

&lt;h1 id=&#34;git分支管理:4b413fdebfe42d43590394b35a48620b&#34;&gt;git分支管理&lt;/h1&gt;

&lt;h2 id=&#34;1-创建分支:4b413fdebfe42d43590394b35a48620b&#34;&gt;1.创建分支&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;2-切换到分支:4b413fdebfe42d43590394b35a48620b&#34;&gt;2.切换到分支&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git checkout &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;3-创建一个分支并切换过去:4b413fdebfe42d43590394b35a48620b&#34;&gt;3.创建一个分支并切换过去&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git checkout -b &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git checkout -b &amp;lt;分支名&amp;gt; master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后面是跟一个master说明创建的develop分支是基于当前的master， 如果当前就在master分支，则可以不写。 如果当前分支HEAD指向的是别的分支，又想基于master分支创建，就必须写master&lt;/p&gt;

&lt;h2 id=&#34;4-分支合并:4b413fdebfe42d43590394b35a48620b&#34;&gt;4.分支合并&lt;/h2&gt;

&lt;p&gt;如:要将develop分支合并和master分支
首先切换的master分支：&lt;code&gt;git checkout master&lt;/code&gt;
然后执行合并操作：&lt;code&gt;git merge develop&lt;/code&gt;
如果有冲突，会提示你，调用&lt;code&gt;git status&lt;/code&gt;查看冲突文件。
解决冲突，然后调用&lt;code&gt;git add&lt;/code&gt;或&lt;code&gt;git rm&lt;/code&gt;将解决后的文件暂存。
所有冲突解决后，&lt;code&gt;git commit&lt;/code&gt;提交更改。&lt;/p&gt;

&lt;h2 id=&#34;5-删除分支:4b413fdebfe42d43590394b35a48620b&#34;&gt;5.删除分支&lt;/h2&gt;

&lt;p&gt;删除本地分支,删除分支之前记得先合并,以免数据丢失&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch -d &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git push [远程名] [本地分支]:[远程分支]&lt;/code&gt; 本地分支的数据推送到远程分支,如果远程分支不存在,将会自动创建&lt;/p&gt;

&lt;p&gt;如果本地分支为空格,则将删除远程分支 &lt;code&gt;git push origin :deletebranch&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-显示所有分支:4b413fdebfe42d43590394b35a48620b&#34;&gt;6.显示所有分支&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch -a&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;显示远端分支&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch -r&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git push -all&lt;/code&gt; 把所有本地分支都推到远端&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull origin remotebranch:localbranch&lt;/code&gt;
将远程某分支拉倒本地某分支,当本地分支和远程分支名称相同时，只写一个就可以&lt;/p&gt;

&lt;h1 id=&#34;git-tag-管理:4b413fdebfe42d43590394b35a48620b&#34;&gt;git tag 管理&lt;/h1&gt;

&lt;h2 id=&#34;1-git-tag:4b413fdebfe42d43590394b35a48620b&#34;&gt;1.git tag&lt;/h2&gt;

&lt;p&gt;在控制台打印出当前仓库的所有标签&lt;/p&gt;

&lt;h2 id=&#34;2-git-tag-l-v0-1:4b413fdebfe42d43590394b35a48620b&#34;&gt;2.git tag -l &amp;lsquo;v0.1.*&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;搜索符合模式的标签&lt;/p&gt;

&lt;h2 id=&#34;3-git-tag-v0-1-2-light:4b413fdebfe42d43590394b35a48620b&#34;&gt;3.git tag v0.1.2-light&lt;/h2&gt;

&lt;p&gt;创建轻量标签&lt;/p&gt;

&lt;h2 id=&#34;4-git-tag-a-v0-1-2-m-0-1-2版本:4b413fdebfe42d43590394b35a48620b&#34;&gt;4.git tag -a v0.1.2 -m &amp;ldquo;0.1.2版本&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;创建附注标签&lt;/p&gt;

&lt;p&gt;git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。&lt;/p&gt;

&lt;h2 id=&#34;5-git-tag-d-v0-1-2:4b413fdebfe42d43590394b35a48620b&#34;&gt;5.git tag -d v0.1.2&lt;/h2&gt;

&lt;p&gt;删除标签&lt;/p&gt;

&lt;h2 id=&#34;6-git-push-origin-v0-1-2:4b413fdebfe42d43590394b35a48620b&#34;&gt;6.git push origin v0.1.2&lt;/h2&gt;

&lt;p&gt;将v0.1.2标签提交到git服务器
git push origin –-tags
将本地所有标签一次性提交到git服务器
通常的git push不会将标签对象提交到git服务器，所以我们需要进行显式的操作：&lt;/p&gt;

&lt;h1 id=&#34;git-stash-操作:4b413fdebfe42d43590394b35a48620b&#34;&gt;git stash 操作&lt;/h1&gt;

&lt;p&gt;1.git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash
//do some work
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.同样可以使用 git stash save &amp;ldquo;work in progress for foo feature&amp;rdquo; 添加标记&lt;/p&gt;

&lt;p&gt;3.当你多次使用&lt;code&gt;git stash&lt;/code&gt;命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，
&lt;code&gt;git stash list&lt;/code&gt; 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用&lt;code&gt;git stash apply stash@{1}&lt;/code&gt;就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用&lt;code&gt;git stash clear&lt;/code&gt;来将栈清空。&lt;/p&gt;

&lt;h2 id=&#34;svn:4b413fdebfe42d43590394b35a48620b&#34;&gt;svn&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;svn revert xx.html&lt;/code&gt; 和&lt;code&gt;git checkout xx.html&lt;/code&gt; 类似,还原文件的更改&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sublime使用和设置</title>
      <link>http://blog.suconghou.cn/post/sublime-usage/</link>
      <pubDate>Fri, 08 Jan 2016 23:21:12 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/sublime-usage/</guid>
      <description>

&lt;h2 id=&#34;配置文件:9eb5571a36ac869eaff7a87ede81093b&#34;&gt;配置文件&lt;/h2&gt;

&lt;p&gt;最喜欢的字体&lt;code&gt;Monaco&lt;/code&gt;,&lt;a href=&#34;http://share.suconghou.cn/fonts/MONACO.TTF&#34;&gt;此处下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配置文件
&lt;code&gt;Preferences.sublime-settings&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;close_windows_when_empty&amp;quot;: true,
	&amp;quot;default_encoding&amp;quot;: &amp;quot;UTF-8&amp;quot;,
	&amp;quot;default_line_ending&amp;quot;: &amp;quot;unix&amp;quot;,
	&amp;quot;ensure_newline_at_eof_on_save&amp;quot;: true,
	&amp;quot;font_face&amp;quot;: &amp;quot;Monaco&amp;quot;,
	&amp;quot;font_size&amp;quot;: 13,
	&amp;quot;highlight_line&amp;quot;: true,
	&amp;quot;highlight_modified_tabs&amp;quot;: true,
	&amp;quot;ignored_packages&amp;quot;:
	[
		&amp;quot;Vintage&amp;quot;
	],
	&amp;quot;show_encoding&amp;quot;: true,
	&amp;quot;show_line_endings&amp;quot;: true,
	&amp;quot;tab_size&amp;quot;: 4,
	&amp;quot;translate_tabs_to_spaces&amp;quot;: false,
	&amp;quot;trim_trailing_white_space_on_save&amp;quot;: true,
	&amp;quot;update_check&amp;quot;: false,
	&amp;quot;word_wrap&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;插件:9eb5571a36ac869eaff7a87ede81093b&#34;&gt;插件&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;open_browser.py&lt;/code&gt; 插件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sublime, sublime_plugin
import webbrowser
import os

url_map = {
    &#39;D:\\git\\bbs\\&#39; : &#39;http://127.0.0.3/&#39;,
    &#39;D:\\php\\su\\&#39; : &#39;http://127.0.0.2/&#39;,
    &#39;D:\\php\\htdocs\\&#39; : &#39;http://127.0.0.1/&#39;
}

class OpenBrowserCommand(sublime_plugin.TextCommand):
    def run(self,edit):
        window = sublime.active_window()
        window.run_command(&#39;save&#39;)
        url = self.view.file_name()
        flag = False
        for path, domain in url_map.items():
            if url.startswith(path):
                url = url.replace(path, domain).replace(&#39;\\&#39;, &#39;/&#39;)
                flag = True
                break
        if not flag:
            cmd1=&#39;taskkill /f /im php.exe&#39;
            cmd2=&#39;php -S 0.0.0.0:8088 -t &#39;+os.path.abspath(os.path.dirname(self.view.file_name()))
            os.system(cmd1)
            os.popen(cmd2)
            url =  &#39;http://127.0.0.1:8088/&#39;+os.path.basename(self.view.file_name())
        webbrowser.open_new(url)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译系统:9eb5571a36ac869eaff7a87ede81093b&#34;&gt;编译系统&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;node.sublime-build&lt;/code&gt; 执行nodejs代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;shell_cmd&amp;quot;: &amp;quot;node ${file}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;快捷键配置:9eb5571a36ac869eaff7a87ede81093b&#34;&gt;快捷键配置&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Default (OSX).sublime-keymap&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
	{ &amp;quot;keys&amp;quot;: [&amp;quot;alt+d&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;open_dir&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;dir&amp;quot;: &amp;quot;$file_path&amp;quot;, &amp;quot;file&amp;quot;: &amp;quot;$file_name&amp;quot;} },
	{ &amp;quot;keys&amp;quot;: [&amp;quot;ctrl+shift+c&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;copy_path&amp;quot; },
	{ &amp;quot;keys&amp;quot;: [&amp;quot;ctrl+f11&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;toggle_distraction_free&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;添加sublime到命令行:9eb5571a36ac869eaff7a87ede81093b&#34;&gt;添加sublime到命令行&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MacOs&lt;/code&gt;下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;激活码:9eb5571a36ac869eaff7a87ede81093b&#34;&gt;激活码&lt;/h2&gt;

&lt;p&gt;3103可用激活码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;—– BEGIN LICENSE —–
Ryan Clark
Single User License
EA7E-812479
2158A7DE B690A7A3 8EC04710 006A5EEB
34E77CA3 9C82C81F 0DB6371B 79704E6F
93F36655 B031503A 03257CCC 01B20F60
D304FA8D B1B4F0AF 8A76C7BA 0FA94D55
56D46BCE 5237A341 CD837F30 4D60772D
349B1179 A996F826 90CDB73C 24D41245
FD032C30 AD5E7241 4EAA66ED 167D91FB
55896B16 EA125C81 F550AF6B A6820916
—— END LICENSE ——
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3103之前版本可用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----- BEGIN LICENSE -----
Andrew Weber
Single User License
EA7E-855605
813A03DD 5E4AD9E6 6C0EEB94 BC99798F
942194A6 02396E98 E62C9979 4BB979FE
91424C9D A45400BF F6747D88 2FB88078
90F5CC94 1CDC92DC 8457107A F151657B
1D22E383 A997F016 42397640 33F41CFC
E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D
5CDB7036 E56DE1C0 EFCC0840 650CD3A6
B98FC99C 8FAC73EE D2B95564 DF450523
------ END LICENSE ------
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>避免SSH自动断开连接</title>
      <link>http://blog.suconghou.cn/post/prevent-broken-pipe-on-ssh/</link>
      <pubDate>Thu, 07 Jan 2016 13:47:22 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/prevent-broken-pipe-on-ssh/</guid>
      <description>&lt;p&gt;如果有一段时间在SSH连接上无数据传输，连接就会断开,以下设定可以解决这个问题&lt;/p&gt;

&lt;p&gt;方案一：在客户端设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/ssh/ssh_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启 &lt;code&gt;ServerAliveInterval 60&lt;/code&gt;
开启 &lt;code&gt;TCPKeepAlive yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此后该系统里的用户连接SSH时，每60秒会发一个KeepAlive请求，避免被踢。&lt;/p&gt;

&lt;p&gt;方案二：在服务器端设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启&lt;code&gt;ClientAliveInterval 60&lt;/code&gt;
开启 &lt;code&gt;TCPKeepAlive yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果您只想让当前的 ssh 保持连接，可以使用以下的命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -o ServerAliveInterval=60 user@sshserver&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>安装NodeJs和npm</title>
      <link>http://blog.suconghou.cn/post/install-nodejs/</link>
      <pubDate>Thu, 07 Jan 2016 10:29:59 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/install-nodejs/</guid>
      <description>

&lt;h2 id=&#34;安装nodejs:7989e885d8dc487fe6df4b26f2ef5639&#34;&gt;安装NodeJs&lt;/h2&gt;

&lt;p&gt;nodejs官方提供了编译好的二进制的包,全平台都有,十分方便
&lt;a href=&#34;https://nodejs.org/download/release/latest/&#34;&gt;最新版本NodeJs官方库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其他信息&lt;a href=&#34;http://www.oschina.net/news/70955/node-js-5-7-0-stable&#34;&gt;http://www.oschina.net/news/70955/node-js-5-7-0-stable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例如安装Linux版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://nodejs.org/download/release/latest/node-v5.4.0-linux-x64.tar.xz
xz -d node-v5.4.0-linux-x64.tar.xz
tar -vxf node-v5.4.0-linux-x64.tar
sudo mv node-v5.4.0-linux-x64 /usr/local/nodejs
sudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node
sudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm
node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;单文件版node-exe单独安装npm:7989e885d8dc487fe6df4b26f2ef5639&#34;&gt;单文件版node.exe单独安装npm&lt;/h2&gt;

&lt;p&gt;1.clone npm 源码
&lt;code&gt;git clone --recursive git://github.com/isaacs/npm.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.进入npm目录,安装npm
&lt;code&gt;node cli.js install npm -gf&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;一些必备package:7989e885d8dc487fe6df4b26f2ef5639&#34;&gt;一些必备package&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install -g less react-native-cli airs
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>网摘</title>
      <link>http://blog.suconghou.cn/post/some-good-useful-things/</link>
      <pubDate>Wed, 06 Jan 2016 15:58:03 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/some-good-useful-things/</guid>
      <description>

&lt;h2 id=&#34;云计算-存储-分发等:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;云计算,存储,分发等&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://baichuan.taobao.com/&#34;&gt;阿里百川&lt;/a&gt;
&lt;a href=&#34;http://open.taobao.com/&#34;&gt;淘宝开放平台&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;包含容器引擎（TAE）, 多媒体存储处理分发, 可免费使用一年&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://c.163.com/&#34;&gt;网易的Docker服务&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最近上线,价格略贵最低29/月&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://bmob.cn/&#34;&gt;bmob&lt;/a&gt;移动后端云,网友示例项目&lt;a href=&#34;https://github.com/bestony/BandwaghonhostAPP&#34;&gt;BandwaghonhostAPP&lt;/a&gt;,结合&lt;a href=&#34;http://dev.dcloud.net.cn/mui/&#34;&gt;mui移动开发框架&lt;/a&gt;开发手机APP&lt;/p&gt;

&lt;h2 id=&#34;短信-推动消息等:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;短信,推动消息等&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alidayu.com/&#34;&gt;阿里大鱼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;阿里巴巴旗下的短信验证码通知服务,价格实惠,短信通知≤0.045元／条,还有文本转语音通知≤0.055元／条&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;图像压缩软件:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;图像压缩软件&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://imageoptim.com/&#34;&gt;ImageOptim无损压缩&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mozjpeg.codelove.de/&#34;&gt;mozjpeg&lt;/a&gt; Mozilla的jpg压缩技术,支持无损,有损压缩在线压缩,最大2M.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tinypng.com/&#34;&gt;tinypng&lt;/a&gt; 众多压缩软件中压缩效果较好的,支持png,jpg在线批量压缩&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kraken.io&#34;&gt;kraken&lt;/a&gt; 类似于tinypng,也提供在线压缩&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pngquant.org/&#34;&gt;pngquant&lt;/a&gt; 开源的压缩png,据说tinypng基于此项目&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/imagemin&#34;&gt;nodejs imagemin&lt;/a&gt; NodeJs模块,压缩jpg,png,压缩效果一般&lt;/p&gt;

&lt;h2 id=&#34;移动混合应用-hhtml5开发:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;移动混合应用/HHTML5开发&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.dcloud.net.cn/mui/&#34;&gt;国产mui&lt;/a&gt; 最接近原生APP体验的高性能前端框架,不依赖任何第三方JS库,压缩后的JS和CSS文件仅有100+K和60+K&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://m.sui.taobao.org/&#34;&gt;SUI Mobile&lt;/a&gt; 淘宝移动UI框架,轻量，小巧且精美的UI库 方便迅速搭建手机H5应用,兼容iOS 6.0+ 和 Android 4.0+，非常适合开发跨平台Web App。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mobiscroll.com/&#34;&gt;mobiscroll&lt;/a&gt; 移动开发UI,丰富的时间选择器控件还有一些WEBAPP展示,&lt;a href=&#34;https://github.com/acidb/mobiscroll&#34;&gt;https://github.com/acidb/mobiscroll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;桌面开发:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;桌面开发&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://nwjs.io/&#34;&gt;nwjs&lt;/a&gt; Mac版钉钉使用的就是这个技术,界面还算漂亮&lt;/p&gt;

&lt;h2 id=&#34;网页动画:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;网页动画&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ecomfe.github.io/zrender/index.html&#34;&gt;百度zrender&lt;/a&gt; 基于Canvas的图形仓库交互工具,可以方便的画出很多图形&lt;/p&gt;

&lt;h2 id=&#34;游戏引擎:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;游戏引擎&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://hiloteam.github.io/&#34;&gt;阿里Hilo&lt;/a&gt; 游戏渲染引擎,实现2048,切水果等.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.egret.com/&#34;&gt;http://www.egret.com/&lt;/a&gt; 白鹭也是做这个的&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/iioinc/iio.js&#34;&gt;https://github.com/iioinc/iio.js&lt;/a&gt; 也是canvas的游戏&lt;/p&gt;

&lt;h2 id=&#34;网页富文本编辑器:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;网页富文本编辑器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wangeditor.github.io/&#34;&gt;wangeditor&lt;/a&gt; 轻量简介的富文本编辑器,使用容易,相比百度umeditor更简洁&lt;/p&gt;

&lt;h2 id=&#34;网页markdown编辑器:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;网页Markdown编辑器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pandao/editor.md&#34;&gt;Editor.md&lt;/a&gt; 一款开源的、可嵌入的 Markdown 在线编辑器（组件），基于 CodeMirror、jQuery 和 Marked 构建。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tylingsoft/markdown-plus&#34;&gt;markdown-plus&lt;/a&gt; Markdown Plus,界面不是很漂亮,也有收费的桌面APP&lt;/p&gt;

&lt;h2 id=&#34;字体相关:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;字体相关&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youziku.com/&#34;&gt;有字库中文字体&lt;/a&gt; 在线字体,CDN引用&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://font-spider.org/&#34;&gt;字蛛&lt;/a&gt; 中文字体压缩器,让网页自由引入中文字体成为可能&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.iconfont.cn/&#34;&gt;阿里iconfont&lt;/a&gt; 阿里巴巴的网页矢量图标在线生成工具,中文字体和矢量图标&lt;/p&gt;

&lt;h2 id=&#34;镜像网站-cdn:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;镜像网站/CDN&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://npm.taobao.org/&#34;&gt;淘宝NPM镜像&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://css.net/&#34;&gt;常用前端公共库css.net&lt;/a&gt; 包括Gravatar,Google 字体库等反代,支持https&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bootcdn.cn/&#34;&gt;bootcdn&lt;/a&gt; 支持https&lt;/p&gt;

&lt;h2 id=&#34;云端ide:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;云端IDE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://coderpad.io/&#34;&gt;coderpad&lt;/a&gt; 在线运行多种语言代码,保存分享,不过是收费的,我创建的&lt;a href=&#34;https://coderpad.io/GP2KRHQQ&#34;&gt;演示&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;视频解析:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;视频解析&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://keepvid.com/&#34;&gt;keepvid&lt;/a&gt; 支持多种国外视频网站解析,转码&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.clipconverter.cc/&#34;&gt;clipconverter&lt;/a&gt; 支持youtube视频解析,转码,多分辨率,速度又快.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube-dl.org/&#34;&gt;youtube-dl&lt;/a&gt; 全平台的YouTube视频下载工具&lt;/p&gt;

&lt;h2 id=&#34;图床:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;图床&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sm.ms/&#34;&gt;smms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://get-link.xyz/&#34;&gt;get-link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;前端-node:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;前端/Node&lt;/h2&gt;

&lt;p&gt;Ajax库&lt;a href=&#34;https://github.com/visionmedia/superagent&#34;&gt;superagent&lt;/a&gt; 同时兼容IE9+和NodeJs的Ajax小工具,Gzip后仅为4.4kb&lt;/p&gt;

&lt;p&gt;轮播图插件&lt;a href=&#34;http://slidesjs.com/&#34;&gt;slidesjs&lt;/a&gt; 纯js的jQuery轮播图插件,简单易用响应式支持触摸,压缩后大小仅12kb,Gzip后3.3kb,但是单张图片存在bug,很久没有更新&lt;/p&gt;

&lt;p&gt;模板引擎&lt;a href=&#34;http://aui.github.io/artTemplate/&#34;&gt;artTemplate&lt;/a&gt; 性能卓越的Js模板引擎,同时有NodeJs版本,压缩后5kb大小,Gzip后2.9kb&lt;/p&gt;

&lt;p&gt;url解析工具&lt;a href=&#34;https://github.com/websanova/js-url&#34;&gt;js-url&lt;/a&gt; 解析url的query_string hostname protocol 等等,~1.7 Kb minified, ~0.7Kb gzipped&lt;/p&gt;

&lt;p&gt;获取你的内网IP和外网IP&lt;a href=&#34;https://github.com/diafygi/webrtc-ips&#34;&gt;webrtc-ips&lt;/a&gt; 通过Webrtc技术连接stun服务器,取得IP&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/amsul/pickadate.js&#34;&gt;https://github.com/amsul/pickadate.js&lt;/a&gt;
&lt;a href=&#34;https://github.com/xdan/datetimepicker&#34;&gt;https://github.com/xdan/datetimepicker&lt;/a&gt;
&lt;a href=&#34;https://github.com/rmm5t/jquery-timeago&#34;&gt;https://github.com/rmm5t/jquery-timeago&lt;/a&gt;
&lt;a href=&#34;http://c3js.org/&#34;&gt;http://c3js.org/&lt;/a&gt;
&lt;a href=&#34;https://github.com/datejs/Datejs/blob/master/build/date.js&#34;&gt;https://github.com/datejs/Datejs/blob/master/build/date.js&lt;/a&gt;
&lt;a href=&#34;https://github.com/Teamweek/instadate&#34;&gt;https://github.com/Teamweek/instadate&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;测试工具:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;测试工具&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.alibench.com/&#34;&gt;阿里测&lt;/a&gt; 测试你的服务器在全国各地的响应速度
&lt;a href=&#34;http://www.cloudping.info/&#34;&gt;cloudping&lt;/a&gt; 测试亚马逊云各节点到你电脑的延时&lt;/p&gt;

&lt;h2 id=&#34;代码转换:49483a20fa0a8bb8347c64e9ee523801&#34;&gt;代码转换&lt;/h2&gt;

&lt;p&gt;将python代码转化为可执行文件&lt;a href=&#34;http://nuitka.net/pages/download.html&#34;&gt;nuitka&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacOs上Chrome中的submit按钮默认样式问题</title>
      <link>http://blog.suconghou.cn/post/mac-chrome-input-submit/</link>
      <pubDate>Tue, 05 Jan 2016 16:44:47 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/mac-chrome-input-submit/</guid>
      <description>&lt;p&gt;发现MacOs的Chrome中,input为submit的按钮,添加其他样式不生效,任然是默认样式,
解决方法是为其添加一个border或者backgroud就好了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开启docker之旅</title>
      <link>http://blog.suconghou.cn/post/using-docker/</link>
      <pubDate>Tue, 05 Jan 2016 10:28:49 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/using-docker/</guid>
      <description>

&lt;h2 id=&#34;安装docker:6d93a80e55dc760775379b4fadc005db&#34;&gt;安装Docker&lt;/h2&gt;

&lt;p&gt;docker 安装需要Linux内核在3.10.0以上,仅支持Linux,在Windows和MacOs上也是基于虚拟机方式运行,需要提前安装虚拟机
默认的Ubuntu 14.04不能运行,内核版本太低.&lt;/p&gt;

&lt;p&gt;下面给出Linux各个发行版的默认内核版本&lt;/p&gt;

&lt;p&gt;查看系统内核版本&lt;code&gt;uname -r&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看安装的系统版本
&lt;code&gt;lsb_release -a&lt;/code&gt; 或者 &lt;code&gt;cat /etc/issue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以下二种方法适用于RedHat,CentOS
1.&lt;code&gt;cat /etc/redhat-release&lt;/code&gt; 或者 &lt;code&gt;cat /etc/centos-release&lt;/code&gt;
2. &lt;code&gt;rpm -q centos-release&lt;/code&gt; 或者 &lt;code&gt;rpm -q redhat-release&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看是否是64位系统&lt;code&gt;uname -i&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;CentOS 系列&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;内核版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CentOS release 5 (Final)&lt;/td&gt;
&lt;td&gt;2.6.18-53.e15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS release 5.5 (Final)&lt;/td&gt;
&lt;td&gt;2.6.18-194.el5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS release 5.7 (Final)&lt;/td&gt;
&lt;td&gt;2.6.18-274.el5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS 6.0&lt;/td&gt;
&lt;td&gt;2.6.32-71.el6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS 6.2&lt;/td&gt;
&lt;td&gt;2.6.32-220.e16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS 6.3&lt;/td&gt;
&lt;td&gt;2.6.32-279.e16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS 6.4&lt;/td&gt;
&lt;td&gt;2.6.32-358.el6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS Linux release 7.1.1503 (Core)&lt;/td&gt;
&lt;td&gt;3.10.0-229.14.1.el7.x86_64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CentOS和RHEL(RedHat Enterprise Linux)同版本内核一样&lt;/p&gt;

&lt;p&gt;Ubuntu 系列&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;内核版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ubuntu13.04&lt;/td&gt;
&lt;td&gt;3.8.0-19-generic&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ubuntu14.04&lt;/td&gt;
&lt;td&gt;3.13.0-24-generic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Debian 系列&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系统版本&lt;/th&gt;
&lt;th&gt;内核版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Debian5.0.7&lt;/td&gt;
&lt;td&gt;2.6.26-2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Debian6.0.5&lt;/td&gt;
&lt;td&gt;2.6.32-5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Debian7&lt;/td&gt;
&lt;td&gt;3.2.0-4-686-pae&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;下载安装&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oschina.net/news/70957/docker-1-10-2-final&#34;&gt;各平台下载地址&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://get.docker.com/builds/Linux/x86_64/docker-1.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本使用:6d93a80e55dc760775379b4fadc005db&#34;&gt;基本使用&lt;/h2&gt;

&lt;p&gt;docker采用Go语言编写,编译以后生成一个无依赖的可执行文件,安装完整以后,可以移动到&lt;code&gt;/usr/bin&lt;/code&gt;,即可使用&lt;code&gt;docker&lt;/code&gt;和&lt;code&gt;sudo docker&lt;/code&gt;命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv docker-1.10.2 /usr/bin/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行&lt;code&gt;docker -v&lt;/code&gt;即可查看当前docker版本
docker 分为两部分,一分部是docker server , 一部分是docker client
在Linux下是一个可执行文件,在Windows上则是分开的.&lt;/p&gt;

&lt;p&gt;搜索 &lt;code&gt;docker search 镜像名字&lt;/code&gt;
下载 &lt;code&gt;docker pull learn/tutorial&lt;/code&gt;, 下载时要写完整名字&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/explore/&#34;&gt;官方Docker镜像一览&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载官方ubuntu &lt;code&gt;docker pull ubuntu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行此ubuntu &lt;code&gt;docker run ubuntu echo &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行完以后docker容器就退出了.&lt;/p&gt;

&lt;p&gt;进入此ubuntu的shell
&lt;code&gt;docker run -i -t ubuntu /bin/bash&lt;/code&gt; 也可以写为 &lt;code&gt;docker run -it ubuntu /bin/bash&lt;/code&gt;
期间如果有需要退出按 &lt;code&gt;Ctrl+P+Q&lt;/code&gt;
&lt;code&gt;docker ps&lt;/code&gt; 查看正在运行的docker容器,可以看到后台的docker
重新进入容器需要&lt;code&gt;docker attach CONTAINER&lt;/code&gt; 此命令代表&lt;code&gt;Attach to a running container&lt;/code&gt;
CONTAINER,可以是最前面的CONTAINER ID ,也可以是最后面的NAMES&lt;/p&gt;

&lt;p&gt;你还可以使用 &lt;code&gt;docker run -it --name myname ubuntu /bin/bash&lt;/code&gt; 来指定它使用的名字,否则名字的随机的&lt;/p&gt;

&lt;p&gt;你可以用不同的名字同时运行多个此种镜像&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;docker rename hello hello2&lt;/code&gt; 将原先名字为hello的容器改名为hello2
使用 &lt;code&gt;docker top hello2&lt;/code&gt; 查看运行在hello2中的所有进程
使用 &lt;code&gt;docker pause hello2&lt;/code&gt; 将docker hello2 中的所有进程暂停,使用&lt;code&gt;docker ps&lt;/code&gt; 可以看到容器已经暂停了
使用 &lt;code&gt;docker unpass hello2&lt;/code&gt; 恢复暂停的容器
使用 &lt;code&gt;docker stop hello2&lt;/code&gt; 将名字为hello2的容器停止
使用 &lt;code&gt;docker ps -a&lt;/code&gt; 查看所有的容器,将会看到很多容器,因为每次执行&lt;code&gt;docker run&lt;/code&gt;命令都是&lt;code&gt;Run a command in a new container&lt;/code&gt;新建了一个容器,
可以考虑使用 &lt;code&gt;docker start 容器名称&lt;/code&gt; 然后再&lt;code&gt;docker attach&lt;/code&gt; 进去,你上次的改动依然在那.
也可以考虑使用&lt;code&gt;docker rm 容器名称&lt;/code&gt; 删除容器以节约资源,rm后可用空格分隔多个容器名称,此命令执行较慢
也可以在创建的时候指明结束运行时清除docker容器&lt;code&gt;docker run --rm ubuntu echo &amp;quot;hello&amp;quot;&lt;/code&gt;
或者将要执行的命令附加到正在运行的容器上&lt;code&gt;docker exec hello2  echo &amp;quot;hihi&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;技巧:&lt;/p&gt;

&lt;p&gt;删除所有停止运行的容器 &lt;code&gt;docker rm $(docker ps -a -q)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;文件系统:6d93a80e55dc760775379b4fadc005db&#34;&gt;文件系统&lt;/h2&gt;

&lt;h3 id=&#34;把一个宿主机上的目录挂载到镜像里:6d93a80e55dc760775379b4fadc005db&#34;&gt;把一个宿主机上的目录挂载到镜像里&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker run -it --name tmp -v /data/tmp:/home ubuntu /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;宿主目录不存在会自动创建,但是镜像内挂载路径必须存在,挂载后双向可写,实时生效
此镜像将一直保持挂载,stop,exit后重新进入,依然是挂载状态&lt;/p&gt;

&lt;p&gt;默认挂载的路径权限为读写。如果指定为只读可以用：ro
&lt;code&gt;docker run -it --name tmp -v /data/tmp:/home:ro ubuntu /bin/bash&lt;/code&gt;
挂载后,镜像内对挂载的数据不可写&lt;/p&gt;

&lt;p&gt;docker还提供了一种高级的用法,叫数据卷。
数据卷：“其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的”。感觉像是由一个容器定义的一个数据挂载信息。其他的容器启动可以直接挂载数据卷容器中定义的挂载信息。&lt;/p&gt;

&lt;p&gt;创建一个普通容器,定义一个名称,挂载目录.
数据容器是不需要运行的。
&lt;code&gt;docker run -v /data/tmp:/home  --name datafs busybox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其他容器使用这个数据卷
&lt;code&gt;docker run -it --name tmp --volumes-from datafs ubuntu /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;docker的container是无状态的， 也就是说标记状态的数据，例如：数据库数据， 应用程序的log 等等， 是不应该放到container里的， 而是放到 Data Volume Container里&lt;/p&gt;

&lt;h2 id=&#34;网络系统:6d93a80e55dc760775379b4fadc005db&#34;&gt;网络系统&lt;/h2&gt;

&lt;p&gt;-p 映射端口
-p 80:8080 容器内部的8080端口,对外暴漏于80端口
-p 22 内外都是22端口映射&lt;/p&gt;

&lt;h2 id=&#34;资源控制:6d93a80e55dc760775379b4fadc005db&#34;&gt;资源控制&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker export&lt;/code&gt; &lt;code&gt;docker import&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker save&lt;/code&gt;  &lt;code&gt;docker load&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;导出后再导入(exported-imported)的镜像会丢失所有的历史，而保存后再加载（saveed-loaded）的镜像没有丢失历史和层(layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用保存后再加载的方式持久化整个镜像，就可以做到层回滚（可以执行docker tag &lt;LAYER ID&gt; &lt;IMAGE NAME&gt;来回滚之前的层）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;
显示本机上存在的资源,大部分是&lt;code&gt;docker pull&lt;/code&gt;下来的,
可以使用 &lt;code&gt;docker rmi&lt;/code&gt;
此资源信息以JSON格式记录于文件,
&lt;code&gt;cat /var/lib/docker/repositories-devicemapper | python -mjson.tool&lt;/code&gt; 此命令将得出类似的结果&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -lh /var/lib/docker/graph/&lt;/code&gt; 发现有文件夹名和上述镜像ID一致的,文件夹内保存着:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;json -保存着关于这个镜像的元数据
layersize – 一个整数，表示layer的大小。
layer/ – 子文件夹，保存着rootfs该容器的镜像&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;使用流程:6d93a80e55dc760775379b4fadc005db&#34;&gt;使用流程&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Linux下常用的下载利器</title>
      <link>http://blog.suconghou.cn/post/linux-download-tools/</link>
      <pubDate>Fri, 01 Jan 2016 23:54:20 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux-download-tools/</guid>
      <description>

&lt;h2 id=&#34;wget:d42214d24013398e63cb86bbdfbd2d55&#34;&gt;wget&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;wget -c -O filename &amp;quot;http://xx.com&amp;quot;&lt;/code&gt; 下载存储到指定文件,并指定断点续传
&lt;code&gt;wget -nc -c -i url.txt&lt;/code&gt; 批量下载文件中指定的资源(每行一个连接),跳过已下载的(同名的),并且断点续传.&lt;/p&gt;

&lt;h2 id=&#34;curl:d42214d24013398e63cb86bbdfbd2d55&#34;&gt;curl&lt;/h2&gt;

&lt;p&gt;常用的命令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl http://xx.com&lt;/code&gt; 只获取http消息正文&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -I http://xx.com&lt;/code&gt; 只获取http消息头&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -i http://xx.com&lt;/code&gt; 获取http消息头和正文&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -d &amp;quot;name=abc&amp;amp;pass=123&amp;quot; http://xx.com&lt;/code&gt; 发送&lt;code&gt;http post&lt;/code&gt;请求,采用的是&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;形式&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -F &amp;quot;name=abc&amp;quot; -F &amp;quot;pass=123&amp;quot; http://xx.com&lt;/code&gt; 发送&lt;code&gt;http post&lt;/code&gt;请求,采用的是&lt;code&gt;multipart/form-data&lt;/code&gt; 形式,此两种方式都可以由 $_POST 接收&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -F &amp;quot;name=abc&amp;quot; -F &amp;quot;file=@/tmp/1.jpg&amp;quot; http://xx.com&lt;/code&gt; 发送 &lt;code&gt;http post&lt;/code&gt;请求, &lt;code&gt;multipart/form-data&lt;/code&gt; 形式还可以上传文件,只需改为@加路径&lt;/p&gt;

&lt;p&gt;curl 不仅能用来下载,还是网络调试的利器,Chrome的网络请求也可以直接另存为curl请求格式&lt;/p&gt;

&lt;p&gt;批量下载规则的URL资源&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O &amp;quot;http://www.example.com/[0001-9999].jpg&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在shell中可以这样用,实现同样功能&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in {10001..19999}; do
wget www.example.com/${i:1}.jpg;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in {0001..9999}; do
echo www.example.com/${i}.jpg;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;axel:d42214d24013398e63cb86bbdfbd2d55&#34;&gt;Axel&lt;/h2&gt;

&lt;p&gt;下载速度最快,分段下载速度优异
&lt;code&gt;axel -n 30 -a -o localfilename http://xx.com/downloadfile&lt;/code&gt; 30个线程分段下载,存储为localfilename
参数&lt;code&gt;-a&lt;/code&gt;更新进度条而不是每次都输出
参数&lt;code&gt;-H&lt;/code&gt; 添加header,参数&lt;code&gt;-U&lt;/code&gt;设定&lt;code&gt;user-agent&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;aria2c:d42214d24013398e63cb86bbdfbd2d55&#34;&gt;Aria2c&lt;/h2&gt;

&lt;p&gt;aria2c支持多种协议,&lt;code&gt;URI&lt;/code&gt; &lt;code&gt;MAGNET&lt;/code&gt; &lt;code&gt;TORRENT_FILE&lt;/code&gt; &lt;code&gt;METALINK_FILE&lt;/code&gt;,也支持axel类似的分段下载&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aria2c -s 30 -c -o localfilename http://xx.com/downloadfile&lt;/code&gt; 30个线程分段下载,存储为localfilename,并断点续传&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>