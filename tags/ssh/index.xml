<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>苏苏的博客</title>
    <link>http://blog.suconghou.cn/tags/ssh/index.xml</link>
    <description>Recent content on 苏苏的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.suconghou.cn/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SSH</title>
      <link>http://blog.suconghou.cn/post/linux-ssh/</link>
      <pubDate>Thu, 07 Jan 2016 13:47:22 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux-ssh/</guid>
      <description>

&lt;h2 id=&#34;避免ssh自动断开连接&#34;&gt;避免SSH自动断开连接&lt;/h2&gt;

&lt;p&gt;如果有一段时间在SSH连接上无数据传输，连接就会断开,以下设定可以解决这个问题&lt;/p&gt;

&lt;p&gt;方案一：在客户端设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/ssh/ssh_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启 &lt;code&gt;ServerAliveInterval 60&lt;/code&gt;
开启 &lt;code&gt;TCPKeepAlive yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此后该系统里的用户连接SSH时，每60秒会发一个KeepAlive请求，避免被踢。&lt;/p&gt;

&lt;p&gt;方案二：在服务器端设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启&lt;code&gt;ClientAliveInterval 60&lt;/code&gt;
开启 &lt;code&gt;TCPKeepAlive yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果您只想让当前的 ssh 保持连接，可以使用以下的命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -o ServerAliveInterval=60 user@sshserver&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;ssh隧道&#34;&gt;ssh隧道&lt;/h2&gt;

&lt;h3 id=&#34;cfng参数&#34;&gt;CfNg参数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C表示压缩数据传输&lt;/li&gt;
&lt;li&gt;f表示后台用户验证,这个选项很有用,没有shell的不可登陆账号也能使用.&lt;/li&gt;
&lt;li&gt;N表示不执行脚本或命令&lt;/li&gt;
&lt;li&gt;g表示允许远程主机连接转发端口,往往会没有效果,需要修改&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;添加&lt;code&gt;gatewayports yes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;l本地转发&#34;&gt;-L本地转发&lt;/h3&gt;

&lt;p&gt;-L [本地监听IP:]本地监听端口号:目标主机IP:目标端口号
(其中,“本地监听IP”可以省略，省略的话就认为是“0.0.0.0”，但为了安全性考虑，请务必使用“127.0.0.1”做为本地监听端口， 而不要使用默认的“0.0.0.0”。）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -D 8080 user@host&lt;/code&gt;
SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -L 2121:host2:21 host3&lt;/code&gt;
命令中的L参数一共接受三个值，分别是&amp;rdquo;本地端口:目标主机:目标主机端口&amp;rdquo;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。
这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -CfNg -L 6300:127.0.0.1:1521 oracle@172.16.1.164
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本机的6300端口就是远程主机172.16.1.164的1521端口&lt;/p&gt;

&lt;h3 id=&#34;r远程转发&#34;&gt;-R远程转发&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; ssh -CfNg -R 1521:127.0.0.1:6300 oracle@172.16.1.164
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在远程主机172.16.1.164上打开1521端口, 来映射本机的6300端口.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在树莓派上映射ssh到外网&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -CfNg -R 2222:127.0.0.1:22 username@yourvps.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就映射vps的2222端口到树莓派上了.但是这样映射的是服务器的127.0.0.1:2222,外网无法连接这个2222端口&lt;/p&gt;

&lt;p&gt;如果你自己的服务器连接时需要端口可以在最后加上 &lt;code&gt;-p port&lt;/code&gt; 指定ssh的端口&lt;/p&gt;

&lt;p&gt;可以在服务器上执行&lt;code&gt;netstat -anltp&lt;/code&gt;查看,这样要先登陆到自己的vps才能通过2222访问树莓派.&lt;/p&gt;

&lt;p&gt;可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -CfNg -R 0.0.0.0:2222:127.0.0.1:22 username@yourvps.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再在服务器上配置&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#增加下面一句
GatewayPorts yes
#如果有
GatewayPorts no
#则改为
GatewayPorts yes
#然后重启ssh
#centos7： systemctl restart sshd
#centos6： service sshd restart
#ubuntu:   service ssh restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;netstat -anltp&lt;/code&gt;查看,监听的已经是&lt;code&gt;0.0.0.0&lt;/code&gt;了,不过即使你指定-R参数&lt;code&gt;127.0.0.1:2222&lt;/code&gt;,也不会监听&lt;code&gt;127.0.0.1&lt;/code&gt;而始终是&lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;若没有&lt;code&gt;netstat&lt;/code&gt;可考虑安装&lt;code&gt;yum install lsof net-tools&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用socks5代理&#34;&gt;使用socks5代理&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;alias socksproxy=&amp;quot;ssh -NT -f -D 0.0.0.0:1090  -p 1234 root@host&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-N 不打开远程的shell
-T 不分配tty
-f 后台运行&lt;/p&gt;

&lt;p&gt;执行&lt;code&gt;socksproxy&lt;/code&gt;后就建立了一条ssh socks5 proxy,本地使用127.0.0.1:1090就可以使用服务器中转流量.&lt;/p&gt;

&lt;h3 id=&#34;ssh-服务&#34;&gt;ssh 服务&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;chkconfig --list&lt;/code&gt;可以查看所有服务是否开机启动等.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chkconfig --list sshd&lt;/code&gt;可以单独查看sshd服务的启动状态&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/var/empty/sshd&lt;/code&gt;文件夹是sshd所必须的,不能被删除否则ssh服务将无法启动&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chkconfig sshd on&lt;/code&gt;将其设置为开机启动&lt;/p&gt;

&lt;p&gt;CentOS7 用&lt;code&gt;systemctl&lt;/code&gt;取代了&lt;code&gt;service&lt;/code&gt;
旧版本的 &lt;code&gt;chkconfig docker on&lt;/code&gt; 改为 &lt;code&gt;systemctl enable docker&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;编译openssh&#34;&gt;编译openssh&lt;/h3&gt;

&lt;p&gt;在alpine中编译openssh,镜像地址 &lt;a href=&#34;http://ftp.jaist.ac.jp/pub/OpenBSD/OpenSSH/portable/&#34;&gt;http://ftp.jaist.ac.jp/pub/OpenBSD/OpenSSH/portable/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编译完成后得到一些工具,如&lt;code&gt;scp&lt;/code&gt;,&lt;code&gt;sftp-server&lt;/code&gt;,&lt;code&gt;ssh&lt;/code&gt;,&lt;code&gt;sshd&lt;/code&gt;等等&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apk update &amp;amp;&amp;amp; apk upgrade
apk --update add make gcc g++ zlib-dev openssl-dev
cd /tmp
OPENSSH_VERSION=openssh-7.3p1
CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l`
curl http://ftp.jaist.ac.jp/pub/OpenBSD/OpenSSH/portable/${OPENSSH_VERSION}.tar.gz | tar xz
cd ${OPENSSH_VERSION}
export CFLAGS=&amp;quot;-O3&amp;quot;
./configure
make -j$CPU_NUM &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我编译好的二进制文件,能直接用于alpine系统&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://share.suconghou.cn/bin/ssh.xz&#34;&gt;ssh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://share.suconghou.cn/bin/sshd.xz&#34;&gt;sshd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编译出来的这些工具的合集&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://share.suconghou.cn/bin/sshbin.tar.gz&#34;&gt;sshbin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://share.suconghou.cn/bin/sshtool.tar.gz&#34;&gt;sshtool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配合Linux&lt;code&gt;adduser&lt;/code&gt;,可以ssh到docker中&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -o /usr/local/bin/sshd.xz http://share.suconghou.cn/bin/sshd.xz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;sshd运行不能直接执行sshd,需要执行&lt;code&gt;/usr/local/bin/sshd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;配置文件为&lt;code&gt;/usr/local/etc/sshd_config&lt;/code&gt;,同时还需要几个密匙文件.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -o /usr/local/bin/sshd.xz http://share.suconghou.cn/bin/sshd.xz
xz -d /usr/local/bin/sshd.xz
chmod +x /usr/local/bin/sshd
mkdir -p /usr/local/etc/
touch /usr/local/etc/sshd_config
ssh-keygen -t dsa -f /usr/local/etc/ssh_host_dsa_key -N &#39;&#39;
ssh-keygen -t rsa -f /usr/local/etc/ssh_host_rsa_key -N &#39;&#39;
ssh-keygen -t ecdsa -f /usr/local/etc/ssh_host_ecdsa_key -N &#39;&#39;
ssh-keygen -t ed25519 -f /usr/local/etc/ssh_host_ed25519_key -N &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加一个用户:&lt;code&gt;adduser work&lt;/code&gt; ,Alpine里是&lt;code&gt;adduser&lt;/code&gt;,Linux发行版里是&lt;code&gt;useradd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;cat /etc/passwd 可以查看所有用户的列表,只输出用户名可以&lt;code&gt;cat /etc/passwd |cut -f 1 -d :&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;看第三个参数:500以上的,就是后面建的用户了.其它则为系统的用户.&lt;/p&gt;

&lt;p&gt;cat /etc/group 查看用户组&lt;/p&gt;

&lt;p&gt;非交互式修改密码可以使用 chpasswd &lt;code&gt;echo &amp;quot;1234&amp;quot; | chpasswd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;w 可以查看当前活跃的用户列表&lt;/p&gt;

&lt;p&gt;删除用户&lt;code&gt;userdel&lt;/code&gt; , 用户&lt;code&gt;userdel -r 用户名&lt;/code&gt;,删除用户账户及用户主目录文件&lt;/p&gt;

&lt;p&gt;没有外网IP还可以使用ssh建立一个隧道&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -CfNg -R 0.0.0.0:2233:127.0.0.1:22 root@yourvps.com -p 27558

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;centos7修改ssh端口&#34;&gt;CentOS7修改ssh端口&lt;/h3&gt;

&lt;p&gt;注意:修改ssh端口后,可能还是不能使用,主要原因可能是semanage&lt;/p&gt;

&lt;p&gt;使用以下命令查看当前SElinux 允许的ssh端口：
semanage port -l | grep ssh&lt;/p&gt;

&lt;p&gt;添加xxxx端口到 SELinux
semanage port -a -t ssh_port_t -p tcp xxxx
然后确认一下是否添加进去
semanage port -l | grep ssh
如果成功会输出
ssh_port_t        tcp    xxxx, 22&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>