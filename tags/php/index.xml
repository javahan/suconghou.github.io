<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on 我的博客</title>
    <link>http://blog.suconghou.cn/tags/php/</link>
    <description>Recent content in Php on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2016 23:51:02 +0800</lastBuildDate>
    <atom:link href="http://blog.suconghou.cn/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>安装PHP7和NGINX</title>
      <link>http://blog.suconghou.cn/post/install-nginx-php-mysql-redis/</link>
      <pubDate>Fri, 01 Jan 2016 23:51:02 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/install-nginx-php-mysql-redis/</guid>
      <description>

&lt;h2 id=&#34;编译安装nginx:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;编译安装NGINX&lt;/h2&gt;

&lt;p&gt;首先安装一些依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y install gcc make autoconf automake install zlib zlib-devel openssl openssl-devel pcre-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;apt-get update
apt-get -y install gcc make  openssl libssl-dev libpcre3 libpcre3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
wget http://nginx.org/download/nginx-1.9.15.tar.gz
tar -zxvf nginx-1.9.15.tar.gz
cd nginx-1.9.15
./configure
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还可以添加&lt;a href=&#34;https://github.com/cuber/ngx_http_google_filter_module&#34;&gt;Google反代模块&lt;/a&gt;,按下面操作编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
git clone https://github.com/cuber/ngx_http_google_filter_module
git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module
wget http://nginx.org/download/nginx-1.9.15.tar.gz
tar -zxvf nginx-1.9.15.tar.gz
cd nginx-1.9.15
./configure  --with-http_ssl_module  --add-module=/tmp/ngx_http_google_filter_module  --add-module=/tmp/ngx_http_substitutions_filter_module
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意:重复执行,需要清理上次编译数据&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nginx -V&lt;/code&gt; 查看编译的参数和已加载的模块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
	listen       80;
	server_name  g.suconghou.cn google.com www.google.com;
	resolver 8.8.8.8;
	expires 1d;
	gzip on;
	gzip_min_length 1024;
	gzip_proxied any;
	gzip_comp_level 3;
	gzip_types text/plain text/javascript text/css text/json application/javascript  application/json image/jpeg image/gif image/png;
	proxy_hide_header Set-Cookie;
	proxy_hide_header Alt-Svc;
	proxy_hide_header Alternate-Protocol;
	location / {
			google on;
			google_scholar on;
	}

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;各模块说明:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;各模块说明&lt;/h3&gt;

&lt;p&gt;http_gzip_module提供了对gzip的基本的支持，默认是编译到nginx的发行版本里面的。&lt;/p&gt;

&lt;p&gt;http_gzip_static_module则是针对nginx serve的静态文件，需要编译进去才能有。比如a.html，如果启用了&lt;code&gt;gzip_static on&lt;/code&gt;，如果同一目录下还有a.html.gz作为a.html压缩版本存在，那么nginx会以a.html.gz作为a.html的gzip version来serve。&lt;/p&gt;

&lt;h3 id=&#34;配置gzip:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;配置Gzip&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gzip on&lt;/code&gt; 开启Gzip&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gzip_proxied any&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;可能需要移动配置目录:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;可能需要移动配置目录&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;nginx.conf&lt;/code&gt;中配置&lt;code&gt;include /usr/local/nginx/conf/conf.d/*.conf;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;建立目录&lt;code&gt;mkdir /etc/nginx/conf.d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;ln -s /etc/nginx/conf.d /usr/local/nginx/conf/conf.d&lt;/code&gt;建立软连接&lt;/p&gt;

&lt;h3 id=&#34;卸载apache:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;卸载apache&lt;/h3&gt;

&lt;p&gt;1.完全卸载使用apt-get安装的apache
1、sudo apt-get remove apache2
2、sudo apt-get remove apache2.2-common
3、sudo apt-get autoremove (此命令会自动卸载PHP)
卸载完成&lt;/p&gt;

&lt;p&gt;2.rpm 方式安装的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -qa|grep httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得出结果
httpd-2.2.15-39.el6.centos.i686
httpd-tools-2.2.15-39.el6.centos.i686&lt;/p&gt;

&lt;p&gt;从上往下一个一个卸载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -e httpd-2.2.15
rpm -e httpd-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ab压力测试在httpd-tools,可以不卸载;
CenterOS 安装 ab 压力测试&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install httpd-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译安装php7:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;编译安装PHP7&lt;/h2&gt;

&lt;p&gt;最好先&lt;code&gt;yum update&lt;/code&gt;一下,再安装以下依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install -y git wget curl curl-devel gcc gcc-c++ libmarypt cmake  autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libpng libpng-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses curl openssl-devel gdbm-devel db4-devel libXpm-devel libX11-devel gd-devel gmp-devel readline-devel libxslt-devel expat-devel xmlrpc-c xmlrpc-c-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载PHP7最新版本,解压,有多重压缩格式可选,其中xz最小&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://php.net/distributions/php-7.0.5.tar.xz
tar -xJf php-7.0.5.tar.xz
cd php-7.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译之前,可以开启O3编译优化,生成的可执行文件更小,性能更好
&lt;code&gt;export CFLAGS=&amp;quot;-O3&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;包含部分常用扩展的编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --enable-inline-optimization --enable-static=yes --prefix=/tmp --with-config-file-path=/etc --enable-pcntl --enable-sockets --enable-ftp --enable-bcmath --enable-zip --enable-mbstring --with-iconv --with-mysqli --with-pdo-mysql --with-curl --with-gd --with-openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;功能更全的编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export CFLAGS=&amp;quot;-O3&amp;quot;
./configure --enable-inline-optimization --enable-static=yes --prefix=/usr/local --with-config-file-path=/etc --enable-opcache --enable-fpm  --enable-posix --enable-pcntl --enable-sockets --enable-ftp --enable-bcmath  --enable-zip --enable-mbstring --with-iconv --with-mysqli --with-pdo-mysql --with-curl --with-gd  --with-openssl --with-mcrypt
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中部分步骤可能需要root权限&lt;/p&gt;

&lt;h3 id=&#34;可能出现的错误:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;可能出现的错误&lt;/h3&gt;

&lt;p&gt;1.curl未安装
执行
&lt;code&gt;yum install curl-devel&lt;/code&gt;
或者 &lt;code&gt;sudo apt-get install curl libcurl3 libcurl3-dev&lt;/code&gt;
然后再次尝试编译&lt;/p&gt;

&lt;p&gt;2.需要安装libcrytpt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/attic/libmcrypt/libmcrypt-2.5.7.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar -zxvf libmcrypt-2.5.7.tar.gz
cd libmcrypt-2.5.7
mkdir -p /usr/local/libmcrytpt
./configure prefix=/usr/local/libmcrytpt/
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重新编译,设定编译参数mcrypt指定路径:
&lt;code&gt;--with-mcrypt=/usr/local/libmcrytpt/&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OpenSSL相关错误&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Cannot find OpenSSL&#39;s &amp;lt;evp.h&amp;gt;&lt;/code&gt;
或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture x86_64:
  &amp;quot;_PKCS5_PBKDF2_HMAC&amp;quot;, referenced from:
      _zif_openssl_pbkdf2 in openssl.o
  &amp;quot;_SSL_CTX_set_alpn_protos&amp;quot;, referenced from:
      _php_openssl_setup_crypto in xp_ssl.o
  &amp;quot;_SSL_CTX_set_alpn_select_cb&amp;quot;, referenced from:
      _php_openssl_setup_crypto in xp_ssl.o
  &amp;quot;_SSL_get0_alpn_selected&amp;quot;, referenced from:
      _php_openssl_sockop_set_option in xp_ssl.o
  &amp;quot;_SSL_select_next_proto&amp;quot;, referenced from:
      _server_alpn_callback in xp_ssl.o
  &amp;quot;_TLSv1_1_client_method&amp;quot;, referenced from:
      _php_openssl_setup_crypto in xp_ssl.o
  &amp;quot;_TLSv1_1_server_method&amp;quot;, referenced from:
      _php_openssl_setup_crypto in xp_ssl.o
  &amp;quot;_TLSv1_2_client_method&amp;quot;, referenced from:
      _php_openssl_setup_crypto in xp_ssl.o
  &amp;quot;_TLSv1_2_server_method&amp;quot;, referenced from:
      _php_openssl_setup_crypto in xp_ssl.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决:
Linux上 &lt;code&gt;yum install openssl openssl-devel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mac上编译须做如下配置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install openssl&lt;/code&gt; 然后执行 &lt;code&gt;brew link openssl --force&lt;/code&gt; 并添加环境变量
&lt;code&gt;export LDFLAGS=&amp;quot;/usr/local/opt/openssl/lib/libssl.dylib /usr/local/opt/openssl/lib/libcrypto.dylib&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4.configure: error: xml2-config not found. Please check your libxml2 installation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libxml2 libxml2-dev libmcrypt-dev openssl libssl-dev libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Cannot find OpenSSL&amp;rsquo;s libraries&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libmcrypt-dev openssl libssl-dev libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.configure: error: png.h not found.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libjpeg-dev libpng-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;make: *** [ext/fileinfo/libmagic/apprentice.lo] Error 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是由于内存小于1G所导致.可以&lt;code&gt;--disable-fileinfo&lt;/code&gt;,或者添加添加零时的swap&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#创建一个大小为256M的文件
dd if=/dev/zero of=/swapfile bs=1024 count=262144
#把这个文件变成swap文件
mkswap /swapfile
#启用这个swap文件
swapon /swapfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要每次开机就加载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#编辑/etc/fstab文件，使在每次开机时自动加载swap文件
/swapfile    swap    swap    default   0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意:XEN KVM 可以创建SWAP,OVZ本身就是Virtual Environmen,不支持创建SWAP
通过&lt;code&gt;df -lhT&lt;/code&gt; 看到Type为simfs,而不是ext3,ext4,一般就不支持&lt;/p&gt;

&lt;p&gt;提示: make 可使用多核提升编译性能
用make -j带一个参数，可以把项目进行并行编译，比如在一台双核的机器上，完全可以用&lt;code&gt;make -j4&lt;/code&gt;，让make最多允许4个编译命令同时执行，这样可以更有效的利用CPU资源。&lt;/p&gt;

&lt;p&gt;-O这个选项控制所有的优化等级。使用优化选项会使编译过程耗费更多的时间，并且占用更多的内存，尤其是在提高优化等级的时候。
-O2是推荐的优化等级,O3是最高等级。如果编译软件出现错误，请先检查是否启用了-O3&lt;/p&gt;

&lt;p&gt;PHP的数据库长连接有没有效,
实际测试,采用香港服务器远程连接mysql,非长连接模式下耗时约600ms,使用PDO长连接,耗时下降到260ms左右,是有一定作用的.
但是长连接不适用于CLI模式,CLI模式下,php进程退出,连接即断开.&lt;/p&gt;

&lt;h2 id=&#34;安装一些其他扩展:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;安装一些其他扩展&lt;/h2&gt;

&lt;p&gt;php redis 扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c -O php-redis.zip https://github.com/phpredis/phpredis/archive/php7.zip
unzip php-redis.zip
cd phpredis-php7
phpize
./configure --enable-redis-igbinary
make &amp;amp;&amp;amp; make install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装libmemcached,memcached依赖此项&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz
tar -xzf libmemcached-1.0.18.tar.gz -C /tmp
cd /tmp/libmemcached-1.0.18
./configure
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php memcached 扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c -O php-memcached.zip https://github.com/php-memcached-dev/php-memcached/archive/php7.zip
unzip php-memcached.zip
cd php-memcached-php7
phpize
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装memcached,见&lt;a href=&#34;http://memcached.org/downloads&#34;&gt;http://memcached.org/downloads&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://memcached.org/latest
tar -zxvf memcached-1.x.x.tar.gz
cd memcached-1.x.x
./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make test &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装swoole扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c -O php-swoole.zip https://github.com/swoole/swoole-src/archive/master.zip
unzip php-swoole.zip
cd swoole-src-master
phpize
./configure
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;静态编译redis-memcached-opcache到php7:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;静态编译redis,memcached,opcache到php7&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;wget -c http://php.net/distributions/php-7.0.5.tar.xz
wget -c -O php-redis.zip https://github.com/phpredis/phpredis/archive/php7.zip
wget -c -O php-memcached.zip https://github.com/php-memcached-dev/php-memcached/archive/php7.zip
tar -xJf php-7.0.5.tar.xz
unzip php-redis.zip -d php-7.0.5/ext
unzip php-memcached.zip -d php-7.0.5/ext
export CFLAGS=&amp;quot;-O3&amp;quot;
cd php-7.0.5
rm -rf configure
./buildconf --force
./configure --help
./configure --enable-inline-optimization --enable-static=yes --prefix=/tmp --with-config-file-path=/etc --enable-opcache --enable-redis --enable-memcached --disable-memcached-sasl --enable-pcntl --enable-sockets --enable-ftp --enable-bcmath --enable-zip --enable-mbstring --with-iconv --with-mysqli --with-pdo-mysql --with-curl --with-gd --with-openssl
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能出现的错误&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;configure: error: no, sasl.h is not available. Run configure with --disable-memcached-sasl to disable this check&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解决:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install cyrus-sasl-devel&lt;/code&gt; 或 &lt;code&gt;sudo apt-get install libsasl2-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者禁用掉&lt;/p&gt;

&lt;p&gt;搭配PHP的配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server{
	listen 8080;
	server_name 127.0.0.1;
	index index.html index.php;
	root /data/sites/default;
	location / {
			try_files $uri $uri/ /index.php?$args;
	}
	location ~ \.php$ {
			try_files $uri /index.php?$args;
			fastcgi_pass  unix:/var/run/php-fpm.sock;
			fastcgi_index index.php;
			fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
			include        fastcgi_params;
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个Server实现多个域名,多个主机&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server{
	listen 8080;
	server_name *.git.suconghou.cn;
	index index.html index.php;
	if ($host ~* ^((\w+)\.git\.suconghou\.cn)$) {
			set $subdomain $2;
	}
	root /data/git/$subdomain;
	add_header X-Root &amp;quot;$subdomain&amp;quot;;
	location / {
			try_files $uri $uri/ /index.php?$args;
	}
	location ~ \.php$ {
			try_files $uri /index.php?$args;
			fastcgi_pass  unix:/var/run/php-fpm.sock;
			fastcgi_index index.php;
			fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
			include        fastcgi_params;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nginx里同&lt;code&gt;fastcgi_params&lt;/code&gt;文件一样,还存在一份配置&lt;code&gt;fastcgi.conf&lt;/code&gt;,只不过后者多了一行&lt;code&gt;fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;&lt;/code&gt;
我们可以直接使用它来替换&lt;code&gt;fastcgi_params&lt;/code&gt;文件配置,同时我们也都添加了try_files检测,也可以略去&lt;code&gt;fastcgi_index&lt;/code&gt;,故可以简写为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ \.php$ {
	try_files $uri /index.php?$args;
	fastcgi_pass  unix:/var/run/php-fpm.sock;
	include fastcgi.conf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意&lt;code&gt;fastcgi_param&lt;/code&gt;指令是数组型的,内层替换外层,但是同级多次使用的时候，是新增而不是替换。注意不要重复使用.&lt;/p&gt;

&lt;p&gt;php-fpm 运行时错误
1. [pool www] cannot get gid for group &amp;lsquo;nobody&amp;rsquo;
&lt;code&gt;groupadd nobody&lt;/code&gt;或者
 修改php-fpm.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = www-data
group = www-data
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装mariadb:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;安装MariaDB&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;apt-get install mariadb-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程中要求设定一个root密码,安装完&lt;code&gt;service mysql status&lt;/code&gt;查看运行状态,&lt;code&gt;sudo service mysql restart&lt;/code&gt;可以重启&lt;/p&gt;

&lt;h2 id=&#34;开机启动脚本:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;开机启动脚本&lt;/h2&gt;

&lt;p&gt;Debian and Ubuntu function at &lt;code&gt;/lib/lsb/init-functions&lt;/code&gt;
&lt;code&gt;ln -s  /lib/lsb/init-functions /etc/init.d/functions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
#chkconfig: 2345 90 91

binpath=`which nginx`
prog=$(basename $binpath)
. /etc/init.d/functions
. /etc/sysconfig/network
[ &amp;quot;$NETWORKING&amp;quot; = &amp;quot;no&amp;quot; ] &amp;amp;&amp;amp; exit 0
[ -x $binpath ] || exit 0
[ -f /etc/sysconfig/$prog ] &amp;amp;&amp;amp; . /etc/sysconfig/$prog

start(){
	echo -n $&amp;quot;Starting $prog: &amp;quot;
	$prog || echo -n &amp;quot;$prog already running&amp;quot;
}
stop(){
	echo -n $&amp;quot;Stopping $prog: &amp;quot;
	$prog -s quit
}
restart(){
	stop
	sleep 1
	start
}
reload() {
	echo -n $&amp;quot;Reloading $prog: &amp;quot;
	$prog -s reload
}
case &amp;quot;$1&amp;quot; in
start)
    $1
    ;;
stop)
    $1
    ;;
restart)
    $1
    ;;
reload)
    $1
    ;;
*)
echo $&amp;quot;Usage: $0 {start|stop|restart|reload}&amp;quot;
exit 2
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;php-fpm:aa93c013153cd0b80f2e19308ae27e8a&#34;&gt;php-fpm&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/init.d/php-fpm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
#chkconfig: 2345 90 91

binpath=`which php-fpm`
prog=$(basename $binpath)
. /etc/init.d/functions
. /etc/sysconfig/network
[ &amp;quot;$NETWORKING&amp;quot; = &amp;quot;no&amp;quot; ] &amp;amp;&amp;amp; exit 0
[ -x $binpath ] || exit 0
[ -f /etc/sysconfig/$prog ] &amp;amp;&amp;amp; . /etc/sysconfig/$prog
pidfile=/var/run/php-fpm.pid


start(){
	echo -n $&amp;quot;Starting $prog: &amp;quot;
	$prog || echo -n &amp;quot;$prog already running&amp;quot;
}
stop(){
	echo -n $&amp;quot;Stopping $prog: &amp;quot;
	kill -INT `cat $pidfile`
}
restart(){
	stop
	sleep 1
	start
}
reload() {
	echo -n $&amp;quot;Reloading $prog: &amp;quot;
	kill -USR2 `cat $pidfile`
}
case &amp;quot;$1&amp;quot; in
start)
    $1
    ;;
stop)
    $1
    ;;
restart)
    $1
    ;;
reload)
    $1
    ;;
*)
echo $&amp;quot;Usage: $0 {start|stop|restart|reload}&amp;quot;
exit 2
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  添加执行权限
sudo chmod a+x /etc/init.d/nginx
sudo chmod a+x /etc/init.d/php-fpm

##  加入服务
sudo chkconfig --add nginx
sudo chkconfig --add php-fpm

##   开机自启
sudo chkconfig nginx on
sudo chkconfig php-fpm on

## 查看是否开机启动

sudo chkconfig --list nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ubuntu里没有chkconfig
可以使用sysv-rc-conf
&lt;code&gt;sudo apt-get install sysv-rc-conf&lt;/code&gt;
然后直接使用 sysv-rc-conf 来管理,或者&lt;code&gt;sudo sysv-rc-conf nginx on&lt;/code&gt;直接把&lt;code&gt;/etc/init.d/nginx&lt;/code&gt; 加入到系统自动 启动列表中&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>