<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 苏苏的博客</title>
    <link>http://blog.suconghou.cn/tags/mysql/</link>
    <description>Recent content in Mysql on 苏苏的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2016 23:51:02 +0800</lastBuildDate>
    <atom:link href="http://blog.suconghou.cn/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>安装PHP7和NGINX</title>
      <link>http://blog.suconghou.cn/post/install-nginx-php-mysql-redis/</link>
      <pubDate>Fri, 01 Jan 2016 23:51:02 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/install-nginx-php-mysql-redis/</guid>
      <description>

&lt;h2 id=&#34;编译安装nginx&#34;&gt;编译安装NGINX&lt;/h2&gt;

&lt;p&gt;首先安装一些依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y install gcc make autoconf automake install zlib zlib-devel openssl openssl-devel pcre-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;apt-get update
apt-get -y install gcc make  openssl libssl-dev libpcre3 libpcre3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nginx最新版本&lt;a href=&#34;http://www.oschina.net/news/73922/nginx-1-10-1&#34;&gt;查看&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;编译安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chrome51以后版本废弃了NPN的支持,要让Chrome51以后版本支持http2,需要更新OpenSSL到1.0.2及以上.&lt;/p&gt;

&lt;p&gt;查看当前系统的OpenSSL版本:&lt;code&gt;openssl version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;更新OpenSSL&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OPENSSL_VERSION=openssl-1.0.2h
cd /tmp
wget https://www.openssl.org/source/${OPENSSL_VERSION}.tar.gz
tar zxvf ${OPENSSL_VERSION}.tar.gz
cd ${OPENSSL_VERSION}
./config --prefix=/usr --shared
make -j4
sudo make install
openssl version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一句查看版本是否更新了&lt;/p&gt;

&lt;p&gt;如果没有&lt;code&gt;www-data&lt;/code&gt;用户和组,可以先创建&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;groupadd www-data
adduser -M -s /sbin/nologin www-data -g www-data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NGINX_VERSION=nginx-1.11.3
CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l`
cd /tmp
wget http://nginx.org/download/${NGINX_VERSION}.tar.gz
tar -zxvf ${NGINX_VERSION}.tar.gz
cd ${NGINX_VERSION}
export CFLAGS=&amp;quot;-O3&amp;quot;
./configure --with-http_v2_module --with-http_ssl_module --sbin-path=/usr/local/sbin/nginx --prefix=/etc/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --user=www-data --group=www-data
sudo make -j$CPU_NUM  &amp;amp;&amp;amp; sudo make install
sudo strip -s /usr/local/sbin/nginx
rm -rf /tmp/nginx* /etc/nginx/*.default ${OPENSSL_VERSION}*
nginx -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果找不到&lt;code&gt;sudo nginx&lt;/code&gt;,使用以下命令:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ln -sf /usr/local/sbin/nginx /usr/sbin/nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;还可以添加&lt;a href=&#34;https://github.com/cuber/ngx_http_google_filter_module&#34;&gt;Google反代模块&lt;/a&gt;,按下面操作编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
git clone https://github.com/cuber/ngx_http_google_filter_module
git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module
wget http://nginx.org/download/${NGINX_VERSION}.tar.gz
tar -zxvf ${NGINX_VERSION}.tar.gz
cd ${NGINX_VERSION}
export CFLAGS=&amp;quot;-O3&amp;quot;
./configure  --with-http_ssl_module  --add-module=/tmp/ngx_http_google_filter_module  --add-module=/tmp/ngx_http_substitutions_filter_module
make -j$CPU_NUM &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意:重复执行,需要清理上次编译数据&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nginx -V&lt;/code&gt; 查看编译的参数和已加载的模块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
	listen       80;
	server_name  xxx.domain.com google.com www.google.com;
	resolver 8.8.8.8;
	expires 7d;
	gzip on;
	gzip_min_length 1024;
	gzip_proxied any;
	gzip_comp_level 3;
	gzip_types text/plain text/javascript text/css text/json application/xml application/javascript  application/json image/jpeg image/gif image/png;
	proxy_hide_header Set-Cookie;
	proxy_hide_header Alt-Svc;
	proxy_hide_header Alternate-Protocol;
	location / {
			google on;
			google_scholar on;
	}

}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;使用我编译的google代理的docker版本更易部署 &lt;a href=&#34;https://hub.docker.com/r/suconghou/nginx-google/&#34;&gt;https://hub.docker.com/r/suconghou/nginx-google/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;各模块说明&#34;&gt;各模块说明&lt;/h3&gt;

&lt;p&gt;http_gzip_module提供了对gzip的基本的支持，默认是编译到nginx的发行版本里面的。&lt;/p&gt;

&lt;p&gt;http_gzip_static_module则是针对nginx serve的静态文件，需要编译进去才能有。比如a.html，如果启用了&lt;code&gt;gzip_static on&lt;/code&gt;，如果同一目录下还有a.html.gz作为a.html压缩版本存在，那么nginx会以a.html.gz作为a.html的gzip version来serve。&lt;/p&gt;

&lt;h3 id=&#34;配置gzip&#34;&gt;配置Gzip&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gzip on&lt;/code&gt; 开启Gzip&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gzip_proxied any&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;可能需要移动配置目录&#34;&gt;可能需要移动配置目录&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;nginx.conf&lt;/code&gt;中配置&lt;code&gt;include /usr/local/nginx/conf/conf.d/*.conf;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;建立目录&lt;code&gt;mkdir /etc/nginx/conf.d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;ln -s /etc/nginx/conf.d /usr/local/nginx/conf/conf.d&lt;/code&gt;建立软连接&lt;/p&gt;

&lt;h3 id=&#34;修改nginx配置&#34;&gt;修改Nginx配置&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;设置最大上传文件大小&lt;/strong&gt;,配置&lt;code&gt;nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_max_body_size 50m&lt;/code&gt; Default value for client_max_body_size is 1 MiB,超过大小报错&lt;code&gt;413 Request Entity Too Large&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;静态由Nginx,动态转到后端&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root /home/demo/goproj/src/Test/public;
try_files $uri/index.html $uri.html $uri @goapp;

location @goapp {
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header Host $http_host;
	proxy_redirect off;
	proxy_pass http://localhost:8080;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginx 301 重定向&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server{
    listen 80;
    server_name xxx.com;
    rewrite ^(.*) https://xxx.com$1 permanent;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用匹配跳转后也加上之前访问的路径和&lt;code&gt;query_string&lt;/code&gt;,可以转为https协议,也可以让多个域名301到一个域名&lt;/p&gt;

&lt;h3 id=&#34;代理与后端保持长连接&#34;&gt;代理与后端保持长连接&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
keepalive_timeout 75 75;
keepalive_requests 1024;
location / {
	proxy_pass http://backend;
	proxy_http_version 1.1;
	proxy_set_header Connection &amp;quot;&amp;quot;;
	proxy_set_header Host $host;
	proxy_set_header X-Forwarded-Ssl off;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Port 80;
	proxy_redirect off;
}

upstream backend {
    server 127.0.0.1:8084;
    keepalive 64;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;keepalive_timeout 75 75; keepalive_requests 1024;&lt;/code&gt; 用于与浏览器端保持长连接,时间为timeout参数.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;keepalive_requests&lt;/code&gt;是与客户端在同一个长连接中服务的请求次数,一个长连接服务次数超过限定,nginx将会强行关闭,在客户端请求密集时提高此参数有助于性能提升.&lt;/p&gt;

&lt;p&gt;nginx代理模式使用http1.0,&lt;code&gt;proxy_http_version 1.1;&lt;/code&gt;指明需要使用http1.1协议&lt;/p&gt;

&lt;p&gt;&lt;code&gt;proxy_set_header Connection &amp;quot;&amp;quot;;&lt;/code&gt; 清除向后端传送的Connection字段,http1.1 默认就是keepalive, 重置此字段是忽略客户端此字段的值,不将其发送到后端.&lt;/p&gt;

&lt;p&gt;upstream中&lt;code&gt;keepalive 64&lt;/code&gt;参数十分关键,他表明nginx连接池内最多保留的空闲长连接数.此值设置过小会导致nginx频繁关闭空闲连接,需要时又创建长连接,创建多了超过指定又会关闭.&lt;/p&gt;

&lt;p&gt;若服务器每秒仅收到20个请求,每个请求后端要300ms处理,则这20个请求始终会使用到长连接,此场景下最多64个空闲长连接已经足够.&lt;/p&gt;

&lt;p&gt;请求处理时间小于1秒,每秒请求数小于设定的&lt;code&gt;keepalive&lt;/code&gt;,那么这些请求就是线程池长连接服务的,没有额外开销.&lt;/p&gt;

&lt;p&gt;更多长连接详细使用见 &lt;a href=&#34;http://skyao.github.io/leaning-nginx/documentation/keep_alive.html&#34;&gt;http://skyao.github.io/leaning-nginx/documentation/keep_alive.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;code&gt;nginx&lt;/code&gt;的&lt;code&gt;proxy_pass&lt;/code&gt;后面带不带&lt;code&gt;/&lt;/code&gt;是有区别的.&lt;/p&gt;

&lt;p&gt;不带&lt;code&gt;/&lt;/code&gt;,nginx将不会对请求做任何形式的修改,仅仅是分发到不同主机上.&lt;/p&gt;

&lt;p&gt;带有&lt;code&gt;/&lt;/code&gt;,nginx会将你&lt;code&gt;location&lt;/code&gt;中匹配的东西略过.例如&lt;code&gt;location /service/&lt;/code&gt;对于请求&lt;code&gt;http://nginx/service/add.php&lt;/code&gt;将变为&lt;code&gt;http://proxy/add.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果还在&lt;code&gt;/&lt;/code&gt;后面添加&lt;code&gt;uri&lt;/code&gt;,&lt;code&gt;uri&lt;/code&gt;也会在之前拼入,如&lt;code&gt;proxy_pass http://proxy/request/&lt;/code&gt; 变为 &lt;code&gt;http://proxy/request/add.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在使用正则匹配时,&lt;code&gt;proxy_pass&lt;/code&gt;后面是禁止添加&lt;code&gt;/&lt;/code&gt;或者&lt;code&gt;uri&lt;/code&gt;的,否则报错.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用if判断时,if和括号之间是必须要加空格的,判断文件,目录是否存在&lt;code&gt;!-f&lt;/code&gt;,&lt;code&gt;!-d&lt;/code&gt;也是连起来的不能有空格&lt;/p&gt;

&lt;h3 id=&#34;附上卸载apache方法&#34;&gt;附上卸载Apache方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;完全卸载使用apt-get安装的apache&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get remove apache2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get remove apache2.2-common&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get autoremove (此命令会自动卸载PHP)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;卸载由rpm方式安装的apache&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;rpm -qa|grep httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得出结果&lt;/p&gt;

&lt;p&gt;&lt;code&gt;httpd-2.2.15-39.el6.centos.i686&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;httpd-tools-2.2.15-39.el6.centos.i686&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;从上往下一个一个卸载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -e httpd-2.2.15
rpm -e httpd-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ab压力测试在httpd-tools,可以不卸载;&lt;/p&gt;

&lt;p&gt;在CentOS上安装ab压力测试&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install httpd-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译安装php7&#34;&gt;编译安装PHP7&lt;/h2&gt;

&lt;p&gt;最好先&lt;code&gt;yum update&lt;/code&gt;一下,再安装以下依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install -y git wget curl  curl-devel libzip libzip-devel libmcrypt libmcrypt-devel gcc gcc-c++ cmake  autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libpng libpng-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses  openssl-devel gdbm-devel db4-devel libXpm-devel libX11-devel gd-devel gmp-devel readline-devel libxslt-devel expat-devel xmlrpc-c xmlrpc-c-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载PHP7最新版本,解压,有多种压缩格式可选,其中xz最小&lt;/p&gt;

&lt;p&gt;如果你在国内下载,将&lt;code&gt;php.net&lt;/code&gt;改为&lt;code&gt;cn.php.net&lt;/code&gt;下载会更快&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
PHP_VERSION=php-7.0.9
CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l`
wget http://php.net/distributions/${PHP_VERSION}.tar.xz
tar -xJf ${PHP_VERSION}.tar.xz
cd ${PHP_VERSION}
export CFLAGS=&amp;quot;-O3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译之前,可以开启O3编译优化,生成的可执行文件更小,性能更好&lt;/p&gt;

&lt;p&gt;包含部分常用扩展的编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --enable-inline-optimization --enable-static=yes --prefix=/tmp --with-config-file-path=/etc --disable-cgi  --enable-posix --enable-pcntl --enable-sockets --enable-ftp --enable-bcmath --enable-zip --enable-mbstring --enable-gd-native-ttf --with-iconv --with-mysqli --with-pdo-mysql --with-curl --with-gd --with-freetype-dir=/usr/include/freetype2 --with-png-dir=/usr/include --with-jpeg-dir=/usr/include --with-openssl --with-mcrypt
make -j$CPU_NUM &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;功能更全的编译&lt;/p&gt;

&lt;p&gt;包含&lt;code&gt;php-fpm&lt;/code&gt;和&lt;code&gt;opcache&lt;/code&gt;,添加其他常用扩展&lt;code&gt;--enable-exif --enable-calendar  --with-xsl --with-bz2&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --enable-inline-optimization --enable-static=yes --prefix=/usr/local --with-config-file-path=/etc --disable-cgi --enable-opcache --enable-fpm  --enable-posix --enable-pcntl --enable-sockets --enable-ftp --enable-bcmath  --enable-zip --enable-mbstring --enable-gd-native-ttf --with-iconv --with-mysqli --with-pdo-mysql --with-curl --with-gd --with-freetype-dir=/usr/include/freetype2 --with-png-dir=/usr/include --with-jpeg-dir=/usr/include --with-openssl --with-mcrypt --enable-exif --enable-calendar  --with-xsl --with-bz2
make -j$CPU_NUM &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过后就可以使用&lt;code&gt;php&lt;/code&gt;命令了,但是&lt;code&gt;php-fpm&lt;/code&gt;还需要配置一下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php -v
php -m
mv /usr/local/etc/php-fpm.conf.default  /usr/local/etc/php-fpm.conf
mv /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf
php-fpm -t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改文件名,使配置文件正确,还可以修改配置,记录log和slow log&lt;/p&gt;

&lt;p&gt;提前建立文件夹&lt;code&gt;mkdir -p /var/log/php-fpm&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;修改&lt;code&gt;php-fpm.conf&lt;/code&gt;内&lt;code&gt;global&lt;/code&gt;段&lt;code&gt;error_log&lt;/code&gt;为&lt;code&gt;/var/log/php-fpm/php-fpm.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;php-fpm.conf&lt;/code&gt;内&lt;code&gt;global&lt;/code&gt;段&lt;code&gt;pid&lt;/code&gt;为&lt;code&gt;/var/run/php-fpm.pid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;www.conf&lt;/code&gt;内&lt;code&gt;slowlog&lt;/code&gt;为&lt;code&gt;/var/log/php-fpm/$pool.log.slow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;www.conf&lt;/code&gt;内&lt;code&gt;request_slowlog_timeout&lt;/code&gt;为&lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面一段代码实现自动修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /var/log/php-fpm
sed -i &#39;/^;error_log.*/cerror_log = \/var\/log\/php-fpm\/php-fpm.log&#39; /usr/local/etc/php-fpm.conf
sed -i &#39;/^;pid.*/cpid = \/var\/run\/php-fpm.pid&#39; /usr/local/etc/php-fpm.conf
sed -i &#39;/^;slowlog.*/cslowlog = \/var\/log\/php-fpm\/$pool.log.slow&#39; /usr/local/etc/php-fpm.d/www.conf
sed -i &#39;/^;request_slowlog_timeout.*/crequest_slowlog_timeout = 5&#39; /usr/local/etc/php-fpm.d/www.conf
php-fpm -t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动&lt;code&gt;php-fpm&lt;/code&gt;
以下一些常用操作相信十分有用,&lt;code&gt;vim ~/.shell.sh&lt;/code&gt;加入吧&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias phpfpmreload=&#39; sudo kill -USR2 `cat /var/run/php-fpm.pid` &#39;;
alias phpfpmstop=&#39; sudo kill -INT `cat /var/run/php-fpm.pid` &#39;;
alias errorlog=&#39;tail -f /var/log/nginx/error.log  /var/log/php-fpm/* &#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在你的&lt;code&gt;.baserc&lt;/code&gt;,&lt;code&gt;vim ~/.baserc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if [ -f ~/.shell.sh ]; then
        . ~/.shell.sh
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt;一下就可以使用了.&lt;/p&gt;

&lt;p&gt;其中部分步骤可能需要root权限&lt;/p&gt;

&lt;h3 id=&#34;可能出现的错误&#34;&gt;可能出现的错误&lt;/h3&gt;

&lt;p&gt;1.curl未安装
执行
&lt;code&gt;yum install curl-devel&lt;/code&gt;
或者 &lt;code&gt;sudo apt-get install curl libcurl3 libcurl3-dev&lt;/code&gt;
然后再次尝试编译&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;error: mcrypt.h not found. Please reinstall libmcrypt.&lt;/code&gt;
需要安装libcrytpt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
wget ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/attic/libmcrypt/libmcrypt-2.5.7.tar.gz
tar -zxvf libmcrypt-2.5.7.tar.gz
cd libmcrypt-2.5.7
mkdir -p /usr/local/libmcrytpt
./configure prefix=/usr/local/libmcrytpt/
make -j$CPU_NUM  &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重新编译,设定编译参数mcrypt指定路径:
&lt;code&gt;--with-mcrypt=/usr/local/libmcrytpt/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.OpenSSL相关错误&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cannot find OpenSSL&#39;s &amp;lt;evp.h&amp;gt;&lt;/code&gt;
或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture x86_64:
	&amp;quot;_PKCS5_PBKDF2_HMAC&amp;quot;, referenced from:
			_zif_openssl_pbkdf2 in openssl.o
	&amp;quot;_SSL_CTX_set_alpn_protos&amp;quot;, referenced from:
			_php_openssl_setup_crypto in xp_ssl.o
	&amp;quot;_SSL_CTX_set_alpn_select_cb&amp;quot;, referenced from:
			_php_openssl_setup_crypto in xp_ssl.o
	&amp;quot;_SSL_get0_alpn_selected&amp;quot;, referenced from:
			_php_openssl_sockop_set_option in xp_ssl.o
	&amp;quot;_SSL_select_next_proto&amp;quot;, referenced from:
			_server_alpn_callback in xp_ssl.o
	&amp;quot;_TLSv1_1_client_method&amp;quot;, referenced from:
			_php_openssl_setup_crypto in xp_ssl.o
	&amp;quot;_TLSv1_1_server_method&amp;quot;, referenced from:
			_php_openssl_setup_crypto in xp_ssl.o
	&amp;quot;_TLSv1_2_client_method&amp;quot;, referenced from:
			_php_openssl_setup_crypto in xp_ssl.o
	&amp;quot;_TLSv1_2_server_method&amp;quot;, referenced from:
			_php_openssl_setup_crypto in xp_ssl.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决:
Linux上 &lt;code&gt;yum install openssl openssl-devel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mac上编译须做如下配置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install openssl&lt;/code&gt; 然后执行 &lt;code&gt;brew link openssl --force&lt;/code&gt; 并添加环境变量&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export LDFLAGS=&amp;quot;/usr/local/opt/openssl/lib/libssl.dylib /usr/local/opt/openssl/lib/libcrypto.dylib&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4.configure: error: xml2-config not found. Please check your libxml2 installation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libxml2 libxml2-dev libmcrypt-dev openssl libssl-dev libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.Cannot find OpenSSL&amp;rsquo;s libraries&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libmcrypt-dev openssl libssl-dev libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.configure: error: png.h not found.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libjpeg-dev libpng-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7.make: *** [ext/fileinfo/libmagic/apprentice.lo] Error 1&lt;/p&gt;

&lt;p&gt;这是由于内存小于1G所导致.可以&lt;code&gt;--disable-fileinfo&lt;/code&gt;,或者添加添加零时的swap&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#创建一个大小为256M的文件(要创建512M的话把1024改为2048)
dd if=/dev/zero of=/swapfile bs=1024 count=262144
#把这个文件变成swap文件
mkswap /swapfile
#启用这个swap文件
swapon /swapfile
#查看已经生效了
free -m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要每次开机就加载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#编辑/etc/fstab文件，使在每次开机时自动加载swap文件
/swapfile    swap    swap    default   0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意:XEN KVM 可以创建SWAP,OVZ本身就是Virtual Environmen,不支持创建SWAP&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;df -lhT&lt;/code&gt; 看到磁盘类型为simfs,而不是ext3,ext4,一般就不支持&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;8.&lt;code&gt;system libzip must be upgraded to version &amp;gt;= 0.11&lt;/code&gt;
libzip 地址 &lt;a href=&#34;http://www.nih.at/libzip/&#34;&gt;http://www.nih.at/libzip/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
wget http://www.nih.at/libzip/libzip-1.1.2.tar.xz
tar Jxvf libzip-1.1.2.tar.xz
cd libzip-1.1.2
mkdir -p /usr/local/libzip
./configure prefix=/usr/local/libzip/
make -j$CPU_NUM  &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译PHP时加上&lt;code&gt;--with-libzip=/usr/local/libzip/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用多核提升编译性能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用make -j带一个参数，可以把项目进行并行编译，比如在一台双核的机器上，完全可以用&lt;code&gt;make -j4&lt;/code&gt;，让make最多允许4个编译命令同时执行，这样可以更有效的利用CPU资源。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优化等级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-O这个选项控制所有的优化等级。使用优化选项会使编译过程耗费更多的时间，并且占用更多的内存，尤其是在提高优化等级的时候。
-O2是推荐的优化等级,O3是最高等级。如果编译软件出现错误，请先检查是否启用了-O3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无缝升级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;php编译完成以后,无缝升级php
只需&lt;code&gt;kill -USR2 php-fpm master 进程的PID&lt;/code&gt;,向&lt;code&gt;php-fpm master&lt;/code&gt;进程发送重启指令,php-fpm的master和worker都会重新加载配置,重新运行起来.
&lt;code&gt;curl -I 127.0.0.1&lt;/code&gt;查看,新版本的fpm已经在工作了.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ps -ylC php-fpm --sort:rss&lt;/code&gt;可以查看所有php-fpm进程的内存消耗.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ps --no-headers -o &amp;quot;rss,cmd&amp;quot; -C php-fpm | awk &#39;{ sum+=$1 } END { printf (&amp;quot;%d%s\n&amp;quot;, sum/NR/1024,&amp;quot;M&amp;quot;) }&#39;&lt;/code&gt;
得出平均每进程消耗的内存.&lt;/p&gt;

&lt;p&gt;8G以上内存生产服务器可以加大子进程数量.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pm.max_children = 70
pm.start_servers = 20
pm.min_spare_servers = 20
pm.max_spare_servers = 35
pm.max_requests = 500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP的数据库长连接有没有效,
实际测试,采用香港服务器远程连接mysql,非长连接模式下耗时约600ms,使用PDO长连接,耗时下降到260ms左右,是有一定作用的.
但是长连接不适用于CLI模式,CLI模式下,php进程退出,连接即断开.&lt;/p&gt;

&lt;h2 id=&#34;安装redis&#34;&gt;安装redis&lt;/h2&gt;

&lt;p&gt;所有redis版本的release见&lt;a href=&#34;http://download.redis.io/releases/&#34;&gt;http://download.redis.io/releases/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;redis编译时,不能使用&lt;code&gt;CFLAGS O3&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
REDIS_VERSION=redis-3.2.3
CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l`
wget http://download.redis.io/releases/${REDIS_VERSION}.tar.gz
tar xzf ${REDIS_VERSION}.tar.gz
cd ${REDIS_VERSION}
make -j$CPU_NUM &amp;amp;&amp;amp; make install
mv /tmp/${REDIS_VERSION}/redis.conf /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装一些其他扩展&#34;&gt;安装一些其他扩展&lt;/h2&gt;

&lt;p&gt;php redis 扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c -O php-redis.zip https://github.com/phpredis/phpredis/archive/php7.zip
unzip php-redis.zip
cd phpredis-php7
phpize
./configure --enable-redis-igbinary
make -j$CPU_NUM  &amp;amp;&amp;amp; make install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装libmemcached,memcached依赖此项&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz
tar -xzf libmemcached-1.0.18.tar.gz -C /tmp
cd /tmp/libmemcached-1.0.18
./configure
make -j$CPU_NUM  &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php memcached 扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c -O php-memcached.zip https://github.com/php-memcached-dev/php-memcached/archive/php7.zip
unzip php-memcached.zip
cd php-memcached-php7
phpize
make -j$CPU_NUM  &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装swoole扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -c -O php-swoole.zip https://github.com/swoole/swoole-src/archive/master.zip
unzip php-swoole.zip
cd swoole-src-master
phpize
./configure
make -j$CPU_NUM  &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;静态编译redis-memcached-opcache到php7&#34;&gt;静态编译redis,memcached,opcache到php7&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;wget -c http://php.net/distributions/${PHP_VERSION}.tar.xz
wget -c -O php-redis.zip https://github.com/phpredis/phpredis/archive/php7.zip
wget -c -O php-memcached.zip https://github.com/php-memcached-dev/php-memcached/archive/php7.zip
tar -xJf ${PHP_VERSION}.tar.xz
unzip php-redis.zip -d ${PHP_VERSION}/ext
unzip php-memcached.zip -d ${PHP_VERSION}/ext
export CFLAGS=&amp;quot;-O3&amp;quot;
cd ${PHP_VERSION}
rm -rf configure
./buildconf --force
./configure --help
./configure --enable-inline-optimization --enable-static=yes --prefix=/tmp --with-config-file-path=/etc --enable-opcache --enable-redis --enable-memcached --disable-memcached-sasl --enable-pcntl --enable-sockets --enable-ftp --enable-bcmath --enable-zip --enable-mbstring --with-iconv --with-mysqli --with-pdo-mysql --with-curl --with-gd --with-openssl
make -j$CPU_NUM
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能出现的错误&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;configure: error: no, sasl.h is not available. Run configure with --disable-memcached-sasl to disable this check&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解决:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install cyrus-sasl-devel&lt;/code&gt; 或 &lt;code&gt;sudo apt-get install libsasl2-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者禁用掉&lt;/p&gt;

&lt;p&gt;搭配PHP的配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server{
	listen 8080;
	server_name 127.0.0.1;
	index index.html index.php;
	root /data/sites/default;
	location / {
		try_files $uri $uri/ /index.php?$args;
	}
	location ~ \.php$ {
		try_files $uri /index.php?$args;
		fastcgi_pass  unix:/var/run/php-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
		include        fastcgi_params;
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个Server实现多个域名,多个主机&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server{
	listen 8080;
	server_name *.git.suconghou.cn;
	index index.php index.html adminer.php;
	if ($host ~* ^((\w+)\.git\.suconghou\.cn)$) {
		set $subdomain $2;
	}
	root /data/git/$subdomain;
	add_header X-Root &amp;quot;$subdomain&amp;quot;;
	fastcgi_connect_timeout 2s;
	fastcgi_send_timeout 3s;
	fastcgi_read_timeout 8s;
	location / {
		try_files $uri $uri/ /index.php?$args;
	}
	location ~ \.php$ {
		try_files $uri /index.php?$args;
		fastcgi_pass  unix:/var/run/php-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
		include        fastcgi_params;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nginx里同&lt;code&gt;fastcgi_params&lt;/code&gt;文件一样,还存在一份配置&lt;code&gt;fastcgi.conf&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;只不过后者多了一行&lt;code&gt;fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们可以直接使用它来替换&lt;code&gt;fastcgi_params&lt;/code&gt;文件配置,同时我们也都添加了try_files检测,也可以略去&lt;code&gt;fastcgi_index&lt;/code&gt;,故可以简写为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ \.php$ {
	try_files $uri /index.php?$args;
	fastcgi_pass  unix:/var/run/php-fpm.sock;
	include fastcgi.conf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意&lt;code&gt;fastcgi_param&lt;/code&gt;指令是数组型的,内层替换外层,但是同级多次使用的时候，是新增而不是替换。注意不要重复使用.&lt;/p&gt;

&lt;p&gt;排除favicon.ico错误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location = /favicon.ico {
log_not_found off;
access_log off;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不允许以.开头的文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ /. {
deny all;
access_log off;
log_not_found off;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;排除找不到robots错误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location = /robots.txt {
allow all;
log_not_found off;
access_log off;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php-fpm 运行时错误
1. [pool www] cannot get gid for group &amp;lsquo;nobody&amp;rsquo;
&lt;code&gt;groupadd nobody&lt;/code&gt;或者
 修改php-fpm.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = www-data
group = www-data
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装mariadb&#34;&gt;安装MariaDB&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;apt-get install mariadb-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程中要求设定一个root密码,安装完&lt;code&gt;service mysql status&lt;/code&gt;查看运行状态,&lt;code&gt;sudo service mysql restart&lt;/code&gt;可以重启&lt;/p&gt;

&lt;h3 id=&#34;编译安装&#34;&gt;编译安装&lt;/h3&gt;

&lt;p&gt;源码下载页 &lt;a href=&#34;http://dev.mysql.com/downloads/mysql/&#34;&gt;http://dev.mysql.com/downloads/mysql/&lt;/a&gt; 选择&lt;code&gt;source code&lt;/code&gt;下载&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpine下编译&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先为mysql添加一个用户运行 &lt;code&gt;addgroup mysql; adduser -H -D -s /sbin/nologin mysql -G mysql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;删除此用户的命令是 &lt;code&gt;deluser mysql&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apk update &amp;amp;&amp;amp; apk upgrade
apk --update add cmake gcc g++
MYSQL_VERSION=mysql-5.7.14
wget http://cdn.mysql.com/Downloads/MySQL-5.7/${MYSQL_VERSION}.tar.gz
tar zxf ${MYSQL_VERSION}.tar.gz
cd ${MYSQL_VERSION}
cmake  -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DCMAKE_C_FLAGS_RELWITHDEBINFO=&amp;quot;-O3 -g&amp;quot; -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=&amp;quot;-O3 -g&amp;quot; -DCMAKE_C_FLAGS=&amp;quot;-O3 -g&amp;quot; -DCMAKE_CXX_FLAGS=&amp;quot;-O3 -g&amp;quot; -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/tmp -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=0 -DWITH_BLACKHOLE_STORAGE_ENGINE=0 -DWITH_EXAMPLE_STORAGE_ENGINE=0 -DWITH_FEDERATED_STORAGE_ENGINE=0 -DWITH_NDB_STORAGE_ENGINE=0 -DWITH_NDBCLUSTER_STORAGE_ENGINE=0  -DWITH_PARTITION_STORAGE_ENGINE=0 -DWITH_PERFSCHEMA_STORAGE_ENGINE=0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mysql5.7 编译时的参数 &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html&#34;&gt;http://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alpine中mysql无法编译,报错&lt;code&gt;No mysys timer support detected!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下面尝试编译mariadb&lt;/p&gt;

&lt;p&gt;mariadb官网 &lt;a href=&#34;https://downloads.mariadb.org/mariadb/&#34;&gt;https://downloads.mariadb.org/mariadb/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apk update &amp;amp;&amp;amp; apk upgrade
apk --update add curl cmake gcc g++ ncurses-dev pcre-dev xz-dev linux-headers
MARIADB_VERSION=mariadb-10.1.17
curl https://mirrors.tuna.tsinghua.edu.cn/mariadb/${MARIADB_VERSION}/source/${MARIADB_VERSION}.tar.gz | tar xz
cd ${MARIADB_VERSION}
cmake  -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITHOUT_TOKUDB=1 -DWITHOUT_MROONGA=1 -DWITHOUT_SPIDER=1 -DWITHOUT_PERFSCHEMA=1  -DWITHOUT_CONNECT=1 -DWITHOUT_XTRADB=1 -DWITHOUT_INNOBASE=1 -DWITHOUT_MYISAMMRG=1 -DWITHOUT_HEAP=1 -DWITHOUT_MYISAM=1 -DWITHOUT_SPHINX=1  -DWITHOUT_FEDERATEDX=1 -DWITHOUT_SEQUENCE=1 -DWITHOUT_CSV=1 -DWITHOUT_MARIA=1
make -j `grep processor /proc/cpuinfo | wc -l`
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改了cmake参数后需要清除编译缓存 &lt;code&gt;make clean;rm CMakeCache.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这些引擎是必须编译的&lt;/p&gt;

&lt;p&gt;xtradb
myisam
perfschema&lt;/p&gt;

&lt;p&gt;添加MySql用户&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;insert into mysql.user (host,user,password) values(&#39;%&#39;,&#39;user&#39;,PASSWORD(&#39;user&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改密码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;update mysql.user set password=PASSWORD(&#39;123456&#39;) where user=&#39;root&#39;;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;show status; // 显示一些系统特定资源的信息，例如，正在运行的线程数量&lt;/p&gt;

&lt;p&gt;show variables; // 显示系统变量的名称和值&lt;/p&gt;

&lt;p&gt;show table status; // 显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间&lt;/p&gt;

&lt;p&gt;如:&lt;code&gt;show table status like &#39;user_%&#39; \G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show warnings;&lt;/code&gt; 查看最后一条警告&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show errors;&lt;/code&gt; 查看最后一条错误&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show full processlist;&lt;/code&gt;查看mysql服务器当前的所有连接&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show status like &#39;uptime&#39;;&lt;/code&gt; 查看在线时间&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show status like &#39;com_%&#39;;&lt;/code&gt;查看使用这些指令的计数,如查看MySQL启动后执行的SELECT语句的次数&lt;code&gt;show status like &#39;com_select&#39;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show status like &#39;Thread_%&#39;;&lt;/code&gt;查看当前的线程状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--查看MySQL本次启动后的运行时间(单位：秒)
show status like &#39;uptime&#39;;

--查看select语句的执行数
show [global] status like &#39;com_select&#39;;

--查看insert语句的执行数
show [global] status like &#39;com_insert&#39;;

--查看update语句的执行数
show [global] status like &#39;com_update&#39;;

--查看delete语句的执行数
show [global] status like &#39;com_delete&#39;;

--查看试图连接到MySQL(不管是否连接成功)的连接数
show status like &#39;connections&#39;;

--查看线程缓存内的线程的数量。
show status like &#39;threads_cached&#39;;

--查看当前打开的连接的数量。
show status like &#39;threads_connected&#39;;

--查看当前打开的连接的数量。
show status like &#39;threads_connected&#39;;

--查看创建用来处理连接的线程数。如果Threads_created较大，你可能要增加thread_cache_size值。
show status like &#39;threads_created&#39;;

--查看激活的(非睡眠状态)线程数。
show status like &#39;threads_running&#39;;


--查看立即获得的表的锁的次数。
show status like &#39;table_locks_immediate&#39;;

--查看不能立即获得的表的锁的次数。如果该值较高，并且有性能问题，你应首先优化查询，然后拆分表或使用复制。
show status like &#39;table_locks_waited&#39;;

--查看创建时间超过slow_launch_time秒的线程数。
show status like &#39;slow_launch_threads&#39;;

--查看查询时间超过long_query_time秒的查询的个数。返回的是当前session的,要查看全局的加上`global`
show status like &#39;slow_queries&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;开机启动脚本&#34;&gt;开机启动脚本&lt;/h2&gt;

&lt;p&gt;Debian and Ubuntu function at &lt;code&gt;/lib/lsb/init-functions&lt;/code&gt;
&lt;code&gt;ln -s  /lib/lsb/init-functions /etc/init.d/functions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
#chkconfig: 2345 90 91

binpath=`which nginx`
prog=$(basename $binpath)
. /etc/init.d/functions
. /etc/sysconfig/network
[ &amp;quot;$NETWORKING&amp;quot; = &amp;quot;no&amp;quot; ] &amp;amp;&amp;amp; exit 0
[ -x $binpath ] || exit 0
[ -f /etc/sysconfig/$prog ] &amp;amp;&amp;amp; . /etc/sysconfig/$prog

start(){
	echo -n $&amp;quot;Starting $prog: &amp;quot;
	$prog || echo -n &amp;quot;$prog already running&amp;quot;
}
stop(){
	echo -n $&amp;quot;Stopping $prog: &amp;quot;
	$prog -s quit
}
restart(){
	stop
	sleep 1
	start
}
reload() {
	echo -n $&amp;quot;Reloading $prog: &amp;quot;
	$prog -s reload
}
case &amp;quot;$1&amp;quot; in
start)
		$1
		;;
stop)
		$1
		;;
restart)
		$1
		;;
reload)
		$1
		;;
*)
echo $&amp;quot;Usage: $0 {start|stop|restart|reload}&amp;quot;
exit 2
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;php-fpm&#34;&gt;php-fpm&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/init.d/php-fpm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
#chkconfig: 2345 90 91

binpath=`which php-fpm`
prog=$(basename $binpath)
. /etc/init.d/functions
. /etc/sysconfig/network
[ &amp;quot;$NETWORKING&amp;quot; = &amp;quot;no&amp;quot; ] &amp;amp;&amp;amp; exit 0
[ -x $binpath ] || exit 0
[ -f /etc/sysconfig/$prog ] &amp;amp;&amp;amp; . /etc/sysconfig/$prog
pidfile=/var/run/php-fpm.pid


start(){
	echo -n $&amp;quot;Starting $prog: &amp;quot;
	$prog || echo -n &amp;quot;$prog already running&amp;quot;
}
stop(){
	echo -n $&amp;quot;Stopping $prog: &amp;quot;
	kill -INT `cat $pidfile`
}
restart(){
	stop
	sleep 1
	start
}
reload() {
	echo -n $&amp;quot;Reloading $prog: &amp;quot;
	kill -USR2 `cat $pidfile`
}
case &amp;quot;$1&amp;quot; in
start)
		$1
		;;
stop)
		$1
		;;
restart)
		$1
		;;
reload)
		$1
		;;
*)
echo $&amp;quot;Usage: $0 {start|stop|restart|reload}&amp;quot;
exit 2
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  添加执行权限
sudo chmod a+x /etc/init.d/nginx
sudo chmod a+x /etc/init.d/php-fpm

##  加入服务
sudo chkconfig --add nginx
sudo chkconfig --add php-fpm

##   开机自启
sudo chkconfig nginx on
sudo chkconfig php-fpm on

## 查看是否开机启动

sudo chkconfig --list nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ubuntu里没有chkconfig
可以使用sysv-rc-conf
&lt;code&gt;sudo apt-get install sysv-rc-conf&lt;/code&gt;,
然后直接使用 sysv-rc-conf 来管理;&lt;/p&gt;

&lt;p&gt;或者&lt;code&gt;sudo sysv-rc-conf nginx on&lt;/code&gt;直接把&lt;code&gt;/etc/init.d/nginx&lt;/code&gt; 加入到系统自动 启动列表中&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>