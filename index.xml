<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>苏苏的博客</title>
    <link>http://blog.suconghou.cn/</link>
    <description>Recent content on 苏苏的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 May 2016 18:21:04 +0800</lastBuildDate>
    <atom:link href="http://blog.suconghou.cn/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用tcpdump</title>
      <link>http://blog.suconghou.cn/post/tcpdump/</link>
      <pubDate>Mon, 16 May 2016 18:21:04 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/tcpdump/</guid>
      <description>&lt;p&gt;各版本 &lt;code&gt;http://www.tcpdump.org/release/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装依赖 &lt;code&gt;yum install -y flex gcc make byacc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export CFLAGS=&amp;quot;-O3&amp;quot;
cd /tmp
wget http://www.tcpdump.org/release/libpcap-1.7.4.tar.gz
tar zxvf libpcap-1.7.4.tar.gz
cd libpcap-1.7.4
./configure
make -j4
cd ../
wget http://www.tcpdump.org/release/tcpdump-4.7.4.tar.gz
tar zxvf tcpdump-4.7.4.tar.gz
cd tcpdump-4.7.4
./configure
make -j4
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装成功后,位于&lt;code&gt;ls -lh /usr/local/sbin/tcpdump&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;不采用&lt;code&gt;CFLAGS=&amp;quot;-O3&amp;quot;&lt;/code&gt;编译为4.3MB,采用&lt;code&gt;CFLAGS=&amp;quot;-O3&amp;quot;&lt;/code&gt;编译后为1.3MB&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tcpdump -h&lt;/code&gt; 查看版本号以及用法&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>编译安装Apache Traffic Server</title>
      <link>http://blog.suconghou.cn/post/use-apache-traffic-server/</link>
      <pubDate>Mon, 09 May 2016 22:24:14 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-apache-traffic-server/</guid>
      <description>

&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;

&lt;p&gt;Centos下编译安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum update -y &amp;amp;&amp;amp; yum install wget gcc g++ gcc-c++ glibc-headers perl openssl openssl-devel tcl-devel libxml2-devel pcre-devel
wget http://apache.fayea.com/trafficserver/trafficserver-6.1.1.tar.bz2
tar xvjf trafficserver-6.1.1.tar.bz2
cd trafficserver-6.1.1
./configure
make &amp;amp;&amp;amp; make install
useradd -s /sbin/nologin trafficserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apache镜像&lt;a href=&#34;http://archive.apache.org/dist/&#34;&gt;http://archive.apache.org/dist/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;国内Apache镜像&lt;a href=&#34;http://apache.fayea.com/&#34;&gt;http://apache.fayea.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编译完成后,就可以使用了,默认是安装在&lt;code&gt;/usr/local/bin&lt;/code&gt;,编译后是比较大&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;total 98M
-rwxr-xr-x 1 root root 692K May  9 14:30 header_rewrite_test
-rwxr-xr-x 1 root root 520K May  9 14:30 traffic_cop
-rwxr-xr-x 1 root root 1.9M May  9 14:30 traffic_crashlog
-rwxr-xr-x 1 root root 259K May  9 14:30 traffic_ctl
-rwxr-xr-x 1 root root 1.9M May  9 14:30 traffic_layout
-rwxr-xr-x 1 root root  41K May  9 14:30 traffic_line
-rwxr-xr-x 1 root root 4.4M May  9 14:30 traffic_logcat
-rwxr-xr-x 1 root root 5.0M May  9 14:30 traffic_logstats
-rwxr-xr-x 1 root root 4.7M May  9 14:30 traffic_manager
-rwxr-xr-x 1 root root  37M May  9 14:30 traffic_sac
-rwxr-xr-x 1 root root  43M May  9 14:30 traffic_server
-rwxr-xr-x 1 root root  42K May  9 14:30 traffic_via
-rwxr-xr-x 1 root root  18K May  9 14:30 trafficserver
-rwxr-xr-x 1 root root 2.1K May  9 14:30 tspush
-rwxr-xr-x 1 root root 5.7K May  9 14:30 tsxs

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行&lt;code&gt;traffic_server -R 1&lt;/code&gt;执行测试,经过一系列测试后,显示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tests Passed: 177
Tests Failed: 0
    REGRESSION_RESULT PARENTSELECTION:                          PASSED
REGRESSION_TEST DONE: PASSED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全部测试通过&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;p&gt;默认的配置文件存放在&lt;code&gt;/usr/local/etc/trafficserver&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;drwxr-xr-x 3 nobody nobody 1.0K May  9 14:30 body_factory
-rw-r--r-- 1 nobody nobody 1.7K May  9 14:30 cache.config
-rw-r--r-- 1 nobody nobody  657 May  9 14:30 cluster.config
-rw-r--r-- 1 nobody nobody 1.9K May  9 14:30 congestion.config
-rw-r--r-- 1 nobody nobody  746 May  9 14:30 hosting.config
-rw-r--r-- 1 nobody nobody 1.8K May  9 14:30 icp.config
-rw-r--r-- 1 nobody nobody 1.2K May  9 14:30 ip_allow.config
-rw-r--r-- 1 nobody nobody  328 May  9 14:30 log_hosts.config
-rw-r--r-- 1 nobody nobody  17K May  9 14:30 logs_xml.config
-rw-r--r-- 1 nobody nobody 1.4K May  9 14:30 parent.config
-rw-r--r-- 1 nobody nobody  261 May  9 14:30 plugin.config
-rw-r--r-- 1 nobody nobody  13K May  9 14:30 records.config
-rw-r--r-- 1 nobody nobody 8.6K May  9 14:30 remap.config
-rw-r--r-- 1 nobody nobody 1.7K May  9 14:30 socks.config
-rw-r--r-- 1 nobody nobody 2.1K May  9 14:30 splitdns.config
-rw-r--r-- 1 nobody nobody 2.7K May  9 14:30 ssl_multicert.config
-rw-r--r-- 1 nobody nobody  76K May  9 14:30 stats.config.xml
-rw-r--r-- 1 nobody nobody 1.9K May  9 14:30 storage.config
-rw-r--r-- 1 root   root     19 May  9 14:30 trafficserver-release
-rw-r--r-- 1 nobody nobody  649 May  9 14:30 vaddrs.config
-rw-r--r-- 1 nobody nobody 1.3K May  9 14:30 volume.config

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;records.config&lt;/code&gt;负责大部分全局的选项设置，即主要配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG proxy.config.reverse_proxy.enabled INT 1                           # 开启反向代理
CONFIG proxy.config.url_remap.remap_required INT 1                        # 1 代理反向代理，0代表正向+反向代理
CONFIG proxy.config.http.cache.http INT 1                                 # 打开http缓存功能
CONFIG proxy.config.cache.ram_cache.size INT 512M                         # RAM 缓存大小
CONFIG proxy.config.http.keep_alive_no_activity_timeout_out INT 120       # 当一个事务结束后同原服务器保持连接的时间
CONFIG proxy.config.cluster.ethernet_interface STRING eth0                # 修改成需要侦听的interface名称

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;remap.config&lt;/code&gt;定义映射规则，用于请求的重定向（rewrite）,反向代理即在此配置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;storage.config&lt;/code&gt; 用于指定磁盘存储&lt;/p&gt;

&lt;p&gt;启动&lt;code&gt;trafficserver start&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在树莓派上使用Docker</title>
      <link>http://blog.suconghou.cn/post/use-docker-on-raspberry/</link>
      <pubDate>Sun, 08 May 2016 20:01:56 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-docker-on-raspberry/</guid>
      <description>

&lt;h2 id=&#34;安装支持docker的系统&#34;&gt;安装支持Docker的系统&lt;/h2&gt;

&lt;p&gt;树莓派官方系统并不支持Docker,需要安装.&lt;/p&gt;

&lt;p&gt;查看 &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;集成Dcoker的树莓派系统&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aria2c -s 50 -c https://downloads.hypriot.com/hypriot-rpi-20160306-192317.img.zip


diskutil list
diskutil unmountdisk /dev/disk2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用以下命令前必须卸载u盘&lt;code&gt;diskutil unmountdisk /dev/disk2&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dd if=hypriotos-rpi-v0.8.0.img of=/dev/disk2 bs=8k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成重启就可以啦,启动后登陆的用户是pirate,密码hypriot&lt;/p&gt;

&lt;p&gt;修改密码:执行&lt;code&gt;passwd&lt;/code&gt;,输入当前密码,输入新密码,再输入新密码,更新完成&lt;/p&gt;

&lt;p&gt;执行&lt;code&gt;exit&lt;/code&gt;退出,或者&lt;code&gt;sudo reboot&lt;/code&gt;重启&lt;/p&gt;

&lt;p&gt;创建用户:&lt;code&gt;useradd -g test -d /home/test1 -s /etc/bash -m test1&lt;/code&gt;
注解：-g 所属组 -d 家目录 -s 所用的SHELL
passwd abc&lt;/p&gt;

&lt;p&gt;获得sudo权限:编辑&lt;code&gt;/etc/sudoers&lt;/code&gt; 加入新添加的用户名&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Studio</title>
      <link>http://blog.suconghou.cn/software/android-studio/</link>
      <pubDate>Fri, 08 Apr 2016 10:08:24 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/software/android-studio/</guid>
      <description>

&lt;h2 id=&#34;下载-android-studio&#34;&gt;下载 Android Studio&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
Android Studio 2.1.1 各平台下载地址,http://www.oschina.net/news/73336/android-studio-2-1-1

Windows: https://dl.google.com/dl/android/studio/ide-zips/2.1.1.0/android-studio-ide-143.2821654-windows.zip (286.7 MiB)

Mac: https://dl.google.com/dl/android/studio/ide-zips/2.1.1.0/android-studio-ide-143.2821654-mac.zip (285.2 MiB)

Linux: https://dl.google.com/dl/android/studio/ide-zips/2.1.1.0/android-studio-ide-143.2821654-linux.zip (284.3 MiB)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;root /home/demo/goproj/src/Test/public;
try_files $uri/index.html $uri.html $uri @goapp;

location @goapp {
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header Host $http_host;
	proxy_redirect off;
	proxy_pass http://localhost:8080;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装android-sdk&#34;&gt;安装android-sdk&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;brew install android-sdk&lt;/code&gt; 或者使用Android Studio SDK Manager&lt;/p&gt;

&lt;p&gt;从ElasticSearch官方的多份文档中可以看到，官方并不建议部署ES时为实例指定超过32GB的内存，但是现在内存的价格非常便宜，一台实体机服务器仅用32G内存显然是非常浪费的。所以我们要尝试在一个服务器上开多个ES实例，以便达到充分利用资源的目的。本文提供了一些ES单机双实例的配置要点，可扩展至单机多实例，供大家来实际参考。&lt;/p&gt;

&lt;p&gt;突破32G&lt;/p&gt;

&lt;p&gt;从ElasticSearch官方的多份文档中可以看到，官方并不建议部署ES时为实例指定超过32GB的内存，例如这些写着大字警告用户的文章： Don’t Cross 32 GB!&lt;/p&gt;

&lt;p&gt;但是现在内存的价格非常便宜，一台实体机服务器仅用32G内存显然是非常浪费的。所以我们要尝试在一个服务器上开多个ES实例，以便达到充分利用资源的目的。&lt;/p&gt;

&lt;p&gt;配置变更&lt;/p&gt;

&lt;p&gt;要做到单机上开多个实例，需要修改ES的默认配置，以下是一些配置要点：&lt;/p&gt;

&lt;p&gt;node.max_local_storage_nodes&lt;/p&gt;

&lt;p&gt;这个配置限制了单节点上可以开启的ES存储实例的个数，我们需要开多个实例，因此需要把这个配置写到配置文件中，并为这个配置赋值为2或者更高。&lt;/p&gt;

&lt;p&gt;http.port&lt;/p&gt;

&lt;p&gt;这个配置是elasticsearch对外提供服务的http端口配置，默认情况下ES会取用9200~9299之间的端口，如果9200被占用就会自动使用9201，在单机多实例的配置中这个配置实际是不需要修改的。&lt;/p&gt;

&lt;p&gt;但是为了更好地进行配置管理，以及和老的配置兼容，我们还是手动将第一个实例的http端口配置为9200，第二个实例配置为9201。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>air</title>
      <link>http://blog.suconghou.cn/project/air/</link>
      <pubDate>Thu, 18 Feb 2016 20:49:27 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/project/air/</guid>
      <description>

&lt;h1 id=&#34;serve-static-files-in-the-air&#34;&gt;serve static files in the air&lt;/h1&gt;

&lt;p&gt;在线解析压缩合并Less,打包压缩Javascript.&lt;/p&gt;

&lt;p&gt;手动压缩打包,执行Lint,静态服务器,缓存版本控制,完美结合CDN&lt;/p&gt;

&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;npm install airs -g&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;基本参数&#34;&gt;基本参数&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;纯静态项目,在项目根目录直接执行&lt;code&gt;air&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;即可开启http服务,直接输出编译后的结果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;PHP项目,项目根目录执行&lt;code&gt;air develop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;会开启静态服务器,同时开启一个PHP Server&lt;/p&gt;

&lt;p&gt;PHP Server 端口号为静态服务器端口号+1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;服务器模式 &lt;code&gt;air server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;编译将做优化和代码压缩&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;指令&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;air lint&lt;/code&gt; 执行Jslint,而不开启http服务,文件修改实时触发&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air lint jsfile1.js jsfile2.js jsfile3.js&lt;/code&gt; 可对指定文件进行Jslint,可对一个或多个文件&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air compress&lt;/code&gt; 在static目录下执行,将会根据static.json文件描述,压缩合并输出到指定文件&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air compress lessfile1.less lessfile2.less&lt;/code&gt; 将对less文件解析压缩,多个less文件将会压缩合并为一个css文件&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;air compress jsfile1.js jsfile2.js&lt;/code&gt; 将对js文件压缩,多个js文件将合并为一个js文件&lt;/p&gt;

&lt;p&gt;可以参数中同时存在less文件和js文件,&lt;code&gt;air compress less1.less file1.js file2.less file3.js&lt;/code&gt;
工具自动按类型分组,less文件和js文件,各自压缩合并,其他文件类型忽略.&lt;/p&gt;

&lt;p&gt;支持jpg,png图片压缩&lt;code&gt;air compress file1.jpg file2.png&lt;/code&gt; 采用&lt;code&gt;tinypng&lt;/code&gt;API接口压缩,效果出众
使用参数&lt;code&gt;--key=your-tinypng-api-key&lt;/code&gt;设定apikey,例如&lt;code&gt;air compress file1.png file2.png --key=abcedf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress&lt;/code&gt; 除了&lt;code&gt;--less&lt;/code&gt;参数,可接受&lt;code&gt;--debug&lt;/code&gt;参数,生成未压缩的代码方便调试&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress --debug&lt;/code&gt; 以debug模式压缩,less文件只解析合并,并不压缩代码,JS文件压缩合并,并不混淆优化&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress --watch&lt;/code&gt; 还可以监视文件变化,自动执行压缩合并&lt;/p&gt;

&lt;p&gt;&lt;code&gt;air compress --o&lt;/code&gt; 开启极限优化压缩,去除console,debugger,优化常量表达式,循环,条件表达式优化等,同样适用于server模式&lt;code&gt;air server --o&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参数-w,使用Jslint,文件修改实时触发,本地开发建议加上&lt;/p&gt;

&lt;p&gt;参数-g,每分钟定时拉取git更新,可用于测试服务器上&lt;/p&gt;

&lt;p&gt;参数-k,设定webhook的密码,服务器模式建议加上&lt;/p&gt;

&lt;p&gt;参数-p,指定服务监听的端口,PHP Server 端口号也会依此变化.&lt;/p&gt;

&lt;p&gt;参数-v,打印出版本并退出&lt;/p&gt;

&lt;p&gt;参数-d,以daemon模式运行&lt;/p&gt;

&lt;p&gt;同时可添加参数 &lt;code&gt;--less=/data/pathto/lesslib&lt;/code&gt; 指定lessLib路径,可接受相对路径和绝对路径&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;目录结构&#34;&gt;目录结构&lt;/h1&gt;

&lt;p&gt;目录结构采用类似 &lt;code&gt;项目名/static/css/style.less&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;项目名可选,Javascript路径类似 &lt;code&gt;项目名/static/js/main.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Http访问 &lt;code&gt;/项目名/static/css/style.css&lt;/code&gt; 即可得出style.less编译后的css.&lt;/p&gt;

&lt;p&gt;注意:如果文件夹内确实存在此文件,则此文件则会如实输出&lt;/p&gt;

&lt;p&gt;因此Http直接访问 &lt;code&gt;/项目名/static/js/main.js&lt;/code&gt; 则会如实输出main.js文件&lt;/p&gt;

&lt;p&gt;工具支持&lt;code&gt;-连接符&lt;/code&gt;配置,因此可以Http访问 &lt;code&gt;/项目名/static/js/main-page.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;则会按顺序合并main.js和page.js两个文件&lt;/p&gt;

&lt;p&gt;less文件同样可以按照此种模式,此外less文件还可以使用索引模式&lt;/p&gt;

&lt;p&gt;使用less自身语法,style.less作为入口,import其他less文件&lt;/p&gt;

&lt;p&gt;此外,如果文件过多,使用连字符麻烦,工具还支持配置文件模式&lt;/p&gt;

&lt;p&gt;在static目录内建立static.json文件,配置Less和Javascript映射&lt;/p&gt;

&lt;p&gt;static.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;static&amp;quot;:
	{
		&amp;quot;js&amp;quot;:
		{
			&amp;quot;all&amp;quot;:[&amp;quot;jquery.min.js&amp;quot;,&amp;quot;etpl.js&amp;quot;,&amp;quot;tpl.js&amp;quot;,&amp;quot;iscroll.js&amp;quot;,&amp;quot;chat.js&amp;quot;,&amp;quot;aside.js&amp;quot;]
		}
		&amp;quot;css&amp;quot;:
		{
			&amp;quot;style&amp;quot;:[&amp;quot;page.less&amp;quot;,&amp;quot;less/admin.less&amp;quot;]
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时,在static目录下执行&lt;code&gt;air compress&lt;/code&gt; 将会将上述js文件压缩为all.min.js&lt;/p&gt;

&lt;p&gt;less文件解析合并压缩为style.min.css&lt;/p&gt;

&lt;p&gt;在static目录下执行&lt;code&gt;air server&lt;/code&gt;,http访问&lt;code&gt;/static/js/all.js&lt;/code&gt; &lt;code&gt;/static/css/style.css&lt;/code&gt; 同样得出上述压缩合并的结果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|____blog
| |____static
| | |____css
| | | |____less
| | | |____style.less
| | |____img
| | |____js
| | | |____lib
|____less
| |____base.less
| |____mixins.less
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;webhook&#34;&gt;Webhook&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/webhook/gitpull&lt;/code&gt; 执行 &lt;code&gt;git pull origin master&lt;/code&gt; 立刻拉取代码更新.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/webhook/viewlog&lt;/code&gt; 查看运行日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/webhook/clear&lt;/code&gt; 执行清理内存操作,立即清除所有日志和编译缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;添加-k参数后,webhook需要密码才能查看.&lt;/p&gt;

&lt;p&gt;在网址后面添加?key=密码即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;性能&#34;&gt;性能&lt;/h1&gt;

&lt;p&gt;所有的Less编译和压缩,Javascript合并与压缩均在第一次访问的时候执行&lt;/p&gt;

&lt;p&gt;并且结果被缓存到内存,下次直接内存读取并输出,直到有文件发生修改才会再次执行编译.&lt;/p&gt;

&lt;p&gt;编译缓存储存到一定数量将会执行GC,存储了2000个编译后的文件后,再次存储将会清除旧的缓存以释放内存&lt;/p&gt;

&lt;p&gt;运行日志积累到一定数量也会清除旧的日志,以节省内存.&lt;/p&gt;

&lt;p&gt;本地开发和线上服务都完全无需担心.&lt;/p&gt;

&lt;h1 id=&#34;缓存&#34;&gt;缓存&lt;/h1&gt;

&lt;p&gt;内存缓存保存最近一次编译的版本号.&lt;/p&gt;

&lt;p&gt;资源版本号以类似&lt;code&gt;style.css?ver=v1&lt;/code&gt;的形式.&lt;/p&gt;

&lt;p&gt;修改版本号后,less内部所有引用资源如&lt;code&gt;background-image&lt;/code&gt;等,都会立即更新引用地址,防止旧的缓存.&lt;/p&gt;

&lt;p&gt;可以放心开启强缓存.&lt;/p&gt;

&lt;h1 id=&#34;共享&#34;&gt;共享&lt;/h1&gt;

&lt;p&gt;根目录下&lt;code&gt;less&lt;/code&gt;文件夹作为共享文件夹.&lt;/p&gt;

&lt;p&gt;其他任何项目里的less文件都可以任意 &lt;code&gt;@import&lt;/code&gt; 此文件夹下的文件,无需指明具体路径.&lt;/p&gt;

&lt;p&gt;可放置mixins等.&lt;/p&gt;

&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;本地开发 &lt;code&gt;air develop -w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;服务器模式 &lt;code&gt;air server -k 123456 -d&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>linux相关操作</title>
      <link>http://blog.suconghou.cn/post/linux/</link>
      <pubDate>Thu, 21 Jan 2016 13:40:53 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux/</guid>
      <description>

&lt;h2 id=&#34;linux实用命令&#34;&gt;Linux实用命令&lt;/h2&gt;

&lt;h2 id=&#34;w&#34;&gt;w&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;w&lt;/code&gt;命令能容清晰的显示,服务器在线时间,负载以及当前登陆的用户&lt;/p&gt;

&lt;h2 id=&#34;vmstat&#34;&gt;vmstat&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;vmstat&lt;/code&gt; 显示开机以来的平均值，而不是前一秒的值
&lt;code&gt;vmstat 1&lt;/code&gt;命令指定一个参数 1 运行，来打印每一秒的统计摘要.
这些列代表的信息:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;r：CPU 中正在运行和等待运行的进程的数量。其提供了一个比平均负载更好的信号来确定 CPU 是否饱和，因为其不包含 I/O。解释：&amp;rdquo;r&amp;rdquo;的值大于了 CPU 的数量就表示已经饱和了。
free：以 kb 为单位显式的空闲内存。如果数字位数很多，说明你有足够的空闲内存。&amp;rdquo;free -m&amp;rdquo; 命令，是下面的第七个命令，其可以更好的说明空闲内存的状态。
si, so：Swap-ins 和 swap-outs。如果它们不是零，则代表你的内存不足了。
us, sy, id, wa, st：这些都是平均了所有 CPU 的 CPU 分解时间。它们分别是用户时间（user）、系统时间（内核）（system）、空闲（idle）、等待 I/O（wait）、以及占用时间（stolen）（被其他访客，或使用 Xen，访客自己独立的驱动域）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CPU 分解时间将会通过用户时间加系统时间确认 CPU 是否为忙碌状态。等待 I/O 的时间一直不变则表明了一个磁盘瓶颈；这就是 CPU 的闲置，因为任务都阻塞在等待挂起磁盘 I/O 上了。你可以把等待 I/O 当成是 CPU 闲置的另一种形式，其给出了为什么 CPU 闲置的一个线索。
对于 I/O 处理来说，系统时间是很重要的。一个高于 20% 的平均系统时间，可以值得进一步的探讨：也许内核在处理 I/O 时效率太低了。&lt;/p&gt;

&lt;p&gt;SIZE(VIRT): 进程使用的地址空间, 如果进程映射了100M的内存, 进程的地址空间将报告为100M内存. 事实上, 这个大小不是一个程序实际使用的内存数.&lt;/p&gt;

&lt;p&gt;RSS(RES): &amp;ldquo;Resident Set Size&amp;rdquo;, 实际驻留&amp;rdquo;在内存中&amp;rdquo;的内存数. 不包括已经交换出去的代码. 举一个例子: 如果你有一个程序使用了100K内存, 操作系统交换出40K内存, 那么RSS为60K. RSS还包括了与其它进程共享的内存区域. 这些区域通常用于libc库等.&lt;/p&gt;

&lt;p&gt;SHARE(SHR): RSS中与其它进程共享的内存部分大小.&lt;/p&gt;

&lt;p&gt;VMSIZE: 一个进程占用的总的地址空间大小. 它包括了没有映射到内存中的页面。&lt;/p&gt;

&lt;p&gt;SZ（DATA）: 映射到内存中的页面, 这些页面仅由进程单独使用. 这也是我们最关心地方: 进程实际占用的内存数。&lt;/p&gt;

&lt;h2 id=&#34;top&#34;&gt;top&lt;/h2&gt;

&lt;h2 id=&#34;free&#34;&gt;free&lt;/h2&gt;

&lt;h2 id=&#34;ssh&#34;&gt;ssh&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ssh-copy-id -i ~/.ssh/id_rsa.pub root@host&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-copy-id -i ~/.ssh/id_rsa.pub -p 26671 root@host&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;磁盘相关&#34;&gt;磁盘相关&lt;/h2&gt;

&lt;h3 id=&#34;dd&#34;&gt;dd&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;把指定的输入文件拷贝到指定的输出文件中,并且在拷贝的过程中可以进行格式转换。&lt;/p&gt;

&lt;p&gt;if =输入文件(或设备名称)
of =输出文件(或设备名称)
bs = bytes 同时设置读/写缓冲区的字节数(等于设置obs和obs)
count = blocks 只拷贝输入的blocks块&lt;/p&gt;

&lt;p&gt;创建一个100M的空文件
&lt;code&gt;dd if=/dev/zero of=hello.txt bs=100m count=1&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;查看当前目录下所有一级子目录文件夹大小&#34;&gt;查看当前目录下所有一级子目录文件夹大小&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;du -h --max-depth=1&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;查看当前目录下所有一级子目录文件夹大小-并排序&#34;&gt;查看当前目录下所有一级子目录文件夹大小 并排序&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;du -h --max-depth=1 |sort&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上两条命令不适用于MacOs,可以使用&lt;code&gt;du -sh *&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;一份linux别名和函数库&#34;&gt;一份Linux别名和函数库&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;alias tree=&amp;quot;find . -print | sed -e &#39;s;[^/]*/;|____;g;s;____|; |;g&#39; &amp;quot;;
alias cls=&amp;quot;cd $1;ls -lh;&amp;quot;;
# 获得你的公网IP地址和主机名。
alias ipinfo=&amp;quot;curl ifconfig.me &amp;amp;&amp;amp; curl ifconfig.me/host&amp;quot;;
# 显示出哪个应用程序连接到网络。
alias listen=&amp;quot;lsof -P -i -n&amp;quot;;
# 显示出活动的端口。
alias port=&#39;netstat -tulanp&#39;
# 统计TCP连接个数
alias tcpstatus=&amp;quot;netstat -n|awk &#39;/^tcp/{++S[\$NF]} END {for(a in S) print a,S[a]}&#39;&amp;quot;
# 回到上层目录
alias ..=&#39;cd ..&#39;
# 去到上两层目录
alias ...=&#39;cd ../..&#39;
# 按列格式化输出mount信息。
alias cmount=&amp;quot;mount | column -t&amp;quot;
# 查看你还有剩下多少内存
alias meminfo=&#39;free -m -l -t&#39;
# 按照文件在磁盘存储的大小排序，显示当前目录的文件列表。
sbs() { du -b --max-depth 1 | sort -nr | perl -pe &#39;s{([0-9]+)}{sprintf &amp;quot;%.1f%s&amp;quot;, $1&amp;gt;=2**30? ($1/2**30, &amp;quot;G&amp;quot;): $1&amp;gt;=2**20? ($1/2**20, &amp;quot;M&amp;quot;): $1&amp;gt;=2**10? ($1/2**10, &amp;quot;K&amp;quot;): ($1, &amp;quot;&amp;quot;)}e&#39;;}
# 找出指定目录中最大的10个文件
largefile() { find . -type f -exec du -k {} \; | sort  -nrk 1 | head; }
# 查看当前目录大于[多少]kb的文件,速度更快
bigfile() { size=${1:-100}; find . -type f -size +&amp;quot;$size&amp;quot;k |xargs  ls  -lh ; }
# 返回你的当前IP地址的地理位置。
getlocation() { lynx -dump http://www.ip-adress.com/ip_tracer/?QRY=$1|grep address|egrep &#39;city|state|country&#39;|awk &#39;{print $3,$4,$5,$6,$7,$8}&#39;|sed &#39;s\ip address flag \\&#39;|sed &#39;s\My\\&#39;;}
# 删除.log.1.gz 或者 .log.1.bz2
delog(){ ls | grep &amp;quot;log.\d\+.\(bz2\|gz\)&amp;quot; | xargs rm}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 这几个Mac不兼容
# 查看最占用内存的前五个进程
topmem()
{
	ps aux | sort -k4nr | head -n5;
}
# 查看某一程序占用的内存
mem()
{
    top -n1 -b | head -n7 | sed &#39;1,6d&#39; &amp;amp;&amp;amp; top -n1 -b | sed &#39;1,7d&#39; | grep --color=auto $1;
    ps aux | grep --color=auto $1 | grep --color=auto -v grep | awk -F &amp;quot; &amp;quot; &#39;{ sum += $6 } END { printf &amp;quot;Total Memory Usage: %.1f MB\n&amp;quot;, sum/1024 }&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 查看你机器的CPU个数,超线程信息
sysinfo() {
physicalNumber=0
coreNumber=0
logicalNumber=0
HTNumber=0
logicalNumber=$(grep &amp;quot;processor&amp;quot; /proc/cpuinfo|sort -u|wc -l)
physicalNumber=$(grep &amp;quot;physical id&amp;quot; /proc/cpuinfo|sort -u|wc -l)
coreNumber=$(grep &amp;quot;cpu cores&amp;quot; /proc/cpuinfo|uniq|awk -F&#39;:&#39; &#39;{print $2}&#39;|xargs)
HTNumber=$((logicalNumber / (physicalNumber * coreNumber)))
echo &amp;quot;****** CPU Information ******&amp;quot;
echo &amp;quot;Logical CPU Number  : ${logicalNumber}&amp;quot;
echo &amp;quot;Physical CPU Number : ${physicalNumber}&amp;quot;
echo &amp;quot;CPU Core Number     : ${coreNumber}&amp;quot;
echo &amp;quot;HT Number           : ${HTNumber}&amp;quot;
echo &amp;quot;*****************************&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解决can-t-set-the-locale-make-sure-lc-and-lang-are-correct&#34;&gt;解决can&amp;rsquo;t set the locale; make sure $LC_* and $LANG are correct&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thomas-krenn.com/en/wiki/Perl_warning_Setting_locale_failed_in_Debian&#34;&gt;https://www.thomas-krenn.com/en/wiki/Perl_warning_Setting_locale_failed_in_Debian&lt;/a&gt;
&lt;code&gt;照着全部做下来&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;vim乱码解决&#34;&gt;Vim乱码解决&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;vim ~/.vimrc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检视和控制systemd的主要命令是systemctl&lt;/p&gt;

&lt;p&gt;详细使用见&lt;a href=&#34;https://wiki.archlinux.org/index.php/systemd_(简体中文)&#34;&gt;https://wiki.archlinux.org/index.php/systemd_(简体中文)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Centos7 用&lt;code&gt;systemctl&lt;/code&gt;取代了&lt;code&gt;service&lt;/code&gt;
旧版本的 &lt;code&gt;service docker start&lt;/code&gt; 改为&lt;code&gt;systemctl start docker&lt;/code&gt;
设置开机启动
旧版本的 &lt;code&gt;chkconfig docker on&lt;/code&gt; 改为 &lt;code&gt;systemctl enable docker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;
&lt;code&gt;/etc/systemd/system/&lt;/code&gt;
后者有较高优先级会覆盖前者&lt;/p&gt;

&lt;p&gt;一般来说著名的linux系统基本上分两大类：&lt;/p&gt;

&lt;p&gt;1.RedHat系列：Redhat、Centos、Fedora等&lt;/p&gt;

&lt;p&gt;2.Debian系列：Debian、Ubuntu等
RedHat 系列
1 常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数”&lt;/p&gt;

&lt;p&gt;2 包管理工具 yum&lt;/p&gt;

&lt;p&gt;3 支持tar包&lt;/p&gt;

&lt;p&gt;Debian系列
1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”&lt;/p&gt;

&lt;p&gt;2 包管理工具 apt-get&lt;/p&gt;

&lt;p&gt;3 支持tar包&lt;/p&gt;

&lt;p&gt;&lt;code&gt;soft rlimits too low. Number of files is 256, should be at least 1000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ulimit -n 1024&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>玩转树莓派</title>
      <link>http://blog.suconghou.cn/post/play-with-raspberrypi/</link>
      <pubDate>Sun, 17 Jan 2016 22:21:49 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/play-with-raspberrypi/</guid>
      <description>

&lt;h2 id=&#34;安装其他操作系统&#34;&gt;安装其他操作系统&lt;/h2&gt;

&lt;h3 id=&#34;centos&#34;&gt;CentOS&lt;/h3&gt;

&lt;p&gt;CentOS7官方支持了AMRV7发布了树莓派2、香蕉派、以及CubitTruck单片机的版本&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mirror.centos.org/altarch/7/isos/armhfp/&#34;&gt;CentOS7官方下载&lt;/a&gt;
root 密码 centos&lt;/p&gt;

&lt;h3 id=&#34;archlinux&#34;&gt;ArchLinux&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://archlinuxarm.org/platforms/armv7/broadcom/raspberry-pi-2&#34;&gt;armv7 raspberry-pi-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://archlinuxarm.org/platforms/armv6/raspberry-pi&#34;&gt;armv6 raspberry-pi&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装osmc&#34;&gt;安装OSMC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://software.opensuse.org/download.html?project=home:osmc&amp;amp;package=osmc-installer&amp;amp;hcolor=17394a&amp;amp;fcolor=17394a&amp;amp;acolor=17394a&#34;&gt;osmc-installer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或者安装OSMC转为树莓派制作的系统&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://osmc.tv/download/&#34;&gt;下载一览&lt;/a&gt;,选择&lt;code&gt;Disk images&lt;/code&gt;,此系统较省资源,默认开机进入OSMC,img.gz 大小约160M&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
axel -n 20 http://download.osmc.tv/installers/diskimages/OSMC_TGT_rbp2_20160502.img.gz
md5sum OSMC_TGT_rbp2_20160502.img.gz
ls -lh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入内存卡,开始烧写到内存卡中.烧写之前需要取消挂载&lt;/p&gt;

&lt;p&gt;&lt;code&gt;diskutil list&lt;/code&gt; 查看你的内存卡的挂载位置,取消挂载&lt;/p&gt;

&lt;p&gt;执行&lt;code&gt;diskutil unmountdisk /dev/disk2&lt;/code&gt; 取消挂载,需要稍等一小会.&lt;/p&gt;

&lt;p&gt;烧写,烧写过程中读卡器不断闪烁.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gzip -dc /tmp/OSMC_TGT_rbp2_20160502.img.gz | sudo dd of=/dev/disk2 bs=8k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dd if=/dev/zero of=hello.txt bs=1024&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;除了OSMC默认皮肤,还有一些好看的皮肤推荐&lt;/p&gt;

&lt;p&gt;1.&lt;a href=&#34;http://forum.kodi.tv/showthread.php?tid=187071&#34;&gt;Eminence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&#34;http://forum.kodi.tv/showthread.php?tid=214146&#34;&gt;Bello&lt;/a&gt; 看github,支持中文&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://forum.kodi.tv/forumdisplay.php?fid=26&#34;&gt;官方论坛&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSMC默认的ssh连接用户是&lt;/p&gt;

&lt;h2 id=&#34;安装openelec&#34;&gt;安装openelec&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://openelec.tv/get-openelec&#34;&gt;openelec&lt;/a&gt; 镜像下载,osmc是基于debain的,系统更加完善.此系统相比osmc更加精简,是专为跑kodi精简的系统. img.gz 大小约102M&lt;/p&gt;

&lt;h2 id=&#34;安装xbian&#34;&gt;安装xbian&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xbian.org/&#34;&gt;http://www.xbian.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;与openelec,osmc都是类似,img.gz较大,大约316MB&lt;/p&gt;

&lt;h2 id=&#34;安装chromeos&#34;&gt;安装ChromeOs&lt;/h2&gt;

&lt;p&gt;ChromeOs已经有支持树莓派的版本了,&lt;a href=&#34;www.chromiumosforsbc.org&#34;&gt;www.chromiumosforsbc.org&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用镜像加速homebrew</title>
      <link>http://blog.suconghou.cn/post/homebrew-speedup/</link>
      <pubDate>Fri, 15 Jan 2016 12:56:53 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/homebrew-speedup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mirrors.ustc.edu.cn/&#34;&gt;中国科大镜像站&lt;/a&gt; 提供 Debian, Ubuntu, Fedora, Archlinux, CentOS 等多个发行版的官方源.
还有brew 的二进制源,brew使用此配置能大大提升速度.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local
git remote set-url origin git://mirrors.ustc.edu.cn/brew.git
git remote -v
brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改二进制源见&lt;a href=&#34;https://lug.ustc.edu.cn/wiki/mirrors/help/homebrew-bottles&#34;&gt;https://lug.ustc.edu.cn/wiki/mirrors/help/homebrew-bottles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;即&lt;code&gt;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;brew config&lt;/code&gt; 查看&lt;code&gt;ORIGIN&lt;/code&gt;和&lt;code&gt;HOMEBREW_BOTTLE_DOMAIN&lt;/code&gt;已经是新的&lt;code&gt;mirrors.ustc.edu.cn&lt;/code&gt;即为配置成功&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew list&lt;/code&gt; 列出所有安装的模块&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew search mysql&lt;/code&gt; 查找&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew commands&lt;/code&gt; 查看所有命令&lt;/p&gt;

&lt;p&gt;安装（需要 Ruby）：
&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;搜索：&lt;code&gt;brew search mysql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查询：&lt;code&gt;brew info mysql&lt;/code&gt; 主要看具体的信息，比如目前的版本，依赖，安装后注意事项等&lt;/p&gt;

&lt;p&gt;更新：&lt;code&gt;brew update&lt;/code&gt; 这会更新 Homebrew 自己，并且使得接下来的两个操作有意义——&lt;/p&gt;

&lt;p&gt;检查过时（是否有新版本）：&lt;code&gt;brew outdated&lt;/code&gt; 这回列出所有安装的软件里可以升级的那些&lt;/p&gt;

&lt;p&gt;升级：&lt;code&gt;brew upgrade&lt;/code&gt; 升级所有可以升级的软件们&lt;/p&gt;

&lt;p&gt;清理：&lt;code&gt;brew cleanup&lt;/code&gt; 清理不需要的版本极其安装包缓存&lt;/p&gt;

&lt;p&gt;一些必备的软件.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; brew install vim git git-lfs subversion node go python3 nginx hugo openssl htop ffmpeg xz aria2 wget axel memcached redis mcrypt md5sha1sum fswatch mpv
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chrome浏览器安装</title>
      <link>http://blog.suconghou.cn/post/broswer-chrome/</link>
      <pubDate>Thu, 14 Jan 2016 17:11:34 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/broswer-chrome/</guid>
      <description>

&lt;h2 id=&#34;配置chrome跨域&#34;&gt;配置Chrome跨域&lt;/h2&gt;

&lt;p&gt;Chrome 浏览器配置可以跨域&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --disable-web-security&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open -a &amp;quot;Google Chrome&amp;quot; --args --disable-web-security&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;必须完全退出Chrome,再使用上述方法.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crontab与自动备份</title>
      <link>http://blog.suconghou.cn/post/use-crontab-in-your-server/</link>
      <pubDate>Tue, 12 Jan 2016 13:10:21 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-crontab-in-your-server/</guid>
      <description>

&lt;h2 id=&#34;crontab使用&#34;&gt;Crontab使用&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;crontab -l&lt;/code&gt; 查看当前用户的crontab列表
使用&lt;code&gt;crontab -e&lt;/code&gt;开始编辑规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;基本格式 :
*　　*　　*　　*　　*　　command
分　 时 　日 　月　 周　 命令

* 第1列表示分钟1～59 每分钟用*或者*/1表示
* 第2列表示小时1～23（0表示0点）
* 第3列表示日期1～31
* 第4列表示月份1～12
* 第5列标识号星期0～6（0表示星期天）
* 第6列要运行的命令
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;禁止Crontab产生邮件:
在crontab末尾加上&lt;code&gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt; 或者 &lt;code&gt;&amp;gt; &amp;amp;&amp;gt; /dev/null&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 1 5 10 * /path/to/script.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
0 1 5 10 * /path/to/script.sh &amp;gt; &amp;amp;&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;定时备份数据库&#34;&gt;定时备份数据库&lt;/h2&gt;

&lt;p&gt;先写好shell脚本存入&lt;code&gt;/home/cron1.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;quot;root&amp;quot;
pass=&amp;quot;root&amp;quot;
host=&amp;quot;127.0.0.1&amp;quot;
port=&amp;quot;3306&amp;quot;
dbs=&amp;quot;db1 db2 db3&amp;quot;
dir=&amp;quot;/data/backup/&amp;quot;

nowDate=`date &#39;+%Y%m%d&#39;`
nowTime=`date &#39;+%H%M&#39;`
backupdir=$dir$nowDate
timeold=`date -d &amp;quot;-1 week&amp;quot; +%Y%m%d`
delold=$dir$timeold
if [ ! -d $backupdir ]; then
  mkdir -p $backupdir
fi
if [ -d $delold ]; then
  rm -rf $delold
fi
for i in $dbs
	do
		backupFile=$backupdir/$i-$nowTime.sql
		mysqldump -u$user -p$pass -h$host -P$port --databases $i &amp;gt; $backupFile
		xz $backupFile
	done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后定时任务&lt;code&gt;crontab -e&lt;/code&gt; 每5个小时备份一次数据库.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 */5 * * * sh /home/cron1.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用此脚本建议每20个小时以内备份一次数据库,此脚本保留最近7天备份,删除过期备份&lt;/p&gt;

&lt;h2 id=&#34;增量备份数据库&#34;&gt;增量备份数据库&lt;/h2&gt;

&lt;p&gt;先写好shell脚本存入&lt;code&gt;/home/cron2.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;quot;root&amp;quot;
pass=&amp;quot;root&amp;quot;
host=&amp;quot;127.0.0.1&amp;quot;
port=&amp;quot;3306&amp;quot;
storedb=&amp;quot;backup&amp;quot;
backup=&amp;quot;db1.table1 db1.table2&amp;quot;

mysql -u$user -p$pass -h$host -P$port -e &amp;quot;create database if not exists $storedb&amp;quot;
for i in $backup
	do
		table=${i##*.}
		sql=&amp;quot;create table if not exists $storedb.$table like $i;replace into $storedb.$table  select * from $i ;&amp;quot;
		mysql -u$user -p$pass -h$host -P$port -e &amp;quot;$sql&amp;quot;
	done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据表从源数据库中增量备份至备份数据库中的同名数据表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 */20 * * * sh /home/cron2.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每20个小时增量备份一次&lt;/p&gt;

&lt;h2 id=&#34;更高级的文件实时同步&#34;&gt;更高级的文件实时同步&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Mac&lt;/code&gt;上可以使用&lt;code&gt;fswatch + rsync&lt;/code&gt;进行实时同步&lt;/p&gt;

&lt;p&gt;首先安装&lt;code&gt;fswatch&lt;/code&gt;,&lt;code&gt;rsync&lt;/code&gt;应该是自带了&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install fswatch&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- fswatch -o ./ | xargs -n1 -I{} md5 --&amp;gt;

fswatch -0 /tmp | xargs -0 -n 1 echo $1

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shell基本语法&#34;&gt;Shell基本语法&lt;/h2&gt;

&lt;p&gt;声明数组&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arr=(item1 item2 item3)&lt;/code&gt; 使用空格分开&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;echo ${arr[*]}&lt;/code&gt; 或者 &lt;code&gt;echo ${arr[@]}&lt;/code&gt; 可以查看数组内的元素,&lt;code&gt;echo $arr&lt;/code&gt;只能取得第一个元素&lt;/p&gt;

&lt;p&gt;要取得数组长度,只需在名字前面加一个#,如&lt;code&gt;echo ${#arr[*]}&lt;/code&gt; 或者 &lt;code&gt;echo ${#arr[@]}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;数组下标以0开始,取得第二个元素为&lt;code&gt;echo ${arr[1]}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;赋值使用&lt;code&gt;arr[5]=5555&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL性能优化</title>
      <link>http://blog.suconghou.cn/post/improve-mysqldb/</link>
      <pubDate>Mon, 11 Jan 2016 12:02:40 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/improve-mysqldb/</guid>
      <description>

&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;

&lt;p&gt;配置文件一般放在&lt;code&gt;/etc/my.cnf&lt;/code&gt; 或者 &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;默认的配置文件示例存放于&lt;code&gt;/usr/share/mysql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;各个文件适配不同内存的配置&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;内存大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;my-small.cnf&lt;/td&gt;
&lt;td&gt;&amp;lt;= 64M 不经常开启mysql&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-medium.cnf&lt;/td&gt;
&lt;td&gt;32M–64M 经常其他程序搭配mysql&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-large.cnf&lt;/td&gt;
&lt;td&gt;512M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-huge.cnf&lt;/td&gt;
&lt;td&gt;1G-2G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;my-innodb-heavy-4G.cnf&lt;/td&gt;
&lt;td&gt;4GB 使用InnoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;使用&lt;code&gt;SHOW VARIABLES&lt;/code&gt;来查看系统参数,通过&lt;code&gt;SHOW STATUS&lt;/code&gt;来判断系统状态&lt;/p&gt;

&lt;p&gt;show 命令还有很多用途&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;show databases 或show tables from database_name&lt;/td&gt;
&lt;td&gt;显示mysql中所有数据库的名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show tables&lt;/td&gt;
&lt;td&gt;显示当前数据库中所有表的名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show columns from table_name from database_name&lt;/td&gt;
&lt;td&gt;显示表中列名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show grants for user_name&lt;/td&gt;
&lt;td&gt;显示一个用户的权限，显示结果类似于grant命令&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show table status&lt;/td&gt;
&lt;td&gt;显示当前使用或者指定的database中的每个表的信息。&lt;br&gt;信息包括表类型和表的最新更新时间。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show index from table_name&lt;/td&gt;
&lt;td&gt;显示表的索引&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show status&lt;/td&gt;
&lt;td&gt;显示一些系统特定资源的信息,例如,正在运行的线程数量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show variables&lt;/td&gt;
&lt;td&gt;显示系统变量的名称和值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show processlist&lt;/td&gt;
&lt;td&gt;显示系统中正在运行的所有进程，也就是当前正在执行的查询。&lt;br&gt;大多数用户可以查看他们自己的进程，但是如果他们拥有process权限，&lt;br&gt;就可以查看所有人的进程，包括密码&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show engies&lt;/td&gt;
&lt;td&gt;显示安装以后可用的存储引擎和默认引擎&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show innodb status&lt;/td&gt;
&lt;td&gt;显示innoDB存储引擎的状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show logs&lt;/td&gt;
&lt;td&gt;显示BDB存储引擎的日志&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show warnings&lt;/td&gt;
&lt;td&gt;显示最后一个执行的语句所产生的错误、警告和通知&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;show errors&lt;/td&gt;
&lt;td&gt;只显示最后一个执行语句所产生的错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;小内存优化&#34;&gt;小内存优化&lt;/h2&gt;

&lt;p&gt;依据&lt;code&gt;my-small.cnf&lt;/code&gt;为模板&lt;/p&gt;

&lt;p&gt;主要指标:存储引擎,key_buffer,table_cache,max_connections,thread_concurrency,query_cache,thread_stack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;存储引擎&lt;/strong&gt;:
如果不使用 BDB table 和 InnoDB table 的话，加入下面2行关闭不需要的表类型很有必要，关闭 innodb 可以省下大量内存，虽然 InnoDB 好处多多但是在一个64MB的 VPS 上并不能体现出来，并且很占内存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;key_buffer&lt;/strong&gt;:
用来缓存 tables keys 和 indexes，增加这个值可以更好的处理索引，读和写都需要索引,这里设置成16K足够了.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;table_cache&lt;/strong&gt;:
所有线程打开的表的数量，增加值可以增大 MySQL 的文件描述符数量，避免频繁的打开表，原始 my-small.cnf 中 table_cache 设置成4有点小，一个 wordpress 的页面通常会涉及到10个左右的表，其他的程序比如 Drupal，MediaWiki 会涉及到更多，将table_cache改为8。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;max_connections&lt;/strong&gt;:
数据库最大的连接数量，可以根据自己博客/网站的访问量来定这个值,如果博客/网站经常出现：Too many connections 错误的信息说明需要增大 max_connections 的值.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;thread_concurrency&lt;/strong&gt;:
最大并发线程数，通常设置为 CPU核数量×2，在 VPS 宿主机上如果服务器有2颗物理 CPU，而每颗物理 CPU 又支持 H.T 超线程（一个处理器上整合了两个逻辑处理器单元），所以实际取值为4 × 2 ＝ 8。
如果我们在优化 php.ini 的时候设置了同时只有2个 php-cgi 运行的话，那么我们也应该只设置2个 MySQL 线程同时运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;query_cache&lt;/strong&gt;:
对于博客/新闻网站来说，用得最多的就是查询，所以需要加入 query cache 的设置。query_cache_size 是执行查询所使用的缓冲大小。
query_cache_limit指定单个查询能够使用的缓冲区大小，缺省为1M,结果集超过这个大小将不会被缓存。&lt;/p&gt;

&lt;p&gt;与查询缓冲有关的参数还有query_cache_type、query_cache_limit、query_cache_min_res_unit。&lt;/p&gt;

&lt;p&gt;query_cache_type指定是否使用查询缓冲，可以设置为0、1、2,分别代表了off、on、demand,如果是0，那么query cache 是关闭的。如果是1，那么查询总是先到查询缓存中查找，除非使用了sql_no_cache。如果是2，那么，只有使用 sql_cache的查询，才会去查询缓存中查找.&lt;/p&gt;

&lt;p&gt;query_cache_limit指定单个查询能够使用的缓冲区大小，缺省为1M。
query_cache_min_res_unit是在4.1版本以后引入的，它指定分配缓冲区空间的最小单位，缺省为4K。
检查状态值Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多，这就表明查询结果都比较小，此时需要减小 query_cache_min_res_unit。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;thread_stack&lt;/strong&gt;:
用来存放每个线程的标识信息，如线程 id，线程运行时环境等，可以通过设置 thread_stack 来决定给每个线程分配多大的内存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sort_buffer_size&lt;/strong&gt;:
每个需要排序的线程分配的缓冲区大小，增加该值可以加速 order by 和 group by 的操作。注意：该参数是以每个连接分配内存，也就是说，如果有16个连接，sort_buffer_size 为 64K，那么实际分配的内存为：16 × 64K = 1MB。如果设置的缓存大小无法满足需要，MySQL 会将数据写入磁盘来完成排序。因为磁盘操作和内存操作不在一个数量级，所以 sort_buffer_size 对排序的性能影响很大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read_buffer_size&lt;/strong&gt;:
顺序读取数据时的缓冲区大小，与 sort_buffer_size 一样，该参数分配的内存也是以每连接为单位的。
当需要顺序读取数据的时候，如无法使用索引的情况下的全表扫描，全索引扫描等。在这种时候，MySQL 按照数据的存储顺序依次读取数据块，每次读取的数据快首先会暂存在 read_buffer_size 中，当 buffer 空间被写满或者全部数据读取结束后，再将 buffer 中的数据返回给上层调用者，以提高效率。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read_rnd_buffer_size&lt;/strong&gt;:
随机读取数据时的缓冲区大小，与顺序读相对应。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;net_buffer_size&lt;/strong&gt;:
用来存放客户端连接线程的连接信息和返回客户端的结果集的缓存大小。当 MySQL 接到请求后，产生返回结果集时，会在返回给请求线程之前暂存在在这个缓存中，等积累到一定大小的时候才开始向客户端发送，以提高网络效率。不 过，net_buffer_size 所设置的仅仅只是初始大小，MySQL 会根据实际需要自行申请更多的内存，但最大不会超过 max_allowed_packet。&lt;/p&gt;

&lt;p&gt;skip-locking用来避免 MySQL 外部锁定，减少出错几率，增强稳定性。&lt;/p&gt;

&lt;p&gt;以上: 64M VPS数据库配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;skip-bdb
skip-innodb

key_buffer = 16K
table_cache = 8

max_connections = 16
thread_concurrency = 2

query_cache_limit = 256K
query_cache_size = 4M
query_cache_type = 1

sort_buffer_size = 64K
read_buffer_size = 256K
read_rnd_buffer_size = 256K
net_buffer_length = 2K
thread_stack = 64K
skip-locking

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;thread_cache_size 优化配置&lt;/p&gt;

&lt;h3 id=&#34;packet-for-query-is-too-large&#34;&gt;Packet for query is too large&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;show variables like &#39;%max%&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当update或者insert的内容过大时,&lt;code&gt;max_allowed_packet&lt;/code&gt;的值过小,会引起sql异常,需要改大;其默认值为1048576(1M)，
修改&lt;code&gt;my.cnf&lt;/code&gt;  &lt;code&gt;max_allowed_packet = 20M&lt;/code&gt;
或者零时动态设置 &lt;code&gt;set global max_allowed_packet = 20*1024*1024&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看是否生效,零时修改一般断开后重新连接即可生效.
&lt;code&gt;show variables like &#39;%max_allowed_packet%&#39;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1G  ---&amp;gt; 8
2G  ---&amp;gt; 16
3G  ---&amp;gt; 32
4G  ---&amp;gt; 64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数据库优化&#34;&gt;数据库优化&lt;/h2&gt;

&lt;p&gt;查看query_cache相关配置, 默认这个开关是关闭的,就是禁止使用query_cache
query_cache_type 为0,是关闭的&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show variables where variable_name like &#39;%query_cache%&#39;&lt;/code&gt; 单独查询一个使用 &lt;code&gt;select @@query_cache_type&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+------------------------------+----------+
| Variable_name                | Value    |
+------------------------------+----------+
| have_query_cache             | YES      |
| query_cache_limit            | 262144   |
| query_cache_min_res_unit     | 4096     |
| query_cache_size             | 33554432 |
| query_cache_strip_comments   | OFF      |
| query_cache_type             | ON       |
| query_cache_wlock_invalidate | OFF      |
+------------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;query_cache_size&lt;/code&gt;为0,没有分配缓存空间,如果配置了&lt;code&gt;query_cache_size = 4M&lt;/code&gt;,这里会显示具体的字节&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show status like &#39;%Qcache%&#39;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+-------------------------+----------+
| Variable_name           | Value    |
+-------------------------+----------+
| Qcache_free_blocks      | 1        |
| Qcache_free_memory      | 26444248 |
| Qcache_hits             | 159619   |
| Qcache_inserts          | 27496    |
| Qcache_lowmem_prunes    | 0        |
| Qcache_not_cached       | 180      |
| Qcache_queries_in_cache | 6922     |
| Qcache_total_blocks     | 13850    |
+-------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果&lt;code&gt;Qcache_lowmem_prunes&lt;/code&gt;的值非常大，则表明经常出现缓冲不够的情况，如果&lt;code&gt;Qcache_hits&lt;/code&gt;的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；
如果&lt;code&gt;Qcache_hits&lt;/code&gt;的值不大，则表明你的查询重复率很低，这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入&lt;code&gt;SQL_NO_CACHE&lt;/code&gt;可以明确表示不使用查询缓冲。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;查询缓存利用率在80%以上而且Qcache_lowmem_prunes &amp;gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查询缓存命中率 = Qcache_hits / ( Qcache_hits + Qcache_inserts ) * 100%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;命中率越高,效果越好&lt;/p&gt;

&lt;h2 id=&#34;各个数据库引擎对比&#34;&gt;各个数据库引擎对比&lt;/h2&gt;

&lt;p&gt;主要讨论引擎: MyISAM存储引擎 InnoDB存储引擎 Memory存储引擎&lt;/p&gt;

&lt;h3 id=&#34;myisam存储引擎&#34;&gt;MyISAM存储引擎&lt;/h3&gt;

&lt;p&gt;支持B-tree/FullText/R-tree索引类型
锁级别是表锁,表锁的开销小，加锁快;锁粒度大，发生锁冲突的概率较高，并发度低；表锁适合查询
不支持事务性，也不支持外键。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;并发不高，不需要支持事务,需要进行全文搜索,读次数大于写次数,适合数据量不是特别大并发不太高的大部分场合&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;innodb存储引擎&#34;&gt;InnoDB存储引擎&lt;/h3&gt;

&lt;p&gt;支持事务性，支持回滚,支持Hash/B-tree索引类型
锁级别是行锁，行锁在锁定上带来的消耗大于表锁，但是在系统并发访问量较高时，InnoDB整体性能远高于MyISAM。
InnoDB的索引不仅缓存索引本身，也缓存数据，所以InnoDB需要更大的内存。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;表数据量超过千万，高并发,频繁更新大字段,安全性和可用性要求高,更适合与大并发大数据量的场合，除了支持事务，在高并发时行级锁的优势就会发挥出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;memory存储引擎&#34;&gt;Memory存储引擎&lt;/h3&gt;

&lt;p&gt;内存级的存储引擎，它将所有数据都存储在内存中，所以它能够存储的数据量是比较小的
Memory的锁级别和MyISAM一样，是表锁；并且不支持事务性。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;适合与性能要求高数据量小的地方，和缓存的效果类似。&lt;/p&gt;

&lt;p&gt;innodb查询表的行数需要全表扫描，速度会非常慢，查询1千万行数据的表最多时要6、7s,而myisam因为保存了总行数是极快的。
在一个进程操作的情况下，myisam的更新和查询速度都会稍快于innodb。memory引擎插入和查询修改的速度都极快，但支持的数据量有限,不支持BLOB/TEXT数据类型,适用于单表几万行数据.&lt;/p&gt;

&lt;p&gt;MEMORY表最大值受系统变量 max_heap_table_size 限制，默认为16MB，要改变MEMORY表大小限制，需要改变max_heap_table_size 的值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;锁&#34;&gt;锁&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;读锁：读操作时增加锁，叫共享锁，S-lock特征是阻塞其他客户端的写操作，不阻塞读操作&lt;/p&gt;

&lt;p&gt;写锁：写操作时增加锁，叫独占锁或排他锁，X-lock特征是阻塞其他客户端的读、写操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;锁定粒度-范围&#34;&gt;锁定粒度（范围）&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;行级：提升并发性，锁定开销大&lt;/p&gt;

&lt;p&gt;表级：不利于并发性，锁定开销小&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>ffmpeg安装使用</title>
      <link>http://blog.suconghou.cn/post/ffmpeg-usage/</link>
      <pubDate>Mon, 11 Jan 2016 10:19:20 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/ffmpeg-usage/</guid>
      <description>

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;yum install autoconf automake cmake freetype-devel gcc gcc-c++ git libtool make mercurial nasm pkgconfig zlib-devel
mkdir ~/ffmpeg_sources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yasm is an assembler used by x264 and FFmpeg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 git://github.com/yasm/yasm.git
cd yasm
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot;
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;H.264 video encoder.
Requires ffmpeg to be configured with &lt;code&gt;--enable-gpl --enable-libx264&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 git://git.videolan.org/x264
cd x264
PKG_CONFIG_PATH=&amp;quot;$HOME/ffmpeg_build/lib/pkgconfig&amp;quot; ./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot; --enable-static
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;H.265/HEVC video encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-gpl --enable-libx265&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
hg clone https://bitbucket.org/multicoreware/x265
cd ~/ffmpeg_sources/x265/build/linux
cmake -G &amp;quot;Unix Makefiles&amp;quot; -DCMAKE_INSTALL_PREFIX=&amp;quot;$HOME/ffmpeg_build&amp;quot; -DENABLE_SHARED:bool=off ../../source
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AAC audio encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libfdk-aac&lt;/code&gt; (and &lt;code&gt;--enable-nonfree&lt;/code&gt; if you also included &lt;code&gt;--enable-gpl&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 git://git.code.sf.net/p/opencore-amr/fdk-aac
cd fdk-aac
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MP3 audio encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libmp3lame&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
curl -L -O http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
tar xzvf lame-3.99.5.tar.gz
cd lame-3.99.5
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot; --disable-shared --enable-nasm
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opus audio decoder and encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libopus&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone git://git.opus-codec.org/opus.git
cd opus
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ogg bitstream library. Required by libtheora and libvorbis.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
curl -O http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gz
tar xzvf libogg-1.3.2.tar.gz
cd libogg-1.3.2
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vorbis audio encoder. Requires libogg. Requires ffmpeg to be configured with &lt;code&gt;--enable-libvorbis&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
curl -O http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.4.tar.gz
tar xzvf libvorbis-1.3.4.tar.gz
cd libvorbis-1.3.4
LDFLAGS=&amp;quot;-L$HOME/ffmeg_build/lib&amp;quot; CPPFLAGS=&amp;quot;-I$HOME/ffmpeg_build/include&amp;quot; ./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --with-ogg=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make
make install
make distclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VP8/VP9 video encoder. Requires ffmpeg to be configured with &lt;code&gt;--enable-libvpx&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
cd libvpx
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-examples
make
make install
make clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compilation is now complete and ffmpeg (also ffprobe, ffserver, lame, and x264) should now be ready to use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/ffmpeg_sources
git clone https://github.com/FFmpeg/FFmpeg ffmpeg
cd ffmpeg
PKG_CONFIG_PATH=&amp;quot;$HOME/ffmpeg_build/lib/pkgconfig&amp;quot; ./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --extra-cflags=&amp;quot;-I$HOME/ffmpeg_build/include&amp;quot; --extra-ldflags=&amp;quot;-L$HOME/ffmpeg_build/lib&amp;quot; --bindir=&amp;quot;$HOME/bin&amp;quot; --pkg-config-flags=&amp;quot;--static&amp;quot; --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265
make -j4
make install
make distclean
hash -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的可执行文件存放在&lt;code&gt;~/bin&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;下载官方的静态编译的linux通用二进制包&#34;&gt;下载官方的静态编译的Linux通用二进制包&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://johnvansickle.com/ffmpeg/&#34;&gt;ffmeg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.0正式版已发布,&lt;a href=&#34;http://www.oschina.net/news/70742/ffmpeg-3-0-final&#34;&gt;查看详情&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git基本使用</title>
      <link>http://blog.suconghou.cn/post/git-usage/</link>
      <pubDate>Fri, 08 Jan 2016 23:43:00 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/git-usage/</guid>
      <description>

&lt;h1 id=&#34;git配置&#34;&gt;git配置&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.email &amp;quot;1126045770@qq.com&amp;quot;
git config --global user.name &amp;quot;sucongohu&amp;quot;

git config --global core.autocrlf false
git config --global color.ui true
git config --global credential.helper store

git config --global alias.lg &amp;quot;log --graph --all --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci,%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;以上分别是设置用户信息,禁止转换换行符,颜色高亮,记住密码,设置别名列出分支图. 设置别名后,可以使用 &lt;code&gt;git lg&lt;/code&gt; 查看各个分支关系&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参数  说明
%H  commit hash
%h  commit short hash
%T  tree hash
%t  tree short hash
%P  parent hash
%p  parent short hash
%an 作者名字
%aN .mailmap 中对应的作者名字
%ae 作者邮箱
%aE .mailmap 中对应的作者邮箱
%ad –date=制定的日期格式
%aD RFC2822 日期格式
%ar 日期格式，例如：1 day ago
%at UNIX timestamp 日期格式
%ai ISO 8601 日期格式
%cn 提交者名字
%cN .mailmap 对应的提交的名字
%ce 提交者邮箱
%cE .mailmap 对应的提交者的邮箱
%cd –data=制定的提交日期的格式
%cD RFC2822 提交日期的格式
%cr 提交日期的格式，例如：1day ago
%ct UNIX timestamp 提交日期的格式
%ci ISO 8601 提交日期的格式
%d  ref 名称
%e  encoding
%s  commit 信息标题
%f  过滤 commit 信息的标题使之可以作为文件名
%b  commit 信息内容
%N  commit notes
%gD reflog selector, e.g., refs/stash@{1}
%gd shortened reflog selector, e.g., stash@{1}
%gs reflog subject
%Cred   切换至红色
%Cgreen 切换至绿色
%Cblue  切换至蓝色
%Creset 重设颜色
%C(color)   制定颜色，as described in color.branch.* config option
%m  left right or boundary mark
%n  换行
%%  a raw %
%x00    print a byte from a hex code
%w([[,[,]]])    switch line wrapping, like the -w option of git-shortlog(1).&lt;/p&gt;

&lt;p&gt;一个命令推送到多个服务端&lt;code&gt;vim .git/config&lt;/code&gt; ,添加一个区段,例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[remote &amp;quot;all&amp;quot;]
        url = https://git.oschina.net/suconghou/mvc.git
        url = https://suconghou@git.coding.net/suconghou/mvc.git
        url = https://github.com/suconghou/mvc.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以后可以使用&lt;code&gt;git push all master&lt;/code&gt;一次推送到多个后端&lt;/p&gt;

&lt;h1 id=&#34;git分支管理&#34;&gt;git分支管理&lt;/h1&gt;

&lt;h2 id=&#34;1-创建分支&#34;&gt;1.创建分支&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;2-切换到分支&#34;&gt;2.切换到分支&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git checkout &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;3-创建一个分支并切换过去&#34;&gt;3.创建一个分支并切换过去&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git checkout -b &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git checkout -b &amp;lt;分支名&amp;gt; master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后面是跟一个master说明创建的develop分支是基于当前的master， 如果当前就在master分支，则可以不写。 如果当前分支HEAD指向的是别的分支，又想基于master分支创建，就必须写master&lt;/p&gt;

&lt;h2 id=&#34;4-分支合并&#34;&gt;4.分支合并&lt;/h2&gt;

&lt;p&gt;如:要将develop分支合并和master分支
首先切换的master分支：&lt;code&gt;git checkout master&lt;/code&gt;
然后执行合并操作：&lt;code&gt;git merge develop&lt;/code&gt;
如果有冲突，会提示你，调用&lt;code&gt;git status&lt;/code&gt;查看冲突文件。
解决冲突，然后调用&lt;code&gt;git add&lt;/code&gt;或&lt;code&gt;git rm&lt;/code&gt;将解决后的文件暂存。
所有冲突解决后，&lt;code&gt;git commit&lt;/code&gt;提交更改。&lt;/p&gt;

&lt;h2 id=&#34;5-删除分支&#34;&gt;5.删除分支&lt;/h2&gt;

&lt;p&gt;删除本地分支,删除分支之前记得先合并,以免数据丢失&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch -d &amp;lt;分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git push [远程名] [本地分支]:[远程分支]&lt;/code&gt; 本地分支的数据推送到远程分支,如果远程分支不存在,将会自动创建&lt;/p&gt;

&lt;p&gt;如果本地分支为空格,则将删除远程分支 &lt;code&gt;git push origin :deletebranch&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-显示所有分支&#34;&gt;6.显示所有分支&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch -a&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;显示远端分支&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git branch -r&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git push -all&lt;/code&gt; 把所有本地分支都推到远端&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull origin remotebranch:localbranch&lt;/code&gt;
将远程某分支拉倒本地某分支,当本地分支和远程分支名称相同时，只写一个就可以&lt;/p&gt;

&lt;h1 id=&#34;git-tag-管理&#34;&gt;git tag 管理&lt;/h1&gt;

&lt;h2 id=&#34;1-git-tag&#34;&gt;1.git tag&lt;/h2&gt;

&lt;p&gt;在控制台打印出当前仓库的所有标签&lt;/p&gt;

&lt;h2 id=&#34;2-git-tag-l-v0-1&#34;&gt;2.git tag -l &amp;lsquo;v0.1.*&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;搜索符合模式的标签&lt;/p&gt;

&lt;h2 id=&#34;3-git-tag-v0-1-2-light&#34;&gt;3.git tag v0.1.2-light&lt;/h2&gt;

&lt;p&gt;创建轻量标签&lt;/p&gt;

&lt;h2 id=&#34;4-git-tag-a-v0-1-2-m-0-1-2版本&#34;&gt;4.git tag -a v0.1.2 -m &amp;ldquo;0.1.2版本&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;创建附注标签&lt;/p&gt;

&lt;p&gt;git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。&lt;/p&gt;

&lt;h2 id=&#34;5-git-tag-d-v0-1-2&#34;&gt;5.git tag -d v0.1.2&lt;/h2&gt;

&lt;p&gt;删除标签&lt;/p&gt;

&lt;h2 id=&#34;6-git-push-origin-v0-1-2&#34;&gt;6.git push origin v0.1.2&lt;/h2&gt;

&lt;p&gt;将v0.1.2标签提交到git服务器
git push origin –-tags
将本地所有标签一次性提交到git服务器
通常的git push不会将标签对象提交到git服务器，所以我们需要进行显式的操作：&lt;/p&gt;

&lt;h1 id=&#34;git-stash-操作&#34;&gt;git stash 操作&lt;/h1&gt;

&lt;p&gt;1.git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash
//do some work
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.同样可以使用 git stash save &amp;ldquo;work in progress for foo feature&amp;rdquo; 添加标记&lt;/p&gt;

&lt;p&gt;3.当你多次使用&lt;code&gt;git stash&lt;/code&gt;命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，
&lt;code&gt;git stash list&lt;/code&gt; 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用&lt;code&gt;git stash apply stash@{1}&lt;/code&gt;就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用&lt;code&gt;git stash clear&lt;/code&gt;来将栈清空。&lt;/p&gt;

&lt;h2 id=&#34;svn&#34;&gt;svn&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;svn revert xx.html&lt;/code&gt; 和&lt;code&gt;git checkout xx.html&lt;/code&gt; 类似,还原文件的更改&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sublime使用和设置</title>
      <link>http://blog.suconghou.cn/post/sublime-usage/</link>
      <pubDate>Fri, 08 Jan 2016 23:21:12 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/sublime-usage/</guid>
      <description>

&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;

&lt;p&gt;最喜欢的字体&lt;code&gt;Monaco&lt;/code&gt;,&lt;a href=&#34;http://share.suconghou.cn/fonts/MONACO.TTF&#34;&gt;此处下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配置文件
&lt;code&gt;Preferences.sublime-settings&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;close_windows_when_empty&amp;quot;: true,
	&amp;quot;default_encoding&amp;quot;: &amp;quot;UTF-8&amp;quot;,
	&amp;quot;default_line_ending&amp;quot;: &amp;quot;unix&amp;quot;,
	&amp;quot;ensure_newline_at_eof_on_save&amp;quot;: true,
	&amp;quot;font_face&amp;quot;: &amp;quot;Monaco&amp;quot;,
	&amp;quot;font_size&amp;quot;: 13,
	&amp;quot;highlight_line&amp;quot;: true,
	&amp;quot;highlight_modified_tabs&amp;quot;: true,
	&amp;quot;ignored_packages&amp;quot;:
	[
		&amp;quot;Vintage&amp;quot;
	],
	&amp;quot;show_encoding&amp;quot;: true,
	&amp;quot;show_line_endings&amp;quot;: true,
	&amp;quot;tab_size&amp;quot;: 4,
	&amp;quot;translate_tabs_to_spaces&amp;quot;: false,
	&amp;quot;trim_trailing_white_space_on_save&amp;quot;: true,
	&amp;quot;update_check&amp;quot;: false,
	&amp;quot;word_wrap&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;插件&#34;&gt;插件&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;open_browser.py&lt;/code&gt; 插件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sublime, sublime_plugin
import webbrowser
import os

url_map = {
    &#39;D:\\git\\bbs\\&#39; : &#39;http://127.0.0.3/&#39;,
    &#39;D:\\php\\su\\&#39; : &#39;http://127.0.0.2/&#39;,
    &#39;D:\\php\\htdocs\\&#39; : &#39;http://127.0.0.1/&#39;
}

class OpenBrowserCommand(sublime_plugin.TextCommand):
    def run(self,edit):
        window = sublime.active_window()
        window.run_command(&#39;save&#39;)
        url = self.view.file_name()
        flag = False
        for path, domain in url_map.items():
            if url.startswith(path):
                url = url.replace(path, domain).replace(&#39;\\&#39;, &#39;/&#39;)
                flag = True
                break
        if not flag:
            cmd1=&#39;taskkill /f /im php.exe&#39;
            cmd2=&#39;php -S 0.0.0.0:8088 -t &#39;+os.path.abspath(os.path.dirname(self.view.file_name()))
            os.system(cmd1)
            os.popen(cmd2)
            url =  &#39;http://127.0.0.1:8088/&#39;+os.path.basename(self.view.file_name())
        webbrowser.open_new(url)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译系统&#34;&gt;编译系统&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;node.sublime-build&lt;/code&gt; 执行nodejs代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;shell_cmd&amp;quot;: &amp;quot;node ${file}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;快捷键配置&#34;&gt;快捷键配置&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Default (OSX).sublime-keymap&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
	{ &amp;quot;keys&amp;quot;: [&amp;quot;alt+d&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;open_dir&amp;quot;, &amp;quot;args&amp;quot;: {&amp;quot;dir&amp;quot;: &amp;quot;$file_path&amp;quot;, &amp;quot;file&amp;quot;: &amp;quot;$file_name&amp;quot;} },
	{ &amp;quot;keys&amp;quot;: [&amp;quot;ctrl+shift+c&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;copy_path&amp;quot; },
	{ &amp;quot;keys&amp;quot;: [&amp;quot;ctrl+f11&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;toggle_distraction_free&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;添加sublime到命令行&#34;&gt;添加sublime到命令行&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MacOs&lt;/code&gt;下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;激活码&#34;&gt;激活码&lt;/h2&gt;

&lt;p&gt;3103可用激活码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;—– BEGIN LICENSE —–
Ryan Clark
Single User License
EA7E-812479
2158A7DE B690A7A3 8EC04710 006A5EEB
34E77CA3 9C82C81F 0DB6371B 79704E6F
93F36655 B031503A 03257CCC 01B20F60
D304FA8D B1B4F0AF 8A76C7BA 0FA94D55
56D46BCE 5237A341 CD837F30 4D60772D
349B1179 A996F826 90CDB73C 24D41245
FD032C30 AD5E7241 4EAA66ED 167D91FB
55896B16 EA125C81 F550AF6B A6820916
—— END LICENSE ——
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3103之前版本可用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----- BEGIN LICENSE -----
Andrew Weber
Single User License
EA7E-855605
813A03DD 5E4AD9E6 6C0EEB94 BC99798F
942194A6 02396E98 E62C9979 4BB979FE
91424C9D A45400BF F6747D88 2FB88078
90F5CC94 1CDC92DC 8457107A F151657B
1D22E383 A997F016 42397640 33F41CFC
E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D
5CDB7036 E56DE1C0 EFCC0840 650CD3A6
B98FC99C 8FAC73EE D2B95564 DF450523
------ END LICENSE ------
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>http://blog.suconghou.cn/post/linux-ssh/</link>
      <pubDate>Thu, 07 Jan 2016 13:47:22 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux-ssh/</guid>
      <description>

&lt;h2 id=&#34;避免ssh自动断开连接&#34;&gt;避免SSH自动断开连接&lt;/h2&gt;

&lt;p&gt;如果有一段时间在SSH连接上无数据传输，连接就会断开,以下设定可以解决这个问题&lt;/p&gt;

&lt;p&gt;方案一：在客户端设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/ssh/ssh_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启 &lt;code&gt;ServerAliveInterval 60&lt;/code&gt;
开启 &lt;code&gt;TCPKeepAlive yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此后该系统里的用户连接SSH时，每60秒会发一个KeepAlive请求，避免被踢。&lt;/p&gt;

&lt;p&gt;方案二：在服务器端设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vim /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启&lt;code&gt;ClientAliveInterval 60&lt;/code&gt;
开启 &lt;code&gt;TCPKeepAlive yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果您只想让当前的 ssh 保持连接，可以使用以下的命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -o ServerAliveInterval=60 user@sshserver&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;ssh隧道&#34;&gt;ssh隧道&lt;/h2&gt;

&lt;p&gt;-L [本地监听IP:]本地监听端口号:目标主机IP:目标端口号
(其中,“本地监听IP”可以省略，省略的话就认为是“0.0.0.0”，但为了安全性考虑，请务必使用“127.0.0.1”做为本地监听端口， 而不要使用默认的“0.0.0.0”。）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -D 8080 user@host&lt;/code&gt;
SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -L 2121:host2:21 host3&lt;/code&gt;
命令中的L参数一共接受三个值，分别是&amp;rdquo;本地端口:目标主机:目标主机端口&amp;rdquo;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。
这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。&lt;/p&gt;

&lt;h3 id=&#34;使用socks5代理&#34;&gt;使用socks5代理&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;alias socksproxy=&amp;quot;ssh -NT -f -D 0.0.0.0:1090  -p 1234 root@host&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-N 不打开远程的shell
-T 不分配tty
-f 后台运行&lt;/p&gt;

&lt;p&gt;执行&lt;code&gt;socksproxy&lt;/code&gt;后就建立了一条ssh socks5 proxy,本地使用127.0.0.1:1090就可以使用服务器中转流量.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>