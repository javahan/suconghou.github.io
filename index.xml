<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>苏苏的博客</title>
    <link>http://blog.suconghou.cn/</link>
    <description>Recent content on 苏苏的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Mar 2017 12:11:21 +0800</lastBuildDate>
    
	<atom:link href="http://blog.suconghou.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lego and acme to enable https</title>
      <link>http://blog.suconghou.cn/post/lego-and-acme-to-enable-https/</link>
      <pubDate>Mon, 27 Mar 2017 12:11:21 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/lego-and-acme-to-enable-https/</guid>
      <description>acme https://github.com/Neilpang/acme.sh
https://github.com/xenolf/lego
lego使用golang编写,acme.sh使用bash编写;使用都非常方便
使用lego签发证书 签发证书之前,确保要签发的域名的解析是指向当前要运行lego服务器的IP
签发过程中,lego需要监听80和443端口,请确保有权限且未被占用.
证书的签发使用的当前服务器的IP和后续证书的使用没有关系
一次生成包含多个域名的证书.
./lego --email=&amp;quot;suconghou@126.com&amp;quot; --domains=&amp;quot;g.suconghou.cn&amp;quot; --domains=&amp;quot;share.suconghou.cn&amp;quot; --domains=&amp;quot;play.suconghou.cn&amp;quot; --domains=&amp;quot;go.suconghou.cn&amp;quot; run  运行成功无报错的话,将会在目录下生成.lego目录,里面存放证书
生成的 域名.crt 文件 和 域名.key 文件
key文件即为nginx中ssl_certificate_key需配置的文件. 被称为 证书密钥
.crt 文件即为nginx中ssl_certificate需配置的文件. 有的也称 fullchain.cer 被称为 授权证书</description>
    </item>
    
    <item>
      <title>gcc</title>
      <link>http://blog.suconghou.cn/post/gcc/</link>
      <pubDate>Fri, 13 Jan 2017 14:01:02 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/gcc/</guid>
      <description>gcc 静态编译 1.c
#include &amp;lt;stdio.h&amp;gt; void main() { printf(&amp;quot;hello&amp;quot;); }  gcc -static --verbose -fno-builtin 1.c
 --verbose是为了输入编译的详细信息
-fno-builtin是阻止编译器把printf变成puts
 如果出现错误
/usr/bin/ld: cannot find -lc collect2: 错误：ld 返回 1  可能你还需要安装glibc的静态库
yum update &amp;amp;&amp;amp; yum install glibc-static -y
优化选项
https://www.zhihu.com/question/27090458
gcc -static -O 1.c gcc -static -O2 1.c gcc -static -O3 1.c gcc -static -Os 1.c  错误提示 -pedantic编译选项并不能保证被编译程序与ANSI/ISO C标准的完全兼容，它仅仅只能用来帮助Linux程序员离这个目标越来越近。或者换句话说，-pedantic选项能够帮助程序员发现一些不符合 ANSI/ISO C标准的代码，但不是全部，事实上只有ANSI/ISO C语言标准中要求进行编译器诊断的那些情况，才有可能被GCC发现并提出警告。
除了-pedantic之外，GCC还有一些其它编译选项也能够产生有用的警告信息。这些选项大多以-W开头，其中最有价值的当数-Wall了，使用它能够使GCC产生尽可能多的警告信息。
gcc -Wall test.c -o test  GCC给出的警告信息虽然从严格意义上说不能算作错误，但却很可能成为错误的栖身之所。一个优秀的Linux程序员应该尽量避免产生警告信息，使自己的代码始终保持标准、健壮的特性。所以将警告信息当成编码错误来对待，是一种值得赞扬的行为！所以，在编译程序时带上-Werror选项，那么GCC会在所有产生警告的地方停止编译，迫使程序员对自己的代码进行修改，如下：</description>
    </item>
    
    <item>
      <title>系统安全</title>
      <link>http://blog.suconghou.cn/post/server-safe/</link>
      <pubDate>Sun, 20 Nov 2016 22:12:25 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/server-safe/</guid>
      <description>Nginx安全配置 如果你是用git或者svn来部署代码,默认情况下,你的网站很可能已经泄露了.git目录,或者.svn目录
使用nginx配置过滤一切以.开头的文件和文件夹,防止被用户下载.
location ~ /\. { deny all; }  每个网站都需要这么配置可能有些麻烦,你可以在统一的文件中定义好/etc/nginx/default.d/php.conf
listen 80; index index.html index.php; try_files $uri $uri/ /index.php?$args; location ~ /\. { deny all; } location ~ ^.+\.php$ { try_files $uri =404; fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; }  使用时,类似与下面,还不用每次写这么多配置了.
server{ server_name fed-wx.xxx.cn; root /data/www/fed-wx; include /etc/nginx/default.d/php.conf; }  给http段添加,开启一些gzip特性,关闭显示服务器版本
default_type application/octet-stream; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; server_tokens off; ssi on; gzip on; gzip_min_length 1024; gzip_proxied any; gzip_comp_level 3; gzip_types text/plain text/javascript text/css text/json application/xml application/javascript application/json image/jpeg image/gif image/png;  修改你的SSH默认端口,并且使用强密码 每天都有大量的端口扫描来扫描你服务器IP的22端口,如果你的22端口密码又不强,很可能已被黑客侵入.</description>
    </item>
    
    <item>
      <title>use kvm</title>
      <link>http://blog.suconghou.cn/post/use-kvm/</link>
      <pubDate>Tue, 18 Oct 2016 19:18:24 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-kvm/</guid>
      <description>安装和配置KVM KVM与XEN区别 OPENVZ就不说了,是半虚拟化,不能安装Windows操作系统
KVM是内核模块,从2.6.20内核开始,kvm模块就包含在Linux内核中,只需加载此模块即可
#查看宿主机CPU是否在硬件上支持虚拟化扩展特性 cat /proc/cpuinfo | grep -E &amp;quot;(vmx|svm)&amp;quot; #加载kvm模块（Intel VT） modprobe kvm modprobe kvm-intel #注意：如果加载失败，说明服务器硬件不支持或BIOS中未开启虚拟化扩展  运行命令lsmod | grep kvm检查 KVM 模块是否成功安装
XEN是一套虚拟化方案,可以直接安装,不需要先安装操作系统.
KVM起步较晚,XEN起步早发展成熟,但目前KVM潜力较大.
KVM 与 qemu yum install qemu-kvm libvirt virt-install bridge-utils
qemu-kvm 该软件包主要包含KVM内核模块和适用于KVM的QEMU模拟器。KVM模块负责CPU和内存的调度，QEMU负责虚拟机I/O设备的模拟。
libvirt 提供Hypervisor和虚拟机的管理功能。
virt-install 创建和克隆虚拟机的命令行工具包。
bridge-utils 网桥管理工具包，负责桥接网络的创建、配置和管理等工作。
激活并启动libvirtd服务 systemctl enable libvirtd systemctl start libvirtd  安装CentOS7 diskutil list查看所有磁盘
diskutil unmountdisk /dev/disk1 解除其挂载
用dd将ISO文件写入
sudo dd if=/data/files/iso/CentOS-7-x86_64-Minimal-1511.iso of=/dev/disk2 bs=1m
安装好系统后,更换网易的源 http://mirrors.163.com/.help/centos.html
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.</description>
    </item>
    
    <item>
      <title>iptables与firewalld</title>
      <link>http://blog.suconghou.cn/post/iptables/</link>
      <pubDate>Wed, 14 Sep 2016 12:24:02 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/iptables/</guid>
      <description>iptables相关配置 配置iptables之前,建议添加一个crontab定时重置iptables,防止将自己阻挡.
建议写入/usr/iptab.sh,加入crontab,每个整点执行
iptables -P INPUT ACCEPT iptables -P OUTPUT ACCEPT iptables -P FORWARD ACCEPT iptables -F iptables -X iptables -Z  查看本机关于IPTABLES的设置情况 iptables -L -n  清除原有规则. 不管你在安装linux时是否启动了防火墙,如果你想配置属于自己的防火墙,那就清除现在filter的所有规则. 清除预设表filter中的所有规则链的规则
iptables -F  清除预设表filter中使用者自定链中的规则
iptables -X  保存配置 刚刚配置的重启以后就会丢失,想要保存使用
iptables save  有的可能是iptables-save
这样就写到/etc/sysconfig/iptables 文件里了. 写入后记得把防火墙重起一下,才能起作用.
service iptables restart  设定预设规则 默认的入口,出口,转发策略都是ACCEPT 下面要改变这种规则
iptables 采用黑名单加白名单的方式, 未命中白名单的将采用预设规则
下面操作注意,为避免ssh端口22被拦截,首先添加
iptables -A INPUT -p tcp --dport 22 -j ACCEPT  保证22端口入口畅通,注意如果你的OUTPUT模式设置为DROP(上面已经清空了,默认为ACCEPT),还需要添加
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT  保证出口22端口畅通 下面开始折腾吧</description>
    </item>
    
    <item>
      <title>pc hardware</title>
      <link>http://blog.suconghou.cn/post/pc-hardware/</link>
      <pubDate>Sun, 04 Sep 2016 14:37:51 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/pc-hardware/</guid>
      <description>修电脑相关知识 较好的PE 微PE
http://www.wepe.com.cn/ 自带刻录,可以一键安装到U盘,硬盘等,支持UEFI,CMS等多种启动方式.
 一般的BIOS里找不到UEFI/CMS的切换设置,可能是security boot的配置,禁用security boot试试
如果在BIOS里找不到U盘,可能是fastboot的问题,可以禁用fastboot,安装好系统后在开启.
硬盘的设置模式里,找不到U盘或者硬盘,可以尝试切换AHCI/IDE,注意安装好系统后,此选项不能够再随意切换,否知导致系统进不去.
 休眠能将现有所有工作保存到硬盘,下次开机恢复上次的会话,Windows8及以后采用了混合休眠机制
你可能找不到单纯的休眠按钮.
可以使用shutdown -h休眠
其他一些补充
关机计算机：shutdown.exe -s -t 00 重启计算机：shutdown.exe -r -t 00 注销计算机：shutdown.exe -l -t 00 锁定计算机：rundll32.exe user32.dll,LockWorkStation 休眠计算机：rundll32.exe powrProf.dll,SetSuspendState 睡眠计算机：rundll32.exe powrprof.dll,SetSuspendState 0,1,0,  性能天梯图 CPU性能列表 https://www.cpubenchmark.net/cpu_list.php
在新标签查看大图
CPU天梯图
CPU天梯图其他版本
显卡天梯图</description>
    </item>
    
    <item>
      <title>memcached usage</title>
      <link>http://blog.suconghou.cn/post/memcached-usage/</link>
      <pubDate>Wed, 24 Aug 2016 14:44:23 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/memcached-usage/</guid>
      <description>安装memcached http://memcached.org/downloads
memcached所有版本见http://www.memcached.org/files/
cd /tmp MEMCACHE_VERSION=memcached-1.4.31 CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l` wget http://www.memcached.org/files/${MEMCACHE_VERSION}.tar.gz tar xzf ${MEMCACHE_VERSION}.tar.gz cd ${MEMCACHE_VERSION} export CFLAGS=&amp;quot;-O3&amp;quot; ./configure make -j$CPU_NUM &amp;amp;&amp;amp; make install  docker版本见:https://hub.docker.com/r/suconghou/memcached/
启动Memcached memcached -d -u memcached -p 11211 -m 8 -P /var/run/memcached/memcached.pid  说明
 -d 以daemon方式运行 -u 绑定使用指定用户运行进程(仅在以root运行的时候有效) -p 设置TCP端口号(默认11211) -m 允许最大内存用量，单位M (默认: 64 MB) -M 内存耗尽时返回错误，而不是删除项 -l 是监听的服务器IP地址，默认应该是本机 -P 将PID写入文件，这样可以使得后边进行快速进程终止, 需要与-d 一起使用 -c 最大同时连接数，默认是1024 -t 线程数,默认为4 -v 输出警告和错误信息 -vv 打印客户端的请求和返回信息  默认情况下是不限制访问IP的,相当于是外网和内网都能访问,-l 使只有这个IP能访问</description>
    </item>
    
    <item>
      <title>javascript code snippet</title>
      <link>http://blog.suconghou.cn/post/javascript-code-snippet/</link>
      <pubDate>Thu, 11 Aug 2016 10:27:18 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/javascript-code-snippet/</guid>
      <description>实用的Javascript代码锦集 Date.parse(&amp;quot;2016-04-4&amp;quot;)  Date.parse safari 不能使用单位数字的月份和日期,否则解析为NaN
火狐较低版本(火狐43)也是如此
IE10 has not anchorNode focusNode 属性, 取得选中的文字需要读取 text 属性, IE11 一切正常 , 取得选中文字可以直接 toString
IE10,IE11 不支持 html5 的 download 属性, 无法点击下载自定义名称的html和图片等文件. 可以使用 下载的 downloadFile,利用ajax下载,顺便说 ajax 下载也不能使用fetch IE系统统不支持fetch,到EDGE14才支持fetch, https://github.com/github/fetch 可支持IE10+
火狐不支持和chrome的scrollTop表现也不相同
// 兼容处理 chrome 和 firefox let scrollTop=document.body.scrollTop?document.body.scrollTop:document.documentElement.scrollTop; if(scrollTop&amp;lt;20){ this.headerShowStatus=true; }else if(scrollTop&amp;gt;170){ this.headerShowStatus=false; } if(document.documentElement.scrollHeight-scrollTop- document.documentElement.clientHeight&amp;lt; 400 ){ this.loadMore(); }  火狐不支持 e.srcElement 需要使用 e.target 代替
IE10,IE11, 不支持location.origin var origin = location.origin?location.origin:location.protocol+&amp;quot;//&amp;quot;+location.host;  firefox 浏览器下载接受的后端header 不支持单引号</description>
    </item>
    
    <item>
      <title>javascript senior</title>
      <link>http://blog.suconghou.cn/post/javascript-senior/</link>
      <pubDate>Tue, 09 Aug 2016 21:27:39 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/javascript-senior/</guid>
      <description>Javascript 参数传递 说起参数传递,首先需要弄清楚javascript里的数据类型
原始数据类型 Undefined Null Boolean Number String
引用数据类型
Object Array Function Date 等
原始数据类型存储在栈的简单数据段,他们的值直接存储在变量访问的位置(因原始数据类型占据的空间是固定的,可以存储在较小的内存区域栈中)
引用数据类型是存储在堆中的对象,存储在变量处的值只是一个指针,指向存储对象的内存地址,这是因为引用类型的大小会改变.
不同的内存分配机制带来不同的访问机制
在JavaScript中,是不允许直接访问保存在堆内存中的对象的,访问对象时必须取得对象在堆内存中的地址,然后按地址去取得对象中的值.
这便是传说中的按引用访问.
而原始类型则是直接访问到的.
复制变量时的不同
原始值:
会将原始值的副本赋值给新变量.此后两个变量完全独立.
引用值:
会把内存地址赋值给新变量,也就是说两个变量都指向堆内存中的同一个对象. 他们中任何一个改变都会反映到另一个身上.
参数传递的不同
最重要的一点:ECMAScript中所有函数的参数都是按值传递的.
但原始值和引用值仍会造成不同的后果.
原始值:
把变量里的值传递给参数,之后两个变量互不影响.(就是把实参复制给形参的过程)
引用值:
任然是将实参里面的值复制到形参,但是注意对象变量它里面的值是这个对象的堆内存地址
也就是说形参和实参都是指向同一个堆内存对象.
但是也要记住另外一点:如果形参被赋值为另外一个对象时,那么这个形参将会丢弃对上次指向的堆内存地址,而指向新对象的堆内存地址.
此时,形参和实参相互脱离,互不影响,原先的实参任然指向原先对象的堆内存地址.
如果是添加修改形参的属性,那么就是修改堆内存中的对象,形参和实参将同时得到反映,因为他们指向的是同一个堆内存对象.
这种传递方式被称为Call By Sharing
function box(obj) { obj.name=&#39;hello&#39;; var obj=new Object(); obj.name=&#39;world&#39;; } var obj=new Object(); box(obj); console.log(obj.name);  注意两点: 1. var obj=new Object() 声明提升
变为
var obj; obj.name=&#39;hello&#39;; obj=new Object(); obj.name=&#39;world&#39;;  函数的已存在一个变量形参obj,再次的变量申明会忽略</description>
    </item>
    
    <item>
      <title>HAProxy优化应用程序速度</title>
      <link>http://blog.suconghou.cn/post/use-haproxy/</link>
      <pubDate>Fri, 29 Jul 2016 14:27:54 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-haproxy/</guid>
      <description>HAProxy HAProxy高性能的反向代理软件,更专注于TCP,HTTP处理,它可以基于四层或七层进行反向代理,尤其适合于高负载且需要进行七层处理的 Web 站点.
单进程、事件驱动模型,通常用于超高流量的负载均衡.
我们也可以使用它来作为中转站,使直连连通率不好的请求进过中转提升速度.
编译安装 apt-get update &amp;amp;&amp;amp; apt-get install -y wget gcc g++ make libpcre++0v5 libpcre++-dev  yum update &amp;amp;&amp;amp; yum install wget gcc make  HAPROXY_VERSION=haproxy-1.7.0 CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l` wget http://www.haproxy.org/download/1.7/src/${HAPROXY_VERSION}.tar.gz tar zxf ${HAPROXY_VERSION}.tar.gz cd ${HAPROXY_VERSION} export CFLAGS=&amp;quot;-O3&amp;quot; make TARGET=linux2628 ARCH=X86_64 USE_STATIC_PCRE=1 -j$CPU_NUM &amp;amp;&amp;amp; make install  编译32位版本make TARGET=linux26 ARCH=i686 USE_STATIC_PCRE=1 -j$CPU_NUM
在64位系统下编译32位需要apt-get install gcc-multilib g++-multilib
我编译好的haproxy version 1.7.0
 64位 http://share.</description>
    </item>
    
    <item>
      <title>some dev tools</title>
      <link>http://blog.suconghou.cn/software/some-dev-tools/</link>
      <pubDate>Sun, 17 Jul 2016 20:48:49 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/software/some-dev-tools/</guid>
      <description>一些开发会用到的小工具 编程字体 苹果出品的Monaco,看起来十分圆润,首选推荐的编程字体
monaco
或许还有很多人喜欢YaHei.Consolas
YaHei.Consolas.1.12.zip
一些从Linux迁移到Windows的东西 最常用的当属bash了,包含md5sum,wget,curl,awk等等.
有两个比较好的项目在移植
 unxutils http://unxutils.sourceforge.net/ 源码 https://sourceforge.net/projects/unxutils/
win-bash https://sourceforge.net/projects/win-bash/
 unxutils最后更新2014-04-03
win-bash最后更新2015-03-30
sourceforge上速度太慢,这里提供加速下载.
win-bash下载shell.w32-ix86.zip
我的github也收集了一些windows上常用的小工具axel,putty,ab,hugo,rsync等
http://github.com/suconghou/tools
Curl 官网 https://curl.haxx.se/download.html
Curl 这里可以下载windows版的 http://www.paehl.com/open_source/?CURL_7.49.1</description>
    </item>
    
    <item>
      <title>shadowsocks client</title>
      <link>http://blog.suconghou.cn/software/shadowsocks-client/</link>
      <pubDate>Sun, 17 Jul 2016 20:37:31 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/software/shadowsocks-client/</guid>
      <description>shadowsocks 各平台客户端 文件来源于github.com
windows平台 Shadowsocks-3.4.2
mac平台 ShadowsocksX-2.6.3
android平台 shadowsocks-nightly-3.3.1
服务端可以使用docker更方便 shadowsocks docker</description>
    </item>
    
    <item>
      <title>picasa photo viewer</title>
      <link>http://blog.suconghou.cn/software/picasa-photo-viewer/</link>
      <pubDate>Sun, 17 Jul 2016 20:30:43 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/software/picasa-photo-viewer/</guid>
      <description>PicasaPhotoViewer(图片查看器) v3.9.136.9 Picasa内置的图片浏览器,Google出品,此版本为独木成林提取出来的.
只有1.7MB,启动速度快,十分好用,有一个缺点是可能因为版权问题未对GIF做支持.
PicasaPhotoViewerv3.9.136.9</description>
    </item>
    
    <item>
      <title>git for windows</title>
      <link>http://blog.suconghou.cn/software/git-for-windows/</link>
      <pubDate>Sun, 17 Jul 2016 20:11:26 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/software/git-for-windows/</guid>
      <description>git for windows 国内下载 所有资源均来源于官网http://git-scm.com/download/win
版本2.12.0
32位资源 32位安装版
32位绿色版
64位资源 64位安装版
64位绿色版</description>
    </item>
    
    <item>
      <title>react native</title>
      <link>http://blog.suconghou.cn/post/react-native/</link>
      <pubDate>Mon, 11 Jul 2016 11:39:08 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/react-native/</guid>
      <description>react native 环境准备 前提是需要node和npm,这里不在赘述.介绍一个npm加速的.
使用淘宝的npm镜像.控制台运行,或者加入你的bashrc中永久生效
alias cnpm=&amp;quot;npm --registry=https://registry.npm.taobao.org --cache=$HOME/.npm/.cache/cnpm --disturl=https://npm.taobao.org/dist --userconfig=$HOME/.cnpmrc&amp;quot;;  安装开发必备的一些package
cnpm install -g react-native-cli webpack  react-native也调用了npm命令,所以我们可以再来个alias加速react-native init
alias npm=&#39;cnpm&#39;
或者直接将仓库改为淘宝的NPM镜像
npm config set registry https://registry.npm.taobao.org npm config set disturl https://npm.taobao.org/dist  在mac上还需要一些东西
brew install flow watchman  安装完以后可以开始helloworld了.
开始第一个例子 cd /data/tmp react-native init HelloWorld  然后正在初始化大致如下
This will walk you through creating a new React Native project in /data/tmp/HelloWorld Installing react-native package from npm... Setting up new React Native app in /data/tmp/HelloWorld HelloWorld@0.</description>
    </item>
    
    <item>
      <title>都有哪些坑</title>
      <link>http://blog.suconghou.cn/post/some-hole/</link>
      <pubDate>Thu, 07 Jul 2016 15:46:03 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/some-hole/</guid>
      <description>总结一下遇到的坑 微信 关于横竖屏的坑
css3可以使用媒体查询判断设备是横屏还是竖屏
//横屏时显示 @media all and (orientation : landscape) { #screenMask{display:block} } //竖屏时隐藏 @media all and (orientation : portrait) { #screenMask{display:none} }  在手机浏览器中表现良好,微信中看样子也可以,但是微信网页中如果聚焦输入框,弹起键盘就有问题了.
软键盘弹起后,网页可用面积减小,安卓就自动识别为横屏了,原有的页面消失了,影响非常大.IOS则没有这个问题,媒体查询判断横竖屏在IOS上工作良好.
并且由此发现,css3媒体查询就是根据宽度是否比高度小来判断横竖屏的.
解决方案1
使用javascript的orientation和orientationchange判断
 window.orientation 属于window对象上一个属性；共有三个值 ：0为竖屏模式（portrait）,90为向左反转变为横屏模式（landscape），-90为向右反转变为横屏模式（landscape），最后180就是设备上下互换还是竖屏模式。 orientationchange 是一个event，在设备旋转时，会触发此事件，如同PC上使用的resize事件。  (function(){ var init = function(){ var updateOrientation = function(){ var orientation = window.orientation; switch(orientation){ case 90: case -90: orientation = &#39;landscape&#39;; break; default: orientation = &#39;portrait&#39;; break; } //do something //比如在html标签加一个状态 //然后根据不同状态，显示不同大小 document.</description>
    </item>
    
    <item>
      <title>PHP最佳实践</title>
      <link>http://blog.suconghou.cn/post/php-best-way/</link>
      <pubDate>Thu, 30 Jun 2016 16:40:13 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/php-best-way/</guid>
      <description>性能优化 数组相关 in_array在大数据量(数万以上元素)下效率低下
在分析nginx log得出所有不重复IP时,采用in_array判断,50多万的数据耗时需要五六分钟,而采用存键的方法,用isset判断仅需要十几秒,效率差别非常大. [php7环境下]
判断一个数组是否存在某个元素,远比查找一个键消耗的要多.前者时间复杂度O(n),而后者O(1)
即时使用in_array,也需要加上第三个参数,设置为严格模式,省略数据类型转化的开销,设置为true比设置为false性能要提升好几倍.
这种情况下使用array_search情况比in_array更加糟糕
如果条件允许使用array_flip交换键值,在用isset来判断要比in_array好得多
同时,使用isset来判断数组的键,也比使用array_key_exists要好
而对于本题,还可以使用array_unique最后去重,用空间换时间,效率仅次于用isset
Bugs php pdo MySQL server has gone away 在使用PDO长连接时,执行过一次PDO初始化后,php-fpm进程会与mysql server开启一条TCP长连接,下次连接数据库就能加快速度.
但是却存在一定问题,PDO维持了长连接并没有较好的检测其可用性,如果mysql server kill 掉这个连接,或者mysql重启,都会造成
重新实例化PDO时得到旧的链接,导致出现MySQL server has gone away,更让人郁闷的是这个错误并不是一个Exception,无法被catch捕获,即使设置PDO::ATTR_ERRMODE=&amp;gt;PDO::ERRMODE_EXCEPTION,也不行,还是直接在页面上提示.
如果你使用了set_error_handler,那么这个Warning将会被捕捉,不会直接显示在页面上,但也改变了程序的原有执行逻辑.
如果你不使用set_error_handler,页面上报出Warning,但其实PDO已经返回一个可用的链接了.
猜测可能是PDO首先得到了不可用的然后报警告,然后又创建了一个新的.
较好的解决方法是设置set_error_handler若捕获了这个MySQL server has gone away,则返回null,程序继续按原有逻辑执行.
或者不使用PDO长连接.
注意,set_error_handler返回false的话,这个错误还是会被交到上一级错误程序处理的.
编码转换中的若干问题 我们经常会遇到将utf8编码字符转化为gbk编码的字符,例如生成csv表格,在windows上的cmd窗口输出文字,以及操作windows上的有关文件路径的操作都需要使用gbk编码.
常使用iconv(&#39;utf-8&#39;, &#39;gbk&#39;, $str);将utf8字符转为gbk
这里 utf gbk 不区分大小写,也可以混写,不区分是utf8还是utf-8,都能都正常使用
iconv(&#39;utf-8&#39;, &#39;gbk//ignore&#39;, $str); 加上//ignore使有些字符无法装换时略过.
但是//ignore在php5.4及以下,和个别php5.6版本上无效,任然是报NOTICE错误.
&amp;lt;?php echo iconv(&#39;UTF8&#39;, &#39;GBK//IGNORE&#39;, &#39;l l l&#39;); ?&amp;gt;  见 https://3v4l.org/7vCFW 和 http://www.php.net/manual/en/function.iconv.php第一条评论
可以考虑使用$content = mb_convert_encoding($content, &amp;quot;GBK&amp;quot;,&amp;quot;UTF-8&amp;quot;); 从UTF8转为GBK</description>
    </item>
    
    <item>
      <title>shadowsocks libev</title>
      <link>http://blog.suconghou.cn/post/shadowsocks-libev/</link>
      <pubDate>Wed, 18 May 2016 17:37:16 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/shadowsocks-libev/</guid>
      <description>静态编译shadowsocks libev 在alpine里编译
先安装依赖
# Installation of Libsodium cd /tmp export LIBSODIUM_VER=1.0.12 wget https://download.libsodium.org/libsodium/releases/libsodium-$LIBSODIUM_VER.tar.gz tar xvf libsodium-$LIBSODIUM_VER.tar.gz cd libsodium-$LIBSODIUM_VER ./configure --prefix=/usr &amp;amp;&amp;amp; make -j2 &amp;amp;&amp;amp; make install cd /tmp ldconfig # Installation of MbedTLS cd /tmp export MBEDTLS_VER=2.4.2 wget https://tls.mbed.org/download/mbedtls-$MBEDTLS_VER-gpl.tgz tar xvf mbedtls-$MBEDTLS_VER-gpl.tgz cd mbedtls-$MBEDTLS_VER make SHARED=1 CFLAGS=-fPIC &amp;amp;&amp;amp; make DESTDIR=/usr install cd /tmp ldconfig  安装完这两个依赖后,下面准备开始静态编译
apk update &amp;amp;&amp;amp; apk upgrade &amp;amp;&amp;amp; apk add gcc g++ make autoconf curl wget build-base linux-headers libev-dev libtool udns-dev libsodium-dev mbedtls-dev pcre-dev SS_VER=3.</description>
    </item>
    
    <item>
      <title>使用tcpdump与ngrep</title>
      <link>http://blog.suconghou.cn/post/tcpdump/</link>
      <pubDate>Mon, 16 May 2016 18:21:04 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/tcpdump/</guid>
      <description>各版本 http://www.tcpdump.org/release/
安装依赖 yum install -y flex gcc make byacc or apt-get install flex gcc make byacc wget bzip2
cd /tmp wget http://www.tcpdump.org/release/libpcap-1.7.4.tar.gz tar zxf libpcap-1.7.4.tar.gz cd libpcap-1.7.4 ./configure --prefix=/tmp/lib make -j4 &amp;amp;&amp;amp; make install cd ../ wget http://www.tcpdump.org/release/tcpdump-4.7.4.tar.gz tar zxf tcpdump-4.7.4.tar.gz cd tcpdump-4.7.4 ./configure --prefix=/tmp --disable-ipv6 CFLAGS=&#39;-O3 -I/tmp/lib/include&#39; LDFLAGS=&#39;-L/tmp/lib/lib/libpcap.a&#39; make -j4 make install  安装成功后,位于ls -lh /tmp/sbin/tcpdump ldd查看此文件依赖较少,可直接复制到其他Linux上使用.
采用CFLAGS=&amp;quot;-O3&amp;quot;编译后为1.2MB
tcpdump -h 查看版本号以及用法
我编译好的tcpdump version 4.7.4
 64位 http://share.suconghou.cn/files/bin/tcpdump.xz</description>
    </item>
    
    <item>
      <title>编译安装Apache Traffic Server</title>
      <link>http://blog.suconghou.cn/post/use-apache-traffic-server/</link>
      <pubDate>Mon, 09 May 2016 22:24:14 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-apache-traffic-server/</guid>
      <description>编译安装 Centos下编译安装
yum update -y &amp;amp;&amp;amp; yum install wget gcc g++ gcc-c++ glibc-headers perl openssl openssl-devel tcl-devel libxml2-devel pcre-devel wget http://apache.fayea.com/trafficserver/trafficserver-6.1.1.tar.bz2 tar xvjf trafficserver-6.1.1.tar.bz2 cd trafficserver-6.1.1 ./configure make &amp;amp;&amp;amp; make install useradd -s /sbin/nologin trafficserver  Apache镜像http://archive.apache.org/dist/
国内Apache镜像http://apache.fayea.com/
编译完成后,就可以使用了,默认是安装在/usr/local/bin,编译后是比较大
total 98M -rwxr-xr-x 1 root root 692K May 9 14:30 header_rewrite_test -rwxr-xr-x 1 root root 520K May 9 14:30 traffic_cop -rwxr-xr-x 1 root root 1.9M May 9 14:30 traffic_crashlog -rwxr-xr-x 1 root root 259K May 9 14:30 traffic_ctl -rwxr-xr-x 1 root root 1.</description>
    </item>
    
    <item>
      <title>在树莓派上使用Docker</title>
      <link>http://blog.suconghou.cn/post/use-docker-on-raspberry/</link>
      <pubDate>Sun, 08 May 2016 20:01:56 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-docker-on-raspberry/</guid>
      <description>安装支持Docker的系统 树莓派官方系统并不支持Docker,需要安装.
查看 集成Dcoker的树莓派系统
aria2c -s 50 -c https://downloads.hypriot.com/hypriotos-rpi-v0.8.0.img.zip diskutil list diskutil unmountdisk /dev/disk2  用以下命令前必须卸载u盘diskutil unmountdisk /dev/disk2
sudo dd if=hypriotos-rpi-v0.8.0.img of=/dev/disk2 bs=8k  安装完成重启就可以啦,启动后登陆的用户是pirate,密码hypriot
修改密码:执行passwd,输入当前密码,输入新密码,再输入新密码,更新完成
执行exit退出,或者sudo reboot重启
创建用户:useradd -g test -d /home/test1 -s /etc/bash -m test1 注解：-g 所属组 -d 家目录 -s 所用的SHELL passwd abc
获得sudo权限:编辑/etc/sudoers 加入新添加的用户名</description>
    </item>
    
    <item>
      <title>Android Studio</title>
      <link>http://blog.suconghou.cn/software/android-studio/</link>
      <pubDate>Fri, 08 Apr 2016 10:08:24 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/software/android-studio/</guid>
      <description>下载 Android Studio 安装android-sdk brew install android-sdk 或者使用Android Studio SDK Manager
android studio 下载的sdk 位于 /Users/admin/Library/Android/sdk</description>
    </item>
    
    <item>
      <title>air</title>
      <link>http://blog.suconghou.cn/project/air/</link>
      <pubDate>Thu, 18 Feb 2016 20:49:27 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/project/air/</guid>
      <description>serve static files in the air 在线解析压缩合并Less,打包压缩Javascript.
手动压缩打包,执行Lint,静态服务器,缓存版本控制,完美结合CDN
安装 npm install airs -g
基本参数  纯静态项目,在项目根目录直接执行air   即可开启http服务,直接输出编译后的结果
  PHP项目,项目根目录执行air develop   会开启静态服务器,同时开启一个PHP Server
PHP Server 端口号为静态服务器端口号+1
  服务器模式 air server   编译将做优化和代码压缩
 指令
 使用air lint 执行Jslint,而不开启http服务,文件修改实时触发
使用air lint jsfile1.js jsfile2.js jsfile3.js 可对指定文件进行Jslint,可对一个或多个文件
使用air compress 在static目录下执行,将会根据static.json文件描述,压缩合并输出到指定文件
使用air compress lessfile1.less lessfile2.less 将对less文件解析压缩,多个less文件将会压缩合并为一个css文件
使用air compress jsfile1.js jsfile2.js 将对js文件压缩,多个js文件将合并为一个js文件
可以参数中同时存在less文件和js文件,air compress less1.less file1.js file2.less file3.js 工具自动按类型分组,less文件和js文件,各自压缩合并,其他文件类型忽略.</description>
    </item>
    
    <item>
      <title>linux相关操作</title>
      <link>http://blog.suconghou.cn/post/linux/</link>
      <pubDate>Thu, 21 Jan 2016 13:40:53 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux/</guid>
      <description>读取文件的前几字节 head 或 tail 以字节而不是以行为单位，那该怎么办呢？您可以用 -c 选项代替 -n 选项
前100字节,并以hex格式显示 head -c 100 file | hexdump
后100字节tail -c 100 file | hexdump
还可以使用管道交给 md5sum,可比较前100字节或后100字节是否相同
head -c 100 file | hexdump | md5sum
取文件1G(1073741824)至+819200处的md5值
head -c 1074561024 file | tail -c 819200 |md5sum
使用dd会更加方便,也更高效
dd if=file bs=1 skip=1073741824 count=819200 | md5sum
拆分文件 split -b 1kb /tmp/file sfile
拆分文件大小为1k，也可以是1b，或者1m之类的单位
xxd hexdump od https://www.zhihu.com/question/40441308/answer/86637730
使用 sed 修改二进制文件 先找到查找的目标
例如/opt/local则对应echo /opt/local | xxd</description>
    </item>
    
    <item>
      <title>玩转树莓派</title>
      <link>http://blog.suconghou.cn/post/play-with-raspberrypi/</link>
      <pubDate>Sun, 17 Jan 2016 22:21:49 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/play-with-raspberrypi/</guid>
      <description>官方操作系统 https://www.raspberrypi.org/downloads/raspbian/
带桌面版1.4G
精简版293MB 下载 wget https://downloads.raspberrypi.org/raspbian_lite_latest
安装其他操作系统 CentOS CentOS7官方支持了AMRV7发布了树莓派2、香蕉派、以及CubitTruck单片机的版本
CentOS7官方下载 root 密码 centos 大约275MB
CentOS7.3也已发布
http://mirror.centos.org/altarch/7.3.1611/isos/armhfp/
树莓派2版254M
ArchLinux https://archlinuxarm.org/
树莓派1 https://archlinuxarm.org/platforms/armv6/raspberry-pi
树莓派2 https://archlinuxarm.org/platforms/armv7/broadcom/raspberry-pi-2
树莓派3 https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3
有国内的下载镜像 https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/os/
大约293MB
安装OSMC 下载一览,选择Disk images,此系统较省资源,默认开机进入OSMC,img.gz 大小约160M
OSMC_FILE=OSMC_TGT_rbp2_20160621.img.gz cd /data/tmp axel -n 20 http://download.osmc.tv/installers/diskimages/$OSMC_FILE md5sum $OSMC_FILE ls -lh  查看所有版本 http://download.osmc.tv/installers/diskimages/
 使用清华大学镜像站国内下载速度更快: https://mirrors.tuna.tsinghua.edu.cn/osmc/osmc/download/installers/
 插入内存卡,开始烧写到内存卡中.烧写之前需要取消挂载
diskutil list 查看你的内存卡的挂载位置,取消挂载
执行diskutil unmountdisk /dev/disk2 取消挂载,需要稍等一小会.
烧写,烧写过程中读卡器不断闪烁.
gzip -dc /data/tmp/$OSMC_FILE | sudo dd of=/dev/disk2 bs=8k  dd的用法: dd if=/dev/zero of=hello.</description>
    </item>
    
    <item>
      <title>使用镜像加速homebrew</title>
      <link>http://blog.suconghou.cn/post/homebrew-speedup/</link>
      <pubDate>Fri, 15 Jan 2016 12:56:53 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/homebrew-speedup/</guid>
      <description>中国科大镜像站 提供 Debian, Ubuntu, Fedora, Archlinux, CentOS 等多个发行版的官方源. 还有brew 的二进制源,brew使用此配置能大大提升速度.
cd /usr/local/Homebrew git remote set-url origin git://mirrors.ustc.edu.cn/brew.git git remote -v brew update  修改源：https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git 和 https://lug.ustc.edu.cn/wiki/mirrors/help/homebrew-core.git 修改二进制源见https://lug.ustc.edu.cn/wiki/mirrors/help/homebrew-bottles
即export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
使用brew config 查看ORIGIN和HOMEBREW_BOTTLE_DOMAIN已经是新的mirrors.ustc.edu.cn即为配置成功
brew list 列出所有安装的模块
brew search mysql 查找
brew commands 查看所有命令
安装（需要 Ruby）： ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;
搜索：brew search mysql
查询：brew info mysql 主要看具体的信息，比如目前的版本，依赖，安装后注意事项等
更新：brew update 这会更新 Homebrew 自己，并且使得接下来的两个操作有意义——
检查过时（是否有新版本）：brew outdated 这回列出所有安装的软件里可以升级的那些
升级：brew upgrade 升级所有可以升级的软件们
清理：brew cleanup 清理不需要的版本极其安装包缓存</description>
    </item>
    
    <item>
      <title>Chrome浏览器安装</title>
      <link>http://blog.suconghou.cn/post/broswer-chrome/</link>
      <pubDate>Thu, 14 Jan 2016 17:11:34 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/broswer-chrome/</guid>
      <description>配置Chrome跨域 Chrome 浏览器配置可以跨域
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --disable-web-security
或者
open -a &amp;quot;Google Chrome&amp;quot; --args --disable-web-security
必须完全退出Chrome,再使用上述方法.</description>
    </item>
    
    <item>
      <title>Crontab与自动备份</title>
      <link>http://blog.suconghou.cn/post/use-crontab-in-your-server/</link>
      <pubDate>Tue, 12 Jan 2016 13:10:21 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/use-crontab-in-your-server/</guid>
      <description>Crontab使用 crontab -l 查看当前用户的crontab列表 使用crontab -e开始编辑规则
基本格式 : *　*　*　*　*　command 分　时 日 月　周　命令 * 第1列表示分钟1～59 每分钟用*或者*/1表示 * 第2列表示小时1～23（0表示0点） * 第3列表示日期1～31 * 第4列表示月份1～12 * 第5列标识号星期0～6（0表示星期天） * 第6列要运行的命令  禁止Crontab产生邮件: 在crontab末尾加上&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 或者 &amp;gt; &amp;amp;&amp;gt; /dev/null
例如
0 1 5 10 * /path/to/script.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 0 1 5 10 * /path/to/script.sh &amp;gt; &amp;amp;&amp;gt; /dev/null  你也可以将/dev/null换成你想要存储日志的文件地址
定时备份数据库 先写好shell脚本存入/home/cron1.sh
user=&amp;quot;root&amp;quot; pass=&amp;quot;root&amp;quot; host=&amp;quot;127.0.0.1&amp;quot; port=&amp;quot;3306&amp;quot; dbs=&amp;quot;db1 db2 db3&amp;quot; dir=&amp;quot;/data/backup/&amp;quot; nowDate=`date &#39;+%Y%m%d&#39;` nowTime=`date &#39;+%H%M&#39;` backupdir=$dir$nowDate timeold=`date -d &amp;quot;-1 week&amp;quot; +%Y%m%d` delold=$dir$timeold if [ !</description>
    </item>
    
    <item>
      <title>MySQL性能优化</title>
      <link>http://blog.suconghou.cn/post/improve-mysqldb/</link>
      <pubDate>Mon, 11 Jan 2016 12:02:40 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/improve-mysqldb/</guid>
      <description>配置文件 配置文件一般放在/etc/my.cnf 或者 /etc/mysql/my.cnf
默认的配置文件示例存放于/usr/share/mysql
各个文件适配不同内存的配置
   文件 内存大小     my-small.cnf &amp;lt;= 64M 不经常开启mysql   my-medium.cnf 32M–64M 经常其他程序搭配mysql   my-large.cnf 512M   my-huge.cnf 1G-2G   my-innodb-heavy-4G.cnf 4GB 使用InnoDB    使用SHOW VARIABLES来查看系统参数,通过SHOW STATUS来判断系统状态
show 命令还有很多用途
   命令 描述     show databases 或show tables from database_name 显示mysql中所有数据库的名称   show tables 显示当前数据库中所有表的名称   show columns from table_name from database_name 显示表中列名称   show grants for user_name 显示一个用户的权限，显示结果类似于grant命令   show table status 显示当前使用或者指定的database中的每个表的信息。</description>
    </item>
    
    <item>
      <title>ffmpeg安装使用</title>
      <link>http://blog.suconghou.cn/post/ffmpeg-usage/</link>
      <pubDate>Mon, 11 Jan 2016 10:19:20 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/ffmpeg-usage/</guid>
      <description>下载官方的静态编译的Linux通用二进制包,同时也包含ARM版本的 ffmpeg
armhf比armel硬件要求,树莓派2可用armhf,树莓派1使用armel
Windows版本也提供编译好的下载
https://ffmpeg.zeranoe.com/builds/
Mac编译好的下载(FFmpeg,FFserver,FFprobe,FFplay)
http://evermeet.cx/ffmpeg/
使用brew安装 brew install ffmpeg --with-ffplay
让ffmpeg转为MP4边下边播 ffmpeg -i input.xx -c copy -movflags faststart output.mp4
-movflags faststart 可修改MP4的moov
关于faststart还有一个python项目,类似于ffmpeg软件包中的qt-faststart https://github.com/danielgtaylor/qtfaststart
可以使用pip install qtfaststart,仅需10KB+
flv to mp4 ffmpeg -i input.flv -codec copy output.mp4 快速转化flv到mp4,高质量转化( only changes container without reencoding )
ffmpeg -i input.flv -c copy -copyts output.mp4 也比较快,高质量转化
ffmpeg -i aaa.flv -c:v libx264 -crf 28 output.mp4 带压缩的转换,非常消耗CPU和时间
更多用法可以参考 http://www.jianshu.com/p/053665062f22
处理m3u8地址视频
下载转码 ffmpeg -i &amp;quot;http://m3u8的地址&amp;quot;&amp;quot; -c copy -bsf:a aac_adtstoasc output.</description>
    </item>
    
    <item>
      <title>git基本使用</title>
      <link>http://blog.suconghou.cn/post/git-usage/</link>
      <pubDate>Fri, 08 Jan 2016 23:43:00 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/git-usage/</guid>
      <description>git配置 git config --global user.email &amp;quot;1126045770@qq.com&amp;quot; git config --global user.name &amp;quot;sucongohu&amp;quot; git config --global core.autocrlf false git config --global color.ui true git config --global credential.helper store git config --global alias.lg &amp;quot;log --graph --all --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci,%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative&amp;quot; git config --global alias.laststash =&amp;quot;diff stash@{0}^!&amp;quot;   以上分别是设置用户信息,禁止转换换行符,颜色高亮,记住密码,设置别名列出分支图. 设置别名后,可以使用 git lg 查看各个分支关系
 使用git还经常碰到文件权限发生变化,也显示文件变动了,需要提交,如果你不想将文件权限的变动纳入版本控制可以
git config core.filemode false  对于一些本地和服务器不一致的配置文件,git status每次查看都显示出来,git add -u又会一不小心提交,可以使用 忽略已追踪文件的变动
git update-index --assume-unchanged PATH_TO_FILE  批量操作当前目录下的所有仓库</description>
    </item>
    
    <item>
      <title>Sublime使用和设置</title>
      <link>http://blog.suconghou.cn/post/sublime-usage/</link>
      <pubDate>Fri, 08 Jan 2016 23:21:12 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/sublime-usage/</guid>
      <description>配置文件 最喜欢的字体Monaco,此处下载
配置文件 Preferences.sublime-settings
{ &amp;quot;close_windows_when_empty&amp;quot;: true, &amp;quot;default_encoding&amp;quot;: &amp;quot;UTF-8&amp;quot;, &amp;quot;default_line_ending&amp;quot;: &amp;quot;unix&amp;quot;, &amp;quot;ensure_newline_at_eof_on_save&amp;quot;: true, &amp;quot;font_face&amp;quot;: &amp;quot;Monaco&amp;quot;, &amp;quot;font_size&amp;quot;: 13, &amp;quot;highlight_line&amp;quot;: true, &amp;quot;highlight_modified_tabs&amp;quot;: true, &amp;quot;ignored_packages&amp;quot;: [ &amp;quot;Vintage&amp;quot; ], &amp;quot;show_encoding&amp;quot;: true, &amp;quot;show_line_endings&amp;quot;: true, &amp;quot;tab_size&amp;quot;: 4, &amp;quot;translate_tabs_to_spaces&amp;quot;: false, &amp;quot;trim_trailing_white_space_on_save&amp;quot;: true, &amp;quot;update_check&amp;quot;: false, &amp;quot;word_wrap&amp;quot;: false }  插件 open_browser.py 插件
import sublime, sublime_plugin import webbrowser import os url_map = { &#39;D:\\git\\bbs\\&#39; : &#39;http://127.0.0.3/&#39;, &#39;D:\\php\\su\\&#39; : &#39;http://127.0.0.2/&#39;, &#39;D:\\php\\htdocs\\&#39; : &#39;http://127.0.0.1/&#39; } class OpenBrowserCommand(sublime_plugin.TextCommand): def run(self,edit): window = sublime.</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>http://blog.suconghou.cn/post/linux-ssh/</link>
      <pubDate>Thu, 07 Jan 2016 13:47:22 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux-ssh/</guid>
      <description>避免SSH自动断开连接 如果有一段时间在SSH连接上无数据传输，连接就会断开,以下设定可以解决这个问题
方案一：在客户端设置
sudo vim /etc/ssh/ssh_config
开启 ServerAliveInterval 60 开启 TCPKeepAlive yes
此后该系统里的用户连接SSH时，每60秒会发一个KeepAlive请求，避免被踢。
方案二：在服务器端设置
sudo vim /etc/ssh/sshd_config
开启ClientAliveInterval 60 开启 TCPKeepAlive yes
如果您只想让当前的 ssh 保持连接，可以使用以下的命令：
ssh -o ServerAliveInterval=60 user@sshserver
ssh隧道 CfNg参数  C表示压缩数据传输 f表示后台用户验证,这个选项很有用,没有shell的不可登陆账号也能使用. N表示不执行脚本或命令 g表示允许远程主机连接转发端口,往往会没有效果,需要修改/etc/ssh/sshd_config添加gatewayports yes  -L本地转发 -L [本地监听IP:]本地监听端口号:目标主机IP:目标端口号 (其中,“本地监听IP”可以省略，省略的话就认为是“0.0.0.0”，但为了安全性考虑，请务必使用“127.0.0.1”做为本地监听端口， 而不要使用默认的“0.0.0.0”。）
ssh -D 8080 user@host SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。
ssh -L 2121:host2:21 host3 命令中的L参数一共接受三个值，分别是&amp;rdquo;本地端口:目标主机:目标主机端口&amp;rdquo;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。 这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。
ssh -CTfNg -L 6300:127.0.0.1:1521 oracle@172.16.1.164  本机的6300端口就是远程主机172.16.1.164的1521端口
-R远程转发  ssh -CTfNg -R 1521:127.0.0.1:6300 oracle@172.16.1.164  在远程主机172.</description>
    </item>
    
    <item>
      <title>安装NodeJs和npm</title>
      <link>http://blog.suconghou.cn/post/install-nodejs/</link>
      <pubDate>Thu, 07 Jan 2016 10:29:59 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/install-nodejs/</guid>
      <description>安装NodeJs nodejs官方提供了编译好的二进制的包,全平台都有,十分方便 最新版本NodeJs官方库
其他信息http://www.oschina.net/news/73974/node-v6-2-1-current
例如安装Linux版本
wget https://nodejs.org/dist/v6.0.0/node-v6.0.0-linux-x64.tar.xz tar -xJf node-v6.0.0-linux-x64.tar.xz sudo mv node-v6.0.0-linux-x64 /usr/local/nodejs sudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node sudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm node -v npm -v  单文件版node.exe单独安装npm 1.clone npm 源码 git clone --recursive git://github.com/isaacs/npm.git
2.进入npm目录,安装npm node cli.js install npm -gf
版本切换 使用n来管理node的版本,npm install -g n,小巧无依赖,仅一个文件.
也不会搞乱你的node_modules文件夹,node的可执行文件位置也始终不会变化.
node-compiler 编译nodejs为可执行文件. https://github.com/pmq20/node-compiler 需要 node npm ,编译过程会安装依赖npm install
https://sourceforge.net/projects/squashfs/files/
yum install make gcc zlib-devel glibc-static gcc-c++ -y make -j4  一些必备package sudo npm install -g less autoprefixer express jshint uglify-js webpack react-native-cli airs  ** npm加速 **</description>
    </item>
    
    <item>
      <title>网摘</title>
      <link>http://blog.suconghou.cn/post/some-good-useful-things/</link>
      <pubDate>Wed, 06 Jan 2016 15:58:03 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/some-good-useful-things/</guid>
      <description>基于网页的P2P文件分享 https://www.sharedrop.io/
云计算,存储,分发等 阿里百川 淘宝开放平台
淘宝云盘,也外链图片做图床 淘宝CDN,速度很快,https,仅仅图片限制3M以内
 包含容器引擎（TAE）, 多媒体存储处理分发, 可免费使用一年
 网易的Docker服务
 价格略贵最低29/月
 bmob移动后端云,网友示例项目BandwaghonhostAPP,结合mui移动开发框架开发手机APP
短信,推动消息等  阿里大鱼   阿里巴巴旗下的短信验证码通知服务,价格实惠,短信通知≤0.045元／条,还有文本转语音通知≤0.055元／条
  SendCloud   短信和邮件发送服务,邮件有每日免费200封,短信5.5分每条
 图像压缩软件 ImageOptim无损压缩
mozjpeg Mozilla的jpg压缩技术,支持无损,有损压缩在线压缩,最大2M.
tinypng 众多压缩软件中压缩效果较好的,支持png,jpg在线批量压缩
kraken 类似于tinypng,也提供在线压缩
pngquant 开源的压缩png,据说tinypng基于此项目
nodejs imagemin NodeJs模块,压缩jpg,png,压缩效果一般
移动混合应用/HHTML5开发 国产mui 最接近原生APP体验的高性能前端框架,不依赖任何第三方JS库,压缩后的JS和CSS文件仅有100+K和60+K
SUI Mobile 淘宝移动UI框架,轻量，小巧且精美的UI库 方便迅速搭建手机H5应用,兼容iOS 6.0+ 和 Android 4.0+，非常适合开发跨平台Web App。
mobiscroll 移动开发UI,丰富的时间选择器控件还有一些WEBAPP展示,https://github.com/acidb/mobiscroll
桌面开发 nwjs Mac版钉钉使用的就是这个技术,界面还算漂亮
网页动画 百度zrender 基于Canvas的图形仓库交互工具,可以方便的画出很多图形
游戏引擎 阿里Hilo 游戏渲染引擎,实现2048,切水果等.
http://www.egret.com/ 白鹭也是做这个的
https://github.com/iioinc/iio.js 也是canvas的游戏</description>
    </item>
    
    <item>
      <title>MacOs上Chrome中的submit按钮默认样式问题</title>
      <link>http://blog.suconghou.cn/post/mac-chrome-input-submit/</link>
      <pubDate>Tue, 05 Jan 2016 16:44:47 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/mac-chrome-input-submit/</guid>
      <description>发现MacOs的Chrome中,input为submit的按钮,添加其他样式不生效,任然是默认样式, 解决方法是为其添加一个border或者backgroud就好了</description>
    </item>
    
    <item>
      <title>开启docker之旅</title>
      <link>http://blog.suconghou.cn/post/using-docker/</link>
      <pubDate>Tue, 05 Jan 2016 10:28:49 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/using-docker/</guid>
      <description>安装Docker docker 安装需要Linux内核在3.10.0以上,仅支持Linux,在Windows和MacOs上也是基于虚拟机方式运行,需要提前安装虚拟机
OpenVZ的VPS内核版本较低,且不能升级,并不能作为docker server,但是可以使用docker client
 通过df -lhT 看到Type为simfs,而不是ext3,ext4,一般就代表使用的是OpenVZ虚拟化的 查看系统内核版本uname -r  查看安装的系统版本 lsb_release -a 或者 cat /etc/issue
以下二种方法适用于RedHat,CentOS
 cat /etc/redhat-release 或者 cat /etc/centos-release rpm -q centos-release 或者 rpm -q redhat-release  查看是否是64位系统uname -i
下载安装 http://www.oschina.net/news/83328/docker-17-03-1-ce-released
deb/rpm install: curl -fsSL https://get.docker.com/ | sh Linux 64bits tgz: https://get.docker.com/builds/Linux/x86_64/docker-17.03.1-ce.tgz Darwin/OSX 64bits client tgz: https://get.docker.com/builds/Darwin/x86_64/docker-17.03.1-ce.tgz Linux 32bits arm tgz: https://get.docker.com/builds/Linux/armel/docker-17.03.1-ce.tgz Windows 64bits zip: https://get.docker.com/builds/Windows/x86_64/docker-17.03.1-ce.zip Windows 32bits client zip: https://get.docker.com/builds/Windows/i386/docker-17.03.1-ce.zip  快速安装docker并启动 官方安装教程</description>
    </item>
    
    <item>
      <title>Linux下常用的下载利器</title>
      <link>http://blog.suconghou.cn/post/linux-download-tools/</link>
      <pubDate>Fri, 01 Jan 2016 23:54:20 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/linux-download-tools/</guid>
      <description>wget wget -c -O filename &amp;quot;http://xx.com&amp;quot; 下载存储到指定文件,并指定断点续传
wget -nc -c -i url.txt 批量下载文件中指定的资源(每行一个连接),跳过已下载的(同名的),并且断点续传.
wget -i url.txt -O - | mpv - 下载url.txt里的链接,输出到标准输出
使用user-agent
wget --user-agent=&amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36&amp;quot; URL-TO-DOWNLOAD
wget 断点续传 使用 -c 限速使用--limit-rate=300k
wget -c --limit-rate=30k http://...
curl 常用的命令
curl http://xx.com 只获取http消息正文
curl -I http://xx.com 只获取http消息头
curl -i http://xx.com 获取http消息头和正文
curl -d &amp;quot;name=abc&amp;amp;pass=123&amp;quot; http://xx.com 发送http post请求,采用的是application/x-www-form-urlencoded形式
curl -F &amp;quot;name=abc&amp;quot; -F &amp;quot;pass=123&amp;quot; http://xx.</description>
    </item>
    
    <item>
      <title>安装PHP7和NGINX</title>
      <link>http://blog.suconghou.cn/post/install-nginx-php-mysql-redis/</link>
      <pubDate>Fri, 01 Jan 2016 23:51:02 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/install-nginx-php-mysql-redis/</guid>
      <description>编译安装NGINX 首先安装一些依赖
yum -y install gcc make autoconf automake install zlib zlib-devel openssl openssl-devel pcre-devel  apt-get update apt-get -y install gcc make openssl libssl-dev libpcre3 libpcre3-dev  编译安装
Chrome51以后版本废弃了NPN的支持,要让Chrome51以后版本支持http2,需要更新OpenSSL到1.0.2及以上.
查看当前系统的OpenSSL版本:openssl version
更新OpenSSL
OPENSSL_VERSION=openssl-1.0.2h cd /tmp wget https://www.openssl.org/source/${OPENSSL_VERSION}.tar.gz tar zxvf ${OPENSSL_VERSION}.tar.gz cd ${OPENSSL_VERSION} ./config --prefix=/usr --shared make -j4 sudo make install openssl version  最后一句查看版本是否更新了
如果没有www-data用户和组,可以先创建
groupadd www-data adduser -M -s /sbin/nologin www-data -g www-data  编译nginx NGINX_VERSION=nginx-1.11.3 CPU_NUM=`cat /proc/cpuinfo | grep processor | wc -l` cd /tmp wget http://nginx.</description>
    </item>
    
    <item>
      <title>使用hugo搭建静态博客</title>
      <link>http://blog.suconghou.cn/post/start-your-blog-with-hugo/</link>
      <pubDate>Fri, 01 Jan 2016 19:00:18 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/post/start-your-blog-with-hugo/</guid>
      <description>什么是hugo hugo是用Go语言编写的静态网站生成器,与此类似的工具还有Hexo,相比Hexo,他的编译速度更快,而易于使用,主要表现在:
 无依赖,无论是Linux环境,还是MacOs,Windows,下载一个二进制的可执行文件即可使用 即时刷新,无论是对于文章还是样式的修改都能够自动重新编译,自动刷新,无需配置,当你修改了文章,切换回浏览器,看到的已经是新页面了. 主题丰富,易于定制,编写一个主题也十分简单.  如何使用 hugo 是开源的,在github上下载即可.
基本命令  新建一个站点/初始化 hugo new site /path/myblog 新建一篇博文hugo new post/some-post.md 开启http服务器并指定使用主题 hugo server --theme=su --buildDrafts --watch 编译文件,直接执行hugo  当然如果在config.toml里配置好了主题等,直接使用hugo server就可以开始写博文.
如果想让草稿也被渲染,使用hugo server -D
编写主题 在平级的themes目录下,建立一个文件夹为你主题的名字,里面有static,layouts,archetypes文件夹.
static为你的静态目录,layouts为模板目录,archetypes为</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://blog.suconghou.cn/about/</link>
      <pubDate>Fri, 01 Jan 2016 18:58:18 +0800</pubDate>
      
      <guid>http://blog.suconghou.cn/about/</guid>
      <description>关于博客 博客使用hugo搭建,自己编写的主题.
hugo把Markdown解析为html,托管于github pages,DNSPOD双线解析.
国内解析到coding page服务
国外解析到github pages服务
博客常记录一些自己折腾的东西,以备必要时查阅.
关于我 90后,计算机宅男,PHP程序猿,前端攻城狮,也常写一些Node,Go,Python
Mac用户,Linux党,常混迹于各大编程社区.
热爱编程,目前正向全栈发展.</description>
    </item>
    
  </channel>
</rss>